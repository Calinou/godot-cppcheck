<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.7"/>
    <errors>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;t&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;t&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/core_bind.cpp">
            <location file="core/core_bind.cpp" line="1210" column="4" info="t is overwritten"/>
            <location file="core/core_bind.cpp" line="1203" column="4" info="t is assigned"/>
            <symbol>t</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;CoreStringNames::free&apos;" verbose="Unused private function: &apos;CoreStringNames::free&apos;" cwe="398" file0="core/core_string_names.cpp">
            <location file="core/core_string_names.h" line="41" column="14"/>
            <symbol>CoreStringNames::free</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;peer&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;peer&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/debugger/remote_debugger.cpp">
            <location file="core/debugger/remote_debugger.cpp" line="574" column="2"/>
            <symbol>peer</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~RemoteDebuggerPeerTCP()&apos; at line 92. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~RemoteDebuggerPeerTCP()&apos; at line 92. Dynamic binding is not used." file0="core/debugger/remote_debugger_peer.cpp">
            <location file="core/debugger/remote_debugger_peer.h" line="90" column="7" info="close is a virtual function"/>
            <location file="core/debugger/remote_debugger_peer.cpp" line="92" column="2" info="Calling close"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TOOLS_ENABLED;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TOOLS_ENABLED;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/extension/extension_api_dump.cpp" line="99" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;call_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;call_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/gdextension.cpp">
            <location file="core/extension/gdextension.cpp" line="248" column="3"/>
            <symbol>call_func</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;validated_call_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;validated_call_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/gdextension.cpp">
            <location file="core/extension/gdextension.cpp" line="249" column="3"/>
            <symbol>validated_call_func</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ptrcall_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ptrcall_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/gdextension.cpp">
            <location file="core/extension/gdextension.cpp" line="250" column="3"/>
            <symbol>ptrcall_func</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CharBuffer::stack_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;CharBuffer::stack_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/file_access.cpp">
            <location file="core/io/file_access.cpp" line="359" column="17"/>
            <symbol>CharBuffer::stack_buffer</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/io/file_access_compressed.cpp">
            <location file="core/io/file_access_compressed.cpp" line="119" column="31" info="err is overwritten"/>
            <location file="core/io/file_access_compressed.cpp" line="118" column="7" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;open_internal&apos; is called from constructor &apos;FileAccessZip(const String&amp;p_path,const PackedData::PackedFile&amp;p_file)&apos; at line 344. Dynamic binding is not used." verbose="Virtual function &apos;open_internal&apos; is called from constructor &apos;FileAccessZip(const String&amp;p_path,const PackedData::PackedFile&amp;p_file)&apos; at line 344. Dynamic binding is not used." file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.h" line="88" column="16" info="open_internal is a virtual function"/>
            <location file="core/io/file_access_zip.cpp" line="344" column="2" info="Calling open_internal"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="59" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="69" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="74" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="93" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="99" column="16"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;IPAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;IPAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/io/ip_address.cpp">
            <location file="core/io/ip_address.h" line="94" column="2"/>
            <symbol>IPAddress</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDP::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDP::recv_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/packet_peer_udp.cpp">
            <location file="core/io/packet_peer_udp.cpp" line="361" column="16"/>
            <symbol>PacketPeerUDP::recv_buffer</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDP::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDP::packet_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/packet_peer_udp.cpp">
            <location file="core/io/packet_peer_udp.cpp" line="361" column="16"/>
            <symbol>PacketPeerUDP::packet_buffer</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.h" line="124" column="1"/>
            <symbol>ResourceFormatSaverBinaryInstance</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;dst&apos; shadows outer argument" verbose="Local variable &apos;dst&apos; shadows outer argument" cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="116" column="15" info="Shadow variable"/>
            <location file="core/io/resource_format_binary.cpp" line="109" column="33" info="Shadowed declaration"/>
            <symbol>dst</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;dst&apos; shadows outer argument" verbose="Local variable &apos;dst&apos; shadows outer argument" cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="136" column="15" info="Shadow variable"/>
            <location file="core/io/resource_format_binary.cpp" line="109" column="33" info="Shadowed declaration"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dst" verbose="Uninitialized variable: dst" cwe="457" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="116" column="33"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dst" verbose="Uninitialized variable: dst" cwe="457" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="136" column="33"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;UDPServer::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;UDPServer::recv_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/udp_server.cpp">
            <location file="core/io/udp_server.cpp" line="199" column="12"/>
            <symbol>UDPServer::recv_buffer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Basis&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Basis&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/basis.cpp">
            <location file="core/math/basis.h" line="222" column="2"/>
            <symbol>Basis</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Color&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Color&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/color.cpp">
            <location file="core/math/color.h" line="257" column="2"/>
            <symbol>Color</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;x&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;x&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="396" column="4"/>
            <symbol>x</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;y&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;y&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="397" column="4"/>
            <symbol>y</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;z&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;z&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="398" column="4"/>
            <symbol>z</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;denominator&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;denominator&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="399" column="4"/>
            <symbol>denominator</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="186" column="3"/>
            <symbol>Int128</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="191" column="3"/>
            <symbol>Int128</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Rational128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Rational128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="344" column="3"/>
            <symbol>Rational128</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;++low==0&apos; is always false" verbose="Condition &apos;++low==0&apos; is always false" cwe="570" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="256" column="14" info="Condition &apos;++low==0&apos; is always false"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v00" verbose="Possible null pointer dereference: v00" cwe="476" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="964" column="2" info="Null pointer dereference"/>
            <location file="core/math/convex_hull.cpp" line="951" column="12" info="Assuming condition is false"/>
            <location file="core/math/convex_hull.cpp" line="867" column="16" info="Assignment &apos;v00=nullptr&apos;, assigned value is 0"/>
            <symbol>v00</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v10" verbose="Possible null pointer dereference: v10" cwe="476" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="965" column="2" info="Null pointer dereference"/>
            <location file="core/math/convex_hull.cpp" line="951" column="12" info="Assuming condition is false"/>
            <location file="core/math/convex_hull.cpp" line="868" column="16" info="Assignment &apos;v10=nullptr&apos;, assigned value is 0"/>
            <symbol>v10</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 1) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 1) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1812" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 2) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 2) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1812" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1812" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 4) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 4) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1812" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1830" column="4"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1860" column="4"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="331" column="38"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="387" column="38"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="439" column="38"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.h" line="474" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="869" column="22"/>
            <symbol>alloca</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="870" column="11"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="871" column="13"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Plane&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Plane&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/plane.cpp">
            <location file="core/math/plane.h" line="88" column="17"/>
            <symbol>Plane</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Projection&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Projection&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/projection.cpp">
            <location file="core/math/projection.h" line="155" column="2"/>
            <symbol>Projection</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::tnear</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::time&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::tfar</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::u&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::u&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::u</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::v&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::v&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::v</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::primID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::instID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="62" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="62" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/math/static_raycaster.h" line="53" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/math/static_raycaster.h" line="53" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;basis&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;basis&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/transform_3d.cpp">
            <location file="core/math/transform_3d.cpp" line="231" column="2"/>
            <symbol>basis</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Transform3D&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Transform3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/transform_3d.cpp">
            <location file="core/math/transform_3d.h" line="126" column="2"/>
            <symbol>Transform3D</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="186" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="287" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="388" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Vector4i&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Vector4i&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/vector4i.cpp">
            <location file="core/math/vector4i.h" line="125" column="2"/>
            <symbol>Vector4i</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;CallableCustomMethodPointerBase&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;CallableCustomMethodPointerBase&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="40" column="1"/>
            <symbol>CallableCustomMethodPointerBase</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="107" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="107" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="162" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="162" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="217" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="217" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="270" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="270" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="311" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="311" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallableCustomStaticMethodPointer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallableCustomStaticMethodPointer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="270" column="2"/>
            <symbol>CallableCustomStaticMethodPointer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallableCustomStaticMethodPointerRet&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallableCustomStaticMethodPointerRet&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="311" column="2"/>
            <symbol>CallableCustomStaticMethodPointerRet</symbol>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;return&apos; condition is always true." verbose="Identical inner &apos;return&apos; condition is always true (outer condition is &apos;*method&apos; and inner condition is &apos;*method&apos;)." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="558" column="11" info="identical inner condition: *method"/>
            <location file="core/object/class_db.cpp" line="557" column="17" info="outer condition: *method"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.h" line="53" column="2"/>
            <symbol>MethodDefinition</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.h" line="55" column="2"/>
            <symbol>MethodDefinition</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/message_queue.cpp">
            <location file="core/object/message_queue.cpp" line="211" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;MethodBindVarArgT::_gen_return_type_info_impl&apos;" verbose="Unused private function: &apos;MethodBindVarArgT::_gen_return_type_info_impl&apos;" cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="236" column="22"/>
            <symbol>MethodBindVarArgT::_gen_return_type_info_impl</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;MethodBindVarArgTR::_gen_return_type_info_impl&apos;" verbose="Unused private function: &apos;MethodBindVarArgTR::_gen_return_type_info_impl&apos;" cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="275" column="22"/>
            <symbol>MethodBindVarArgTR::_gen_return_type_info_impl</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindT&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="352" column="2"/>
            <symbol>MethodBindT</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTC&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTC&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="427" column="2"/>
            <symbol>MethodBindTC</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTR&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTR&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="513" column="2"/>
            <symbol>MethodBindTR</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTRC&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTRC&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="600" column="2"/>
            <symbol>MethodBindTRC</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="666" column="2"/>
            <symbol>MethodBindTS</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTRS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTRS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="732" column="2"/>
            <symbol>MethodBindTRS</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="669" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ObjectDB::cleanup&apos;" verbose="Unused private function: &apos;ObjectDB::cleanup&apos;" cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="971" column="14"/>
            <symbol>ObjectDB::cleanup</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ObjectDB::setup&apos;" verbose="Unused private function: &apos;ObjectDB::setup&apos;" cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="977" column="14"/>
            <symbol>ObjectDB::setup</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="271" column="37"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="275" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="282" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="287" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;return_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;return_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="293" column="3"/>
            <symbol>return_val</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="294" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;return_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;return_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="299" column="3"/>
            <symbol>return_val</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="300" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;to_string&apos; is called from destructor &apos;~Object()&apos; at line 1842. Dynamic binding is not used." verbose="Virtual function &apos;to_string&apos; is called from destructor &apos;~Object()&apos; at line 1842. Dynamic binding is not used." file0="core/object/object.cpp">
            <location file="core/object/object.h" line="835" column="17" info="to_string is a virtual function"/>
            <location file="core/object/object.cpp" line="1842" column="25" info="Calling to_string"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PropertyInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PropertyInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="181" column="2"/>
            <symbol>PropertyInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="271" column="2"/>
            <symbol>MethodInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="279" column="2"/>
            <symbol>MethodInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Object&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Object&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="645" column="2"/>
            <symbol>Object</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Connection&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Connection&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="572" column="3"/>
            <symbol>Connection</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1749" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1771" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1966" column="18"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_token&apos; can be declared with const" verbose="Parameter &apos;p_token&apos; can be declared with const" cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1789" column="41" info="Parameter &apos;p_token&apos; can be declared with const"/>
            <symbol>p_token</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;_ObjectDebugLock&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;_ObjectDebugLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="49" column="2"/>
            <symbol>_ObjectDebugLock</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="170" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="182" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="188" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;display&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;display&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/script_language.cpp">
            <location file="core/object/script_language.h" line="348" column="4"/>
            <symbol>display</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;insert_text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;insert_text&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/script_language.cpp">
            <location file="core/object/script_language.h" line="349" column="4"/>
            <symbol>insert_text</symbol>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="core/object/worker_thread_pool.cpp">
            <location file="core/object/worker_thread_pool.cpp" line="161" column="2"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/worker_thread_pool.cpp">
            <location file="core/object/worker_thread_pool.cpp" line="441" column="27"/>
            <symbol>alloca</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/worker_thread_pool.cpp">
            <location file="core/object/worker_thread_pool.cpp" line="198" column="15"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" cwe="401" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="129" column="4"/>
            <symbol>mem</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" cwe="401" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="139" column="3"/>
            <symbol>mem</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="75" column="32" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="70" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="81" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="70" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="110" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="105" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="160" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="153" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PoolAllocator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PoolAllocator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/os/pool_allocator.cpp">
            <location file="core/os/pool_allocator.h" line="141" column="2"/>
            <symbol>PoolAllocator</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/node_path.cpp">
            <location file="core/string/node_path.h" line="93" column="2"/>
            <symbol>NodePath</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="97" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="184" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="186" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="187" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer that will be invalid when returning." verbose="Returning pointer that will be invalid when returning." cwe="562" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="124" column="10"/>
            <location file="core/string/ustring.cpp" line="124" column="10" info="Address of variable taken here."/>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer that will be invalid when returning." verbose="Returning pointer that will be invalid when returning." cwe="562" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="194" column="10"/>
            <location file="core/string/ustring.cpp" line="194" column="10" info="Address of variable taken here."/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Char16String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Char16String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="114" column="17"/>
            <symbol>Char16String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CharString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CharString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="155" column="17"/>
            <symbol>CharString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="466" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="467" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="468" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="472" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CommandQueueMT&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CommandQueueMT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/templates/command_queue_mt.cpp">
            <location file="core/templates/command_queue_mt.h" line="417" column="2"/>
            <symbol>CommandQueueMT</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="70" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;object&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;object&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="510" column="2"/>
            <symbol>object</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="511" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Callable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Callable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.h" line="128" column="2"/>
            <symbol>Callable</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="136" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="148" column="2"/>
            <symbol>callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;binds&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;binds&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="149" column="2"/>
            <symbol>binds</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="246" column="2"/>
            <symbol>callable</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: operator" verbose="syntax error: operator" file0="core/variant/dictionary.cpp">
            <location file="core/variant/dictionary.cpp" line="102" column="48"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;array&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;array&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="224" column="4"/>
            <symbol>array</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="325" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="326" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="428" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="429" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="430" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="435" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="436" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="437" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="438" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="439" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="440" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="441" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="442" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="443" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="444" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="445" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="446" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="447" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="448" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="449" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="450" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="451" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="452" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="453" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="454" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="455" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="456" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="457" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="458" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="459" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="460" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="461" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="462" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="463" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="464" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="465" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="466" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="467" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="468" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="469" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="471" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="472" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="473" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="474" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="475" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="476" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="477" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="478" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="479" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="480" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="481" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="483" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="484" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="485" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="486" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="488" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="497" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="498" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="499" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="500" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="501" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="502" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; uint8_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; uint8_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; uint8_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; int32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; int64_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; int64_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; int64_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; float &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; float &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; float &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; double &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; double &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; double &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; String &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; String &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; String &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Vector2 &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Vector2 &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; Vector2 &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Vector3 &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Vector3 &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; Vector3 &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Color &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Color &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef &lt; Color &gt;</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;args&apos; can be declared with const" verbose="Variable &apos;args&apos; can be declared with const" cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="820" column="10" info="Variable &apos;args&apos; can be declared with const"/>
            <symbol>args</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="432" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="433" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant_call.cpp">
            <location file="core/variant/variant.h" line="223" column="18"/>
            <symbol>PackedArrayRef</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;enum_data&apos; can be declared with const" verbose="Variable &apos;enum_data&apos; can be declared with const" cwe="398" file0="core/variant/variant_call.cpp">
            <location file="core/variant/variant_call.cpp" line="1495" column="26" info="Variable &apos;enum_data&apos; can be declared with const"/>
            <symbol>enum_data</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;enum_data&apos; can be declared with const" verbose="Variable &apos;enum_data&apos; can be declared with const" cwe="398" file0="core/variant/variant_call.cpp">
            <location file="core/variant/variant_call.cpp" line="1505" column="26" info="Variable &apos;enum_data&apos; can be declared with const"/>
            <symbol>enum_data</symbol>
        </error>
        <error id="templateRecursion" severity="information" msg="TemplateSimplifier: max template recursion (100) reached for template &apos;add_constructor&lt;:: RID , :: RID&gt;&apos;. You might want to limit Cppcheck recursion." verbose="TemplateSimplifier: max template recursion (100) reached for template &apos;add_constructor&lt;:: RID , :: RID&gt;&apos;. You might want to limit Cppcheck recursion." file0="core/variant/variant_construct.cpp">
            <location file="core/variant/variant_construct.cpp" line="185" column="18"/>
        </error>
        <error id="templateRecursion" severity="information" msg="TemplateSimplifier: max template recursion (100) reached for template &apos;register_op&lt;Basis , Basis , int64_t&gt;&apos;. You might want to limit Cppcheck recursion." verbose="TemplateSimplifier: max template recursion (100) reached for template &apos;register_op&lt;Basis , Basis , int64_t&gt;&apos;. You might want to limit Cppcheck recursion." file0="core/variant/variant_op.cpp">
            <location file="core/variant/variant_op.cpp" line="367" column="14"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/variant_parser.cpp">
            <location file="core/variant/variant_parser.cpp" line="76" column="29"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Stream::readahead_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;Stream::readahead_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/variant/variant_parser.cpp">
            <location file="core/variant/variant_parser.h" line="60" column="3"/>
            <symbol>Stream::readahead_buffer</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_parser.cpp">
            <location file="core/variant/variant_parser.cpp" line="1131" column="8" info="err is overwritten"/>
            <location file="core/variant/variant_parser.cpp" line="1093" column="11" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1056" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1063" column="9"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1056" column="2" info="p_func is overwritten"/>
            <location file="core/variant/variant_utility.cpp" line="1056" column="2" info="p_func is assigned"/>
            <symbol>p_func</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1063" column="7" info="p_func is overwritten"/>
            <location file="core/variant/variant_utility.cpp" line="1063" column="7" info="p_func is assigned"/>
            <symbol>p_func</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p_func&apos; is assigned a value that is never used." verbose="Variable &apos;p_func&apos; is assigned a value that is never used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1056" column="2"/>
            <symbol>p_func</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p_func&apos; is assigned a value that is never used." verbose="Variable &apos;p_func&apos; is assigned a value that is never used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1063" column="7"/>
            <symbol>p_func</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 252. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 252. Dynamic binding is not used." file0="drivers/alsamidi/midi_driver_alsamidi.cpp">
            <location file="drivers/alsamidi/midi_driver_alsamidi.h" line="101" column="15" info="close is a virtual function"/>
            <location file="drivers/alsamidi/midi_driver_alsamidi.cpp" line="252" column="2" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;InputConnection&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;InputConnection&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="drivers/alsamidi/midi_driver_alsamidi.cpp">
            <location file="drivers/alsamidi/midi_driver_alsamidi.h" line="57" column="3"/>
            <symbol>InputConnection</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverCoreMidi()&apos; at line 114. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverCoreMidi()&apos; at line 114. Dynamic binding is not used." file0="drivers/coremidi/midi_driver_coremidi.cpp">
            <location file="drivers/coremidi/midi_driver_coremidi.h" line="52" column="15" info="close is a virtual function"/>
            <location file="drivers/coremidi/midi_driver_coremidi.cpp" line="114" column="2" info="Calling close"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/environment/gi.h" line="45" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerCanvasGLES3::items&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerCanvasGLES3::items&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="2518" column="24"/>
            <symbol>RasterizerCanvasGLES3::items</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="110" column="5"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vert_id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vert_id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="111" column="5"/>
            <symbol>vert_id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;frag_id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;frag_id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="112" column="5"/>
            <symbol>frag_id</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="168" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="169" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="170" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="171" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="70" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="182" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="183" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="184" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="185" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="97" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="210" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="211" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="212" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="213" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="70" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="224" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="225" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="226" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="227" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="97" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="324" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="325" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="326" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="327" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="70" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="341" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="342" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="343" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="344" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="97" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="373" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="374" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="375" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="376" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="70" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="388" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="389" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="390" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="391" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="97" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="1916" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="2324" column="17"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.h" line="80" column="21" info="Shift"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.h" line="80" column="21" info="Integer overflow"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/shader_gles3.h" line="51" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerSceneGLES3::time&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerSceneGLES3::time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="2607" column="23"/>
            <symbol>RasterizerSceneGLES3::time</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!force_alpha&apos; is always true" verbose="Condition &apos;!force_alpha&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1304" column="9" info="Condition &apos;!force_alpha&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1302" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;force_alpha&apos; is always false" verbose="Condition &apos;force_alpha&apos; is always false" cwe="570" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1307" column="9" info="Condition &apos;force_alpha&apos; is always false"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1302" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_begin&apos; can be reduced." verbose="The scope of the variable &apos;fade_begin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1648" column="9"/>
            <symbol>fade_begin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_length&apos; can be reduced." verbose="The scope of the variable &apos;fade_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1649" column="9"/>
            <symbol>fade_length</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderGLES3::feedbacks&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderGLES3::feedbacks&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/shader_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.cpp" line="728" column="14"/>
            <symbol>ShaderGLES3::feedbacks</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/config.h" line="44" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/light_storage.h" line="48" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2614" column="19"/>
            <symbol>CanvasShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2781" column="16"/>
            <symbol>SkyShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2781" column="16"/>
            <symbol>SkyShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_position&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_position&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2781" column="16"/>
            <symbol>SkyShaderData::uses_position</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_half_res&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_half_res&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2781" column="16"/>
            <symbol>SkyShaderData::uses_half_res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_quarter_res&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_quarter_res&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2781" column="16"/>
            <symbol>SkyShaderData::uses_quarter_res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_light&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_light&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2781" column="16"/>
            <symbol>SkyShaderData::uses_light</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::blend_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::blend_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::blend_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::alpha_antialiasing_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::alpha_antialiasing_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::alpha_antialiasing_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::depth_draw&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::depth_draw&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::depth_draw</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::depth_test&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::depth_test</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::cull_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::cull_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::cull_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_point_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_point_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_point_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_blend_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_blend_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_blend_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_alpha_clip&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_alpha_clip&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_alpha_clip</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_depth_prepass_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_depth_prepass_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_depth_prepass_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_discard&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_discard&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_discard</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_roughness&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_roughness&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_roughness</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_normal&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_normal&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_normal</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_particle_trails&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_particle_trails&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_particle_trails</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::wireframe&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::wireframe&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::wireframe</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::unshaded&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::unshaded&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::unshaded</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_vertex&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_vertex&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_vertex</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_position&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_position&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_position</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_sss&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_sss&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_sss</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_transmittance&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_transmittance&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_transmittance</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_screen_texture_mipmaps&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_screen_texture_mipmaps&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_screen_texture_mipmaps</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_depth_texture&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_depth_texture&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_depth_texture</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_normal_texture&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_normal_texture&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_normal_texture</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_vertex_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_vertex_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_vertex_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_fragment_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_fragment_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_fragment_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::writes_modelview_or_projection&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::writes_modelview_or_projection&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::writes_modelview_or_projection</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_world_coordinates&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_world_coordinates&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_world_coordinates</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_tangent&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_tangent&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_tangent</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_color&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_color&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_color</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_uv&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_uv&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_uv</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_uv2&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_uv2&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_uv2</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom0&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom0&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_custom0</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom1&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom1&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_custom1</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom2&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom2&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_custom2</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom3&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom3&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_custom3</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_bones&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_bones&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_bones</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_weights&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_weights&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3038" column="18"/>
            <symbol>SceneShaderData::uses_weights</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="214" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="225" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="237" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="250" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="264" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="305" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="337" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="435" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="440" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="448" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="456" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="463" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="476" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="492" column="17"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;gv&apos; can be declared with const" verbose="Variable &apos;gv&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="1794" column="34" info="Variable &apos;gv&apos; can be declared with const"/>
            <symbol>gv</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;datatype_from_value&apos; can be declared with const" verbose="Variable &apos;datatype_from_value&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2020" column="27" info="Variable &apos;datatype_from_value&apos; can be declared with const"/>
            <symbol>datatype_from_value</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: gv.buffer_elements" verbose="Uninitialized struct member: gv.buffer_elements" cwe="457" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="1787" column="45"/>
            <symbol>gv.buffer_elements</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: gv.buffer_elements" verbose="Uninitialized variable: gv.buffer_elements" cwe="457" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="1787" column="45"/>
            <location file="drivers/gles3/storage/material_storage.cpp" line="1759" column="13" info="Assuming condition is true"/>
            <symbol>gv</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="1337" column="24"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmtsize&apos; can be declared with const" verbose="Variable &apos;fmtsize&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="796" column="14" info="Variable &apos;fmtsize&apos; can be declared with const"/>
            <symbol>fmtsize</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;gl_type&apos; can be declared with const" verbose="Variable &apos;gl_type&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="797" column="12" info="Variable &apos;gl_type&apos; can be declared with const"/>
            <symbol>gl_type</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmtsize&apos; can be declared with const" verbose="Variable &apos;fmtsize&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="156" column="16" info="Variable &apos;fmtsize&apos; can be declared with const"/>
            <symbol>fmtsize</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmt_shift&apos; can be declared with const" verbose="Variable &apos;fmt_shift&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="794" column="14" info="Variable &apos;fmt_shift&apos; can be declared with const"/>
            <symbol>fmt_shift</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;norm&apos; can be declared with const" verbose="Variable &apos;norm&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="798" column="15" info="Variable &apos;norm&apos; can be declared with const"/>
            <symbol>norm</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmt_shift&apos; can be declared with const" verbose="Variable &apos;fmt_shift&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="154" column="16" info="Variable &apos;fmt_shift&apos; can be declared with const"/>
            <symbol>fmt_shift</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/mesh_storage.h" line="47" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/particles_storage.h" line="47" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/render_scene_buffers_gles3.h" line="42" column="0"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 71. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 71. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="71" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 72. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 72. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="502" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="72" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 77. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 77. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="77" column="61" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 78. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 78. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="503" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="78" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 84. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 84. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="84" column="55" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 85. Dynamic binding is not used." verbose="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 85. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="504" column="15" info="texture_3d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="85" column="4" info="Calling texture_3d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 91. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 91. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="91" column="60" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 92. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 92. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="503" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="92" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 100. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 100. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="100" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 101. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 101. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="502" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="101" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 109. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 109. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="109" column="55" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 110. Dynamic binding is not used." verbose="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 110. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="504" column="15" info="texture_3d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="110" column="4" info="Calling texture_3d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 115. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 115. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="115" column="60" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 116. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 116. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="503" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="116" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 124. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 124. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="124" column="58" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 125. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 125. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="502" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="125" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 133. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 133. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="133" column="53" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 134. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 134. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="502" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="134" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 142. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 142. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="142" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 143. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 143. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="502" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="143" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 155. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 155. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="155" column="54" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 177. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 177. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="499" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="177" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_free&apos; is called from destructor &apos;~TextureStorage()&apos; at line 227. Dynamic binding is not used." verbose="Virtual function &apos;texture_free&apos; is called from destructor &apos;~TextureStorage()&apos; at line 227. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="500" column="15" info="texture_free is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="227" column="3" info="Calling texture_free"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: t.type" verbose="Uninitialized struct member: t.type" cwe="457" file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.cpp" line="1398" column="39"/>
            <symbol>t.type</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/utilities.h" line="42" column="0"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessUnix()&apos; at line 504. Dynamic binding is not used." verbose="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessUnix()&apos; at line 504. Dynamic binding is not used." file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.h" line="67" column="16" info="change_dir is a virtual function"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="504" column="2" info="Calling change_dir"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessUnix()&apos; at line 508. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessUnix()&apos; at line 508. Dynamic binding is not used." file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.h" line="60" column="15" info="list_dir_end is a virtual function"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="508" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_dir&apos; shadows outer argument" verbose="Local variable &apos;p_dir&apos; shadows outer argument" cwe="398" file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.cpp" line="337" column="2" info="Shadow variable"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="334" column="40" info="Shadowed declaration"/>
            <symbol>p_dir</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketPosix()&apos; at line 179. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketPosix()&apos; at line 179. Dynamic binding is not used." file0="drivers/unix/net_socket_posix.cpp">
            <location file="drivers/unix/net_socket_posix.h" line="79" column="15" info="close is a virtual function"/>
            <location file="drivers/unix/net_socket_posix.cpp" line="179" column="2" info="Calling close"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IPV6_ADD_MEMBERSHIP;IPV6_JOIN_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_ADD_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IPV6_ADD_MEMBERSHIP;IPV6_JOIN_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_ADD_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="289" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IPV6_DROP_MEMBERSHIP;IPV6_LEAVE_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_DROP_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IPV6_DROP_MEMBERSHIP;IPV6_LEAVE_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_DROP_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="289" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;MSG_NOSIGNAL&apos; since the value of &apos;MSG_NOSIGNAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;MSG_NOSIGNAL&apos; since the value of &apos;MSG_NOSIGNAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="599" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIO_UDP_NETRESET;__MINGW32__;WINDOWS_ENABLED&apos; since the value of &apos;SIO_UDP_NETRESET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIO_UDP_NETRESET;__MINGW32__;WINDOWS_ENABLED&apos; since the value of &apos;SIO_UDP_NETRESET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="366" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SO_NOSIGPIPE&apos; since the value of &apos;SO_NOSIGPIPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SO_NOSIGPIPE&apos; since the value of &apos;SO_NOSIGPIPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="375" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &apos;err == 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="drivers/unix/thread_posix.cpp">
            <location file="drivers/unix/thread_posix.cpp" line="67" column="13"/>
            <location file="drivers/unix/thread_posix.cpp" line="58" column="12" info="&apos;err&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7598" column="57"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7672" column="44"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7844" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8140" column="44"/>
            <symbol>alloca</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8817" column="7" info="Second condition"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8805" column="7" info="First condition"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: draw_list" verbose="Possible null pointer dereference: draw_list" cwe="476" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7587" column="4" info="Null pointer dereference"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7583" column="17" info="Assignment &apos;draw_list=nullptr&apos;, assigned value is 0"/>
            <symbol>draw_list</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: draw_list" verbose="Possible null pointer dereference: draw_list" cwe="476" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7588" column="4" info="Null pointer dereference"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7583" column="17" info="Assignment &apos;draw_list=nullptr&apos;, assigned value is 0"/>
            <symbol>draw_list</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;binary_data.specialization_constants_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;binary_data.specialization_constants_count&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="4718" column="45" info="binary_data.specialization_constants_count is overwritten"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="4642" column="46" info="binary_data.specialization_constants_count is assigned"/>
            <symbol>binary_data.specialization_constants_count</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;binary_data.set_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;binary_data.set_count&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="4719" column="24" info="binary_data.set_count is overwritten"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="4647" column="25" info="binary_data.set_count is assigned"/>
            <symbol>binary_data.set_count</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fb_format.view_count" verbose="Uninitialized variable: fb_format.view_count" cwe="457" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="4119" column="28"/>
            <symbol>fb_format</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2333" column="54"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2334" column="67"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2373" column="51"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2405" column="50"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2406" column="40"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::subgroup_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::subgroup_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2722" column="16"/>
            <symbol>VulkanContext::subgroup_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::multiview_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::multiview_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2722" column="16"/>
            <symbol>VulkanContext::multiview_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::vrs_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::vrs_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2722" column="16"/>
            <symbol>VulkanContext::vrs_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::shader_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::shader_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2722" column="16"/>
            <symbol>VulkanContext::shader_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::storage_buffer_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::storage_buffer_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2722" column="16"/>
            <symbol>VulkanContext::storage_buffer_capabilities</symbol>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &apos;presentModes&apos; is freed twice." verbose="Memory pointed to by &apos;presentModes&apos; is freed twice." cwe="415" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="1819" column="3"/>
            <location file="drivers/vulkan/vulkan_context.cpp" line="1812" column="3"/>
            <symbol>presentModes</symbol>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &apos;cmdbufptr&apos; used instead of size of its data." verbose="Size of pointer &apos;cmdbufptr&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*cmdbufptr)&apos;." cwe="467" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2373" column="20"/>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &apos;pSwapchains&apos; used instead of size of its data." verbose="Size of pointer &apos;pSwapchains&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*pSwapchains)&apos;." cwe="467" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2405" column="18"/>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &apos;pImageIndices&apos; used instead of size of its data." verbose="Size of pointer &apos;pImageIndices&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*pImageIndices)&apos;." cwe="467" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2406" column="12"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;want_debug_utils&apos; is always true" verbose="Condition &apos;want_debug_utils&apos; is always true" cwe="571" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="433" column="6" info="Condition &apos;want_debug_utils&apos; is always true"/>
            <location file="drivers/vulkan/vulkan_context.cpp" line="429" column="26" info="Assignment &apos;want_debug_utils=true&apos;, assigned value is 1"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessWindows()&apos; at line 363. Dynamic binding is not used." verbose="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessWindows()&apos; at line 363. Dynamic binding is not used." file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.h" line="69" column="16" info="change_dir is a virtual function"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="363" column="2" info="Calling change_dir"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessWindows()&apos; at line 382. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessWindows()&apos; at line 382. Dynamic binding is not used." file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.h" line="64" column="15" info="list_dir_end is a virtual function"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="382" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_dir&apos; shadows outer argument" verbose="Local variable &apos;p_dir&apos; shadows outer argument" cwe="398" file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.cpp" line="134" column="2" info="Shadow variable"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="131" column="43" info="Shadowed declaration"/>
            <symbol>p_dir</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_dir&apos; shadows outer argument" verbose="Local variable &apos;p_dir&apos; shadows outer argument" cwe="398" file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.cpp" line="166" column="2" info="Shadow variable"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="163" column="41" info="Shadowed declaration"/>
            <symbol>p_dir</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverWinMidi()&apos; at line 99. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverWinMidi()&apos; at line 99. Dynamic binding is not used." file0="drivers/winmidi/midi_driver_winmidi.cpp">
            <location file="drivers/winmidi/midi_driver_winmidi.h" line="52" column="15" info="close is a virtual function"/>
            <location file="drivers/winmidi/midi_driver_winmidi.cpp" line="99" column="2" info="Calling close"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;preview_len&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;preview_len&apos;. The initialized value is overwritten before it is read." cwe="563" file0="editor/animation_track_editor_plugins.cpp">
            <location file="editor/animation_track_editor_plugins.cpp" line="921" column="14" info="preview_len is overwritten"/>
            <location file="editor/animation_track_editor_plugins.cpp" line="878" column="20" info="preview_len is initialized"/>
            <symbol>preview_len</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preview&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preview&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="80" column="4"/>
            <symbol>preview</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base_stream&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base_stream&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="81" column="4"/>
            <symbol>base_stream</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;playback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;playback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="82" column="4"/>
            <symbol>playback</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_code_complete_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 2070. Dynamic binding is not used." verbose="Virtual function &apos;_code_complete_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 2070. Dynamic binding is not used." file0="editor/code_editor.cpp">
            <location file="editor/code_editor.h" line="209" column="15" info="_code_complete_script is a virtual function"/>
            <location file="editor/code_editor.cpp" line="930" column="2" info="Calling _code_complete_script"/>
            <location file="editor/code_editor.cpp" line="2070" column="87" info="Calling _complete_request"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_validate_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 2081. Dynamic binding is not used." verbose="Virtual function &apos;_validate_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 2081. Dynamic binding is not used." file0="editor/code_editor.cpp">
            <location file="editor/code_editor.h" line="208" column="15" info="_validate_script is a virtual function"/>
            <location file="editor/code_editor.cpp" line="1744" column="2" info="Calling _validate_script"/>
            <location file="editor/code_editor.cpp" line="2081" column="62" info="Calling _text_changed_idle_timeout"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/create_dialog.cpp">
            <location file="editor/create_dialog.cpp" line="755" column="2"/>
            <symbol>base_type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preferred_search_result_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preferred_search_result_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/create_dialog.cpp">
            <location file="editor/create_dialog.cpp" line="756" column="2"/>
            <symbol>preferred_search_result_type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;source&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;source&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_debugger_node.cpp">
            <location file="editor/debugger/editor_debugger_node.h" line="93" column="4"/>
            <symbol>source</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="41" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="44" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="45" column="2"/>
            <symbol>base</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AudioBusesEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AudioBusesEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_audio_buses.cpp">
            <location file="editor/editor_audio_buses.h" line="286" column="2"/>
            <symbol>AudioBusesEditorPlugin</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="editor/editor_command_palette.cpp">
            <location file="editor/editor_command_palette.cpp" line="221" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;display_t&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;display_t&apos;. The initialized value is overwritten before it is read." cwe="563" file0="editor/editor_help.cpp">
            <location file="editor/editor_help.cpp" line="314" column="13" info="display_t is overwritten"/>
            <location file="editor/editor_help.cpp" line="311" column="19" info="display_t is initialized"/>
            <symbol>display_t</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;LogFilter&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;LogFilter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_log.cpp">
            <location file="editor/editor_log.h" line="124" column="3"/>
            <symbol>LogFilter</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;save_each&apos; is always true" verbose="Condition &apos;save_each&apos; is always true" cwe="571" file0="editor/editor_node.cpp">
            <location file="editor/editor_node.cpp" line="2798" column="9" info="Condition &apos;save_each&apos; is always true"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: instantiated_node" verbose="Possible null pointer dereference: instantiated_node" cwe="476" file0="editor/editor_node.cpp">
            <location file="editor/editor_node.cpp" line="6251" column="5" info="Null pointer dereference"/>
            <location file="editor/editor_node.cpp" line="6241" column="38" info="Assuming condition is false"/>
            <location file="editor/editor_node.cpp" line="6240" column="31" info="Assignment &apos;instantiated_node=nullptr&apos;, assigned value is 0"/>
            <symbol>instantiated_node</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="editor/editor_node.cpp">
            <location file="editor/editor_node.cpp" line="3193" column="41"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 455. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 455. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="181" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="410" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="455" column="77" info="Calling _locale_selected"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 456. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 456. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="181" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="410" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="444" column="2" info="Calling _locale_selected"/>
            <location file="editor/editor_properties.cpp" line="456" column="75" info="Calling _locale_focus_exited"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 592. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 592. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="161" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="476" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="592" column="73" info="Calling _path_selected"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 593. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 593. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="161" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="476" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="540" column="2" info="Calling _path_selected"/>
            <location file="editor/editor_properties.cpp" line="593" column="71" info="Calling _path_focus_exited"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyClassName()&apos; at line 645. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyClassName()&apos; at line 645. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="202" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="630" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="645" column="72" info="Calling _dialog_created"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyQuaternion()&apos; at line 2210. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyQuaternion()&apos; at line 2210. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="538" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="2025" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="2210" column="79" info="Calling _edit_custom_value"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyNodePath()&apos; at line 2965. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyNodePath()&apos; at line 2965. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="677" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="2809" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="2965" column="71" info="Calling _node_clear"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1239. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1239. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="177" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1218" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1239" column="72" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1249. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1249. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="177" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="794" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1249" column="82" info="Calling _change_type_menu"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1453. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1453. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="212" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1432" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1453" column="79" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1464. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1464. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="212" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1279" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1464" column="96" info="Calling _add_locale"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vector_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vector_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/editor_properties_vector.cpp">
            <location file="editor/editor_properties_vector.cpp" line="169" column="2"/>
            <symbol>vector_type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;running_scene&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;running_scene&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/editor_run.cpp">
            <location file="editor/editor_run.cpp" line="363" column="2"/>
            <symbol>running_scene</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_char&apos; can be reduced." verbose="The scope of the variable &apos;arg_char&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/editor_run.cpp">
            <location file="editor/editor_run.cpp" line="48" column="11"/>
            <symbol>arg_char</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." cwe="563" file0="editor/editor_themes.cpp">
            <location file="editor/editor_themes.cpp" line="256" column="6" info="img is overwritten"/>
            <location file="editor/editor_themes.cpp" line="240" column="17" info="img is initialized"/>
            <symbol>img</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/export/export_template_manager.cpp">
            <location file="editor/export/export_template_manager.cpp" line="522" column="7" info="ret is overwritten"/>
            <location file="editor/export/export_template_manager.cpp" line="511" column="8" info="ret is assigned"/>
            <symbol>ret</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorObjectSelector&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorObjectSelector&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/gui/editor_object_selector.cpp">
            <location file="editor/gui/editor_object_selector.h" line="70" column="2"/>
            <symbol>EditorObjectSelector</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;in_dev&apos; is always false" verbose="Condition &apos;in_dev&apos; is always false" cwe="570" file0="editor/gui/editor_toaster.cpp">
            <location file="editor/gui/editor_toaster.cpp" line="166" column="51" info="Condition &apos;in_dev&apos; is always false"/>
            <location file="editor/gui/editor_toaster.cpp" line="161" column="16" info="Assignment &apos;in_dev=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;in_dev&apos; is always true" verbose="Condition &apos;in_dev&apos; is always true" cwe="571" file0="editor/gui/editor_toaster.cpp">
            <location file="editor/gui/editor_toaster.cpp" line="166" column="51" info="Condition &apos;in_dev&apos; is always true"/>
            <location file="editor/gui/editor_toaster.cpp" line="159" column="16" info="Assignment &apos;in_dev=true&apos;, assigned value is 1"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;InspectorDock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;InspectorDock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/inspector_dock.cpp">
            <location file="editor/inspector_dock.h" line="162" column="2"/>
            <symbol>InspectorDock</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;localization_changed&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;localization_changed&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/localization_editor.cpp">
            <location file="editor/localization_editor.cpp" line="604" column="2"/>
            <symbol>localization_changed</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="editor/node_dock.cpp">
            <location file="editor/connections_dialog.h" line="93" column="49"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ConnectionData&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ConnectionData&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/node_dock.cpp">
            <location file="editor/connections_dialog.h" line="64" column="3"/>
            <symbol>ConnectionData</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="editor/node_dock.cpp">
            <location file="editor/node_dock.cpp" line="77" column="6" info="Second condition"/>
            <location file="editor/node_dock.cpp" line="73" column="6" info="First condition"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;edited_point&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;edited_point&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/abstract_polygon_2d_editor.cpp" line="720" column="2"/>
            <symbol>edited_point</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/abstract_polygon_2d_editor.h" line="51" column="3"/>
            <symbol>Vertex</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CanvasItemEditorViewport&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CanvasItemEditorViewport&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.h" line="635" column="2"/>
            <symbol>CanvasItemEditorViewport</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/animation_player_editor_plugin.cpp">
            <location file="editor/plugins/animation_player_editor_plugin.h" line="245" column="2"/>
            <symbol>AnimationPlayerEditor</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;profile_bone_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;profile_bone_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="99" column="2"/>
            <symbol>profile_bone_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="161" column="2"/>
            <symbol>bone_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;profile_bone_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;profile_bone_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="162" column="2"/>
            <symbol>profile_bone_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1298" column="2"/>
            <symbol>bone_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1348" column="2"/>
            <symbol>bone_map</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoneMapperItem&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoneMapperItem&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.h" line="108" column="2"/>
            <symbol>BoneMapperItem</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BonePicker&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BonePicker&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.h" line="134" column="2"/>
            <symbol>BonePicker</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoneMapEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoneMapEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.h" line="218" column="2"/>
            <symbol>BoneMapEditor</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapperItem&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapperItem&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="160" column="46" info="Parameter &apos;p_bone_map&apos; can be declared with const"/>
            <location file="editor/plugins/bone_map_editor_plugin.h" line="86" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_bone_map</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapper&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapper&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1296" column="62" info="Parameter &apos;p_bone_map&apos; can be declared with const"/>
            <location file="editor/plugins/bone_map_editor_plugin.h" line="139" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_bone_map</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapEditor&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapEditor&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1347" column="44" info="Parameter &apos;p_bone_map&apos; can be declared with const"/>
            <location file="editor/plugins/bone_map_editor_plugin.h" line="205" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_bone_map</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="897" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="871" column="11" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="916" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="897" column="11" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1223" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1171" column="11" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1223" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1193" column="12" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1223" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1208" column="12" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;x_rot&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;x_rot&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="363" column="4"/>
            <symbol>x_rot</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;y_rot&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;y_rot&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="364" column="4"/>
            <symbol>y_rot</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;distance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;distance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="365" column="4"/>
            <symbol>distance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;fov_scale&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;fov_scale&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="366" column="4"/>
            <symbol>fov_scale</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;default_texture_node_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;default_texture_node_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/canvas_item_editor_plugin.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="5903" column="2"/>
            <symbol>default_texture_node_type</symbol>
        </error>
        <error id="redundantAssignInSwitch" severity="style" msg="Variable &apos;nodes_to_move&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;nodes_to_move&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" cwe="563" file0="editor/plugins/canvas_item_editor_plugin.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="947" column="18" info="$symbol is overwritten"/>
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="943" column="18" info="$symbol is assigned"/>
            <symbol>nodes_to_move</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;grab_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;grab_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/collision_shape_2d_editor_plugin.cpp">
            <location file="editor/plugins/collision_shape_2d_editor_plugin.cpp" line="49" column="2"/>
            <symbol>grab_threshold</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SizeFlagPresetPicker&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SizeFlagPresetPicker&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/control_editor_plugin.cpp">
            <location file="editor/plugins/control_editor_plugin.h" line="204" column="2"/>
            <symbol>SizeFlagPresetPicker</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CurveEdit::initial_grab_index&apos; is not initialized in the constructor." verbose="Member variable &apos;CurveEdit::initial_grab_index&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/curve_editor_plugin.cpp">
            <location file="editor/plugins/curve_editor_plugin.cpp" line="49" column="12"/>
            <symbol>CurveEdit::initial_grab_index</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CurveEdit::initial_grab_left_tangent&apos; is not initialized in the constructor." verbose="Member variable &apos;CurveEdit::initial_grab_left_tangent&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/curve_editor_plugin.cpp">
            <location file="editor/plugins/curve_editor_plugin.cpp" line="49" column="12"/>
            <symbol>CurveEdit::initial_grab_left_tangent</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CurveEdit::initial_grab_right_tangent&apos; is not initialized in the constructor." verbose="Member variable &apos;CurveEdit::initial_grab_right_tangent&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/curve_editor_plugin.cpp">
            <location file="editor/plugins/curve_editor_plugin.cpp" line="49" column="12"/>
            <symbol>CurveEdit::initial_grab_right_tangent</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;DebuggerEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;DebuggerEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/debugger_editor_plugin.cpp">
            <location file="editor/plugins/debugger_editor_plugin.h" line="69" column="2"/>
            <symbol>DebuggerEditorPlugin</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorDebuggerSession&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorDebuggerSession&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/editor_debugger_plugin.cpp">
            <location file="editor/plugins/editor_debugger_plugin.h" line="65" column="2"/>
            <symbol>EditorDebuggerSession</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="329" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="733" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;viewport&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;viewport&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="859" column="2"/>
            <symbol>viewport</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 361. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 361. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="119" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="341" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="361" column="78" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 374. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 374. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="119" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="210" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="374" column="81" info="Calling _add_script"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 377. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 377. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="119" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="222" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="377" column="95" info="Calling _add_lang"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTVariation()&apos; at line 540. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTVariation()&apos; at line 540. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="151" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="522" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="540" column="73" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 843. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 843. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="203" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="825" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="843" column="72" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 850. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 850. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="203" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="602" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="850" column="75" info="Calling _add_feature"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 856. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 856. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="203" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="602" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="856" column="83" info="Calling _add_feature"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorPropertyFontMetaOverride&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorPropertyFontMetaOverride&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="121" column="2"/>
            <symbol>EditorPropertyFontMetaOverride</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;arrow&apos; can be declared with const" verbose="Variable &apos;arrow&apos; can be declared with const" cwe="398" file0="editor/plugins/gizmos/light_3d_gizmo_plugin.cpp">
            <location file="editor/plugins/gizmos/light_3d_gizmo_plugin.cpp" line="167" column="11" info="Variable &apos;arrow&apos; can be declared with const"/>
            <symbol>arrow</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos3d_mesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos3d_mesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/gizmos/marker_3d_gizmo_plugin.cpp">
            <location file="editor/plugins/gizmos/marker_3d_gizmo_plugin.cpp" line="38" column="2"/>
            <symbol>pos3d_mesh</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_2d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_2d_editor_plugin.cpp" line="296" column="16"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_2d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_2d_editor_plugin.cpp" line="332" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_3d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_3d_editor_plugin.cpp" line="360" column="15"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_3d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_3d_editor_plugin.cpp" line="386" column="16"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;viewport_environment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;viewport_environment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="8080" column="2"/>
            <symbol>viewport_environment</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;snapped_to_floor&apos; can be reduced." verbose="The scope of the variable &apos;snapped_to_floor&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="7343" column="7"/>
            <symbol>snapped_to_floor</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;packed_scene&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;packed_scene&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/packed_scene_editor_plugin.cpp">
            <location file="editor/plugins/packed_scene_editor_plugin.cpp" line="53" column="2"/>
            <symbol>packed_scene</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PackedSceneEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PackedSceneEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/packed_scene_editor_plugin.cpp">
            <location file="editor/plugins/packed_scene_editor_plugin.h" line="50" column="2"/>
            <symbol>PackedSceneEditor</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_packed_scene&apos; can be declared with const. However it seems that &apos;PackedSceneEditor&apos; is a callback function, if &apos;p_packed_scene&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_packed_scene&apos; can be declared with const. However it seems that &apos;PackedSceneEditor&apos; is a callback function, if &apos;p_packed_scene&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/packed_scene_editor_plugin.cpp">
            <location file="editor/plugins/packed_scene_editor_plugin.cpp" line="52" column="56" info="Parameter &apos;p_packed_scene&apos; can be declared with const"/>
            <location file="editor/plugins/packed_scene_editor_plugin.h" line="39" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_packed_scene</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;snap_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;snap_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1239" column="2"/>
            <symbol>snap_offset</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1481. Dynamic binding is not used." verbose="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1481. Dynamic binding is not used." file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.h" line="165" column="18" info="_get_node is a virtual function"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="968" column="33" info="Calling _get_node"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1481" column="68" info="Calling _uv_draw"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1482. Dynamic binding is not used." verbose="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1482. Dynamic binding is not used." file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.h" line="165" column="18" info="_get_node is a virtual function"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="462" column="7" info="Calling _get_node"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1482" column="73" info="Calling _uv_input"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 212. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 212. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="59" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="168" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="212" column="73" info="Calling _node_clear"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 218. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 218. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="59" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="48" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="218" column="83" info="Calling _confirmed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 224. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 224. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="59" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="48" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="224" column="82" info="Calling _confirmed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;make_visible&apos; is called from constructor &apos;Skeleton2DEditorPlugin()&apos; at line 135. Dynamic binding is not used." verbose="Virtual function &apos;make_visible&apos; is called from constructor &apos;Skeleton2DEditorPlugin()&apos; at line 135. Dynamic binding is not used." file0="editor/plugins/skeleton_2d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_2d_editor_plugin.h" line="77" column="15" info="make_visible is a virtual function"/>
            <location file="editor/plugins/skeleton_2d_editor_plugin.cpp" line="135" column="2" info="Calling make_visible"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;handle_material&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;handle_material&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.cpp" line="909" column="2"/>
            <symbol>handle_material</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unselected_mat&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unselected_mat&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.cpp" line="1195" column="2"/>
            <symbol>unselected_mat</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoneTransformEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoneTransformEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.h" line="86" column="2"/>
            <symbol>BoneTransformEditor</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;make_visible&apos; is called from constructor &apos;Sprite2DEditorPlugin()&apos; at line 609. Dynamic binding is not used." verbose="Virtual function &apos;make_visible&apos; is called from constructor &apos;Sprite2DEditorPlugin()&apos; at line 609. Dynamic binding is not used." file0="editor/plugins/sprite_2d_editor_plugin.cpp">
            <location file="editor/plugins/sprite_2d_editor_plugin.h" line="112" column="15" info="make_visible is a virtual function"/>
            <location file="editor/plugins/sprite_2d_editor_plugin.cpp" line="609" column="2" info="Calling make_visible"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ThemeItemEditorDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ThemeItemEditorDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/theme_editor_plugin.cpp">
            <location file="editor/plugins/theme_editor_plugin.h" line="284" column="2"/>
            <symbol>ThemeItemEditorDialog</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneTileProxyObject::source_id&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneTileProxyObject::source_id&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="90" column="3"/>
            <symbol>SceneTileProxyObject::source_id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneTileProxyObject::scene_id&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneTileProxyObject::scene_id&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="90" column="3"/>
            <symbol>SceneTileProxyObject::scene_id</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;dummy_object&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." verbose="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;dummy_object&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.h" line="313" column="15" info="Derived variable &apos;TileDataCollisionEditor::dummy_object&apos;"/>
            <location file="editor/plugins/tiles/tile_data_editors.h" line="227" column="15" info="Parent variable &apos;TileDataDefaultEditor::dummy_object&apos;"/>
            <symbol>TileDataCollisionEditor</symbol>
            <symbol>dummy_object</symbol>
            <symbol>TileDataDefaultEditor</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AtlasTileProxyObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AtlasTileProxyObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_atlas_source_editor.h" line="110" column="3"/>
            <symbol>AtlasTileProxyObject</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneTileProxyObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneTileProxyObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="90" column="3"/>
            <symbol>SceneTileProxyObject</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;color&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;color&apos;. The initialized value is overwritten before it is read." cwe="563" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.cpp" line="2887" column="9" info="color is overwritten"/>
            <location file="editor/plugins/tiles/tile_data_editors.cpp" line="2885" column="15" info="color is initialized"/>
            <symbol>color</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_editor.cpp" line="3597" column="61"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_editor.cpp" line="3614" column="61"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_editor.cpp" line="3621" column="61"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="editor/plugins/tiles/tile_set_atlas_source_editor.cpp">
            <location file="editor/plugins/tiles/tile_set_atlas_source_editor.cpp" line="774" column="46"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="317" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="318" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;category&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;category&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="319" column="4"/>
            <symbol>category</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;description&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;description&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="320" column="4"/>
            <symbol>description</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ops&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ops&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="321" column="4"/>
            <symbol>ops</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;op&apos; is assigned a value that is never used." verbose="Variable &apos;op&apos; is assigned a value that is never used." cwe="563" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.cpp" line="4856" column="16"/>
            <symbol>op</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;POTGenerator::_print_all_translation_strings&apos;" verbose="Unused private function: &apos;POTGenerator::_print_all_translation_strings&apos;" cwe="398" file0="editor/pot_generator.cpp">
            <location file="editor/pot_generator.h" line="56" column="7"/>
            <symbol>POTGenerator::_print_all_translation_strings</symbol>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="125" column="19"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;no_updates&apos; is always true" verbose="Condition &apos;no_updates&apos; is always true" cwe="571" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="119" column="6" info="Condition &apos;no_updates&apos; is always true"/>
            <location file="editor/progress_dialog.cpp" line="113" column="20" info="Assignment &apos;no_updates=true&apos;, assigned value is 1"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;no_updates&apos; shadows outer variable" verbose="Local variable &apos;no_updates&apos; shadows outer variable" cwe="398" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="116" column="3" info="Shadow variable"/>
            <location file="editor/progress_dialog.cpp" line="113" column="7" info="Shadowed declaration"/>
            <symbol>no_updates</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectSettingsEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectSettingsEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/project_settings_editor.cpp">
            <location file="editor/project_settings_editor.h" line="130" column="2"/>
            <symbol>ProjectSettingsEditor</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1015. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1015. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="814" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="322" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="473" column="2" info="Calling _parent_name_changed"/>
            <location file="editor/script_create_dialog.cpp" line="1015" column="81" info="Calling _language_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1024. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1024. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="814" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="322" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1024" column="78" info="Calling _parent_name_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1039. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1039. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="814" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="317" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1039" column="77" info="Calling _class_name_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1051. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1051. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="814" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="491" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1051" column="75" info="Calling _use_template_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1067. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1067. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="814" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="485" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1067" column="70" info="Calling _built_in_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1076. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1076. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="814" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="574" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1076" column="76" info="Calling _path_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1092. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1092. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="1092" column="82" info="Calling _path_submitted"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1104. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1104. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="113" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="578" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="814" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="322" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="540" column="2" info="Calling _parent_name_changed"/>
            <location file="editor/script_create_dialog.cpp" line="1104" column="73" info="Calling _create"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_language_info&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 555. Dynamic binding is not used." verbose="Virtual function &apos;_update_language_info&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 555. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="81" column="15" info="_update_language_info is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="555" column="2" info="Calling _update_language_info"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 633. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 633. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="93" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="373" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="537" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="369" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="282" column="2" info="Calling _path_changed"/>
            <location file="editor/shader_create_dialog.cpp" line="633" column="77" info="Calling _type_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 656. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 656. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="93" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="373" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="537" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="313" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="656" column="70" info="Calling _built_in_toggled"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 666. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 666. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="93" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="373" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="537" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="369" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="666" column="76" info="Calling _path_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 678. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 678. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="93" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="373" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="537" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="369" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="337" column="2" info="Calling _path_changed"/>
            <location file="editor/shader_create_dialog.cpp" line="678" column="79" info="Calling _file_selected"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="1517" column="17" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="1578" column="6" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="1600" column="16" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="1881" column="17" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2566" column="6" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2986" column="25" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2993" column="7" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="3084" column="18" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="3155" column="32" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="3205" column="7" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="3462" column="18" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;boot_bg_color&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;boot_bg_color&apos;. The initialized value is overwritten before it is read." cwe="563" file0="main/main.cpp">
            <location file="main/main.cpp" line="2365" column="17" info="boot_bg_color is overwritten"/>
            <location file="main/main.cpp" line="2362" column="23" info="boot_bg_color is initialized"/>
            <symbol>boot_bg_color</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="1672" column="68" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: ret.interpolation_fraction" verbose="Uninitialized struct member: ret.interpolation_fraction" cwe="457" file0="main/main_timer_sync.cpp">
            <location file="main/main_timer_sync.cpp" line="410" column="9"/>
            <symbol>ret.interpolation_fraction</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ret.interpolation_fraction" verbose="Uninitialized variable: ret.interpolation_fraction" cwe="457" file0="main/main_timer_sync.cpp">
            <location file="main/main_timer_sync.cpp" line="410" column="9"/>
            <location file="main/main_timer_sync.cpp" line="349" column="55" info="Assuming condition is false"/>
            <symbol>ret</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="main/performance.cpp">
            <location file="main/performance.cpp" line="325" column="2"/>
            <symbol>_callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_arguments&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_arguments&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="main/performance.cpp">
            <location file="main/performance.cpp" line="326" column="2"/>
            <symbol>_arguments</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/csg/csg.cpp">
            <location file="modules/csg/csg.cpp" line="554" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ENetPacketPeer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ENetPacketPeer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_packet_peer.h" line="124" column="2"/>
            <symbol>ENetPacketPeer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Compressor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Compressor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.h" line="98" column="3"/>
            <symbol>Compressor</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.h" line="103" column="14"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="128" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="135" column="50"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="147" column="50"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="148" column="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bind_ip&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bind_ip&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="488" column="2"/>
            <symbol>bind_ip</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~ENetMultiplayerPeer()&apos; at line 493. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~ENetMultiplayerPeer()&apos; at line 493. Dynamic binding is not used." file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.h" line="104" column="15" info="close is a virtual function"/>
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="493" column="3" info="Calling close"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_event&apos; can be declared with const" verbose="Parameter &apos;p_event&apos; can be declared with const" cwe="398" file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="134" column="82" info="Parameter &apos;p_event&apos; can be declared with const"/>
            <symbol>p_event</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;enum_value&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;enum_value&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="701" column="5"/>
            <symbol>enum_value</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1064" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1077" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1090" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1103" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDScriptNativeClass&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDScriptNativeClass&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript.h" line="58" column="2"/>
            <symbol>GDScriptNativeClass</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Token&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Token&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.h" line="179" column="3"/>
            <symbol>Token</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="675" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="679" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="683" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="687" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="691" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="695" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="699" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="703" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;comment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;comment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.h" line="193" column="4"/>
            <symbol>comment</symbol>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;non_op&apos; is used before limits check." verbose="Defensive programming: The variable &apos;non_op&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398" file0="modules/gdscript/editor/gdscript_highlighter.cpp">
            <location file="modules/gdscript/editor/gdscript_highlighter.cpp" line="317" column="37"/>
            <symbol>non_op</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="60" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="65" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="65" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDScriptAnalyzer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDScriptAnalyzer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_analyzer.h" line="148" column="2"/>
            <symbol>GDScriptAnalyzer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Address&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Address&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="58" column="3"/>
            <symbol>Address</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;can_run&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;can_run&apos;. The initialized value is overwritten before it is read." cwe="563" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="784" column="10" info="can_run is overwritten"/>
            <location file="modules/gdscript/gdscript.cpp" line="746" column="15" info="can_run is initialized"/>
            <symbol>can_run</symbol>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;p_script.is_valid()&apos; and inner condition is &apos;gdscript.is_valid()&apos;)." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="1418" column="24" info="identical inner condition: gdscript.is_valid()"/>
            <location file="modules/gdscript/gdscript.cpp" line="1416" column="23" info="outer condition: p_script.is_valid()"/>
            <location file="modules/gdscript/gdscript.cpp" line="1417" column="28" info="&apos;gdscript&apos; is assigned value &apos;p_script&apos; here."/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;result.kind&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;result.kind&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="4581" column="17" info="result.kind is overwritten"/>
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="4538" column="15" info="result.kind is assigned"/>
            <symbol>result.kind</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_base&apos; can be declared with const" verbose="Parameter &apos;p_base&apos; can be declared with const" cwe="398" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="3353" column="124" info="Parameter &apos;p_base&apos; can be declared with const"/>
            <symbol>p_base</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_type&apos; should be passed by const reference." verbose="Parameter &apos;p_type&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="2373" column="59"/>
            <symbol>p_type</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;StackSlot&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;StackSlot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript_byte_codegen.cpp">
            <location file="modules/gdscript/gdscript_byte_codegen.h" line="44" column="3"/>
            <symbol>StackSlot</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!is_validated&apos; is always true" verbose="Condition &apos;!is_validated&apos; is always true" cwe="571" file0="modules/gdscript/gdscript_byte_codegen.cpp">
            <location file="modules/gdscript/gdscript_byte_codegen.cpp" line="1191" column="6" info="Condition &apos;!is_validated&apos; is always true"/>
            <location file="modules/gdscript/gdscript_byte_codegen.cpp" line="1187" column="22" info="Assignment &apos;is_validated=false&apos;, assigned value is 0"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_target&apos; should be passed by const reference." verbose="Parameter &apos;p_target&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="modules/gdscript/gdscript_byte_codegen.cpp">
            <location file="modules/gdscript/gdscript_byte_codegen.h" line="68" column="22"/>
            <symbol>p_target</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: nc" verbose="Possible null pointer dereference: nc" cwe="476" file0="modules/gdscript/gdscript_compiler.cpp">
            <location file="modules/gdscript/gdscript_compiler.cpp" line="65" column="31" info="Null pointer dereference"/>
            <location file="modules/gdscript/gdscript_compiler.cpp" line="56" column="9" info="Assuming condition is false"/>
            <location file="modules/gdscript/gdscript_compiler.cpp" line="55" column="28" info="Assignment &apos;nc=nullptr&apos;, assigned value is 0"/>
            <symbol>nc</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!type_hints&apos; is always true" verbose="Condition &apos;!type_hints&apos; is always true" cwe="571" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="76" column="6" info="Condition &apos;!type_hints&apos; is always true"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="72" column="20" info="Assignment &apos;type_hints=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;th&apos; is always false" verbose="Condition &apos;th&apos; is always false" cwe="570" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="479" column="8" info="Condition &apos;th&apos; is always false"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="469" column="12" info="Assignment &apos;th=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;th&apos; is always false" verbose="Condition &apos;th&apos; is always false" cwe="570" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="487" column="22" info="Condition &apos;th&apos; is always false"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="469" column="12" info="Assignment &apos;th=false&apos;, assigned value is 0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;RecursionCheck&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;RecursionCheck&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="1375" column="2"/>
            <symbol>RecursionCheck</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c2.current_line&apos; is assigned a value that is never used." verbose="Variable &apos;c2.current_line&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="1598" column="25"/>
            <symbol>c2.current_line</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_function.cpp">
            <location file="modules/gdscript/gdscript_function.cpp" line="142" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;script&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;script&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="91" column="2"/>
            <symbol>script</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;captures&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;captures&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="93" column="2"/>
            <symbol>captures</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;reference&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;reference&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="160" column="2"/>
            <symbol>reference</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;captures&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;captures&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="171" column="2"/>
            <symbol>captures</symbol>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="1362" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="1359" column="6" info="outer condition: !check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::BRACKET_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::BRACKET_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2716" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::BRACKET_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="2714" column="6" info="outer condition: !check(GDScriptTokenizer::Token::BRACKET_CLOSE)"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::BRACE_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::BRACE_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2742" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::BRACE_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="2740" column="6" info="outer condition: !check(GDScriptTokenizer::Token::BRACE_CLOSE)"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;decided_style&apos; can be reduced." verbose="The scope of the variable &apos;decided_style&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2739" column="7"/>
            <symbol>decided_style</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_node&apos; can be declared with const" verbose="Parameter &apos;p_node&apos; can be declared with const" cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="4335" column="45" info="Parameter &apos;p_node&apos; can be declared with const"/>
            <symbol>p_node</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;method&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;method&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_rpc_callable.cpp">
            <location file="modules/gdscript/gdscript_rpc_callable.cpp" line="72" column="2"/>
            <symbol>method</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;has_error&apos; is assigned a value that is never used." verbose="Variable &apos;has_error&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_tokenizer.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.cpp" line="821" column="13"/>
            <symbol>has_error</symbol>
        </error>
        <error id="zerodivcond" severity="warning" msg="Either the condition &apos;incr&lt;0&apos; is redundant or there is division by zero at line 197." verbose="Either the condition &apos;incr&lt;0&apos; is redundant or there is division by zero at line 197." cwe="369" file0="modules/gdscript/gdscript_utility_functions.cpp">
            <location file="modules/gdscript/gdscript_utility_functions.cpp" line="197" column="31" info="Division by zero"/>
            <location file="modules/gdscript/gdscript_utility_functions.cpp" line="187" column="28" info="Assuming that condition &apos;incr&lt;0&apos; is not redundant"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="531" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="576" column="34"/>
            <symbol>alloca</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;script&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;script&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="583" column="10" info="script is overwritten"/>
            <location file="modules/gdscript/gdscript_vm.cpp" line="506" column="10" info="script is assigned"/>
            <symbol>script</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="447" column="2"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;kind&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;kind&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="807" column="3"/>
            <symbol>kind</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;value&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;value&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="811" column="3"/>
            <symbol>value</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;kind&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;kind&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="812" column="3"/>
            <symbol>kind</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MarkupContent&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MarkupContent&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="810" column="2"/>
            <symbol>MarkupContent</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sent&apos; can be reduced." verbose="The scope of the variable &apos;sent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/language_server/gdscript_language_protocol.cpp">
            <location file="modules/gdscript/language_server/gdscript_language_protocol.cpp" line="107" column="6"/>
            <symbol>sent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;file_checker&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;file_checker&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_text_document.cpp">
            <location file="modules/gdscript/language_server/gdscript_text_document.cpp" line="431" column="2"/>
            <symbol>file_checker</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;forced&apos; can be reduced." verbose="The scope of the variable &apos;forced&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/language_server/gdscript_workspace.cpp">
            <location file="modules/gdscript/language_server/gdscript_workspace.cpp" line="591" column="7"/>
            <symbol>forced</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;bake_navigation&apos; is always true" verbose="Condition &apos;bake_navigation&apos; is always true" cwe="571" file0="modules/gridmap/grid_map.cpp">
            <location file="modules/gridmap/grid_map.cpp" line="788" column="7" info="Condition &apos;bake_navigation&apos; is always true"/>
            <location file="modules/gridmap/grid_map.cpp" line="767" column="57" info="Assuming container is not empty"/>
            <location file="modules/gridmap/grid_map.cpp" line="766" column="6" info="Assuming that condition &apos;bake_navigation&apos; is not redundant"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="99" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="100" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;na&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;na&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="101" column="4"/>
            <symbol>na</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;nb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;nb&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="102" column="4"/>
            <symbol>nb</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="132" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="133" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;indices&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;indices&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="134" column="4"/>
            <symbol>indices</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;stop&apos; is called from destructor &apos;~DTLSServerMbedTLS()&apos; at line 76. Dynamic binding is not used." verbose="Virtual function &apos;stop&apos; is called from destructor &apos;~DTLSServerMbedTLS()&apos; at line 76. Dynamic binding is not used." file0="modules/mbedtls/dtls_server_mbedtls.cpp">
            <location file="modules/mbedtls/dtls_server_mbedtls.h" line="49" column="15" info="stop is a virtual function"/>
            <location file="modules/mbedtls/dtls_server_mbedtls.cpp" line="76" column="2" info="Calling stop"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerMbedDTLS::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerMbedDTLS::packet_buffer&apos; is not initialized in the constructor." cwe="398" file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="245" column="21"/>
            <symbol>PacketPeerMbedDTLS::packet_buffer</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_peer&apos; is called from destructor &apos;~PacketPeerMbedDTLS()&apos; at line 250. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_peer&apos; is called from destructor &apos;~PacketPeerMbedDTLS()&apos; at line 250. Dynamic binding is not used." file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.h" line="72" column="15" info="disconnect_from_peer is a virtual function"/>
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="250" column="2" info="Calling disconnect_from_peer"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="modules/mbedtls/register_types.cpp">
            <location file="modules/mbedtls/tests/test_crypto_mbedtls.h" line="42" column="1"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_stream&apos; is called from destructor &apos;~StreamPeerMbedTLS()&apos; at line 273. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_stream&apos; is called from destructor &apos;~StreamPeerMbedTLS()&apos; at line 273. Dynamic binding is not used." file0="modules/mbedtls/stream_peer_mbedtls.cpp">
            <location file="modules/mbedtls/stream_peer_mbedtls.h" line="63" column="15" info="disconnect_from_stream is a virtual function"/>
            <location file="modules/mbedtls/stream_peer_mbedtls.cpp" line="273" column="2" info="Calling disconnect_from_stream"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 535. Dynamic binding is not used." verbose="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 535. Dynamic binding is not used." file0="modules/mobile_vr/mobile_vr_interface.cpp">
            <location file="modules/mobile_vr/mobile_vr_interface.h" line="141" column="15" info="is_initialized is a virtual function"/>
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="535" column="6" info="Calling is_initialized"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 536. Dynamic binding is not used." verbose="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 536. Dynamic binding is not used." file0="modules/mobile_vr/mobile_vr_interface.cpp">
            <location file="modules/mobile_vr/mobile_vr_interface.h" line="143" column="15" info="uninitialize is a virtual function"/>
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="536" column="3" info="Calling uninitialize"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_property_can_revert&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_property_can_revert&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.cpp" line="2894" column="2"/>
            <symbol>_property_can_revert</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CSharpInstance&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CSharpInstance&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.h" line="291" column="2"/>
            <symbol>CSharpInstance</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ScopeExit&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ScopeExit&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/utils/macros.h" line="56" column="2"/>
            <symbol>ScopeExit</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;extra_cond&apos; is always true" verbose="Condition &apos;extra_cond&apos; is always true" cwe="571" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.cpp" line="2387" column="6" info="Condition &apos;extra_cond&apos; is always true"/>
            <location file="modules/mono/csharp_script.cpp" line="2381" column="20" info="Assignment &apos;extra_cond=true&apos;, assigned value is 1"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" file0="modules/mono/mono_gd/support/android_support.cpp">
            <location file="modules/mono/mono_gd/support/android_support.cpp" line="148" column="37"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;args&apos; can be declared with const" verbose="Variable &apos;args&apos; can be declared with const" cwe="398" file0="modules/mono/utils/string_utils.cpp">
            <location file="modules/mono/utils/string_utils.cpp" line="95" column="9" info="Variable &apos;args&apos; can be declared with const"/>
            <symbol>args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/editor/editor_network_profiler.h" line="54" column="4"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/editor/editor_network_profiler.h" line="55" column="4"/>
            <symbol>path</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;SyncInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;SyncInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/multiplayer_debugger.h" line="70" column="3"/>
            <symbol>SyncInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;NodeInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;NodeInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/editor/editor_network_profiler.h" line="53" column="3"/>
            <symbol>NodeInfo</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/editor/multiplayer_editor_plugin.cpp">
            <location file="modules/multiplayer/scene_replication_config.h" line="56" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ReplicationProperty&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ReplicationProperty&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/editor/multiplayer_editor_plugin.cpp">
            <location file="modules/multiplayer/scene_replication_config.h" line="55" column="3"/>
            <symbol>ReplicationProperty</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/multiplayer/multiplayer_debugger.cpp">
            <location file="modules/multiplayer/multiplayer_debugger.cpp" line="74" column="20"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/multiplayer_spawner.cpp">
            <location file="modules/multiplayer/multiplayer_spawner.h" line="65" column="4"/>
            <symbol>args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_replication_interface.h" line="55" column="39"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_replication_interface.h" line="57" column="4"/>
            <symbol>id</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneCacheInterface&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneCacheInterface&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_cache_interface.h" line="79" column="2"/>
            <symbol>SceneCacheInterface</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneReplicationInterface&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneReplicationInterface&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_replication_interface.h" line="146" column="2"/>
            <symbol>SceneReplicationInterface</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;TrackedNode&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;TrackedNode&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_replication_interface.h" line="55" column="3"/>
            <symbol>TrackedNode</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneRPCInterface&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneRPCInterface&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_rpc_interface.h" line="102" column="2"/>
            <symbol>SceneRPCInterface</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used." cwe="563" file0="modules/multiplayer/scene_cache_interface.cpp">
            <location file="modules/multiplayer/scene_cache_interface.cpp" line="149" column="6"/>
            <symbol>ofs</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;set_multiplayer_peer&apos; is called from constructor &apos;SceneMultiplayer()&apos; at line 686. Dynamic binding is not used." verbose="Virtual function &apos;set_multiplayer_peer&apos; is called from constructor &apos;SceneMultiplayer()&apos; at line 686. Dynamic binding is not used." file0="modules/multiplayer/scene_multiplayer.cpp">
            <location file="modules/multiplayer/scene_multiplayer.h" line="153" column="15" info="set_multiplayer_peer is a virtual function"/>
            <location file="modules/multiplayer/scene_multiplayer.cpp" line="686" column="2" info="Calling set_multiplayer_peer"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used." cwe="563" file0="modules/multiplayer/scene_replication_interface.cpp">
            <location file="modules/multiplayer/scene_replication_interface.cpp" line="652" column="6"/>
            <symbol>ofs</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;NavigationPoly&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;NavigationPoly&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/navigation/godot_navigation_server.cpp">
            <location file="modules/navigation/nav_utils.h" line="135" column="2"/>
            <symbol>NavigationPoly</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;free_command&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;free_command&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/navigation/godot_navigation_server.cpp">
            <location file="modules/navigation/godot_navigation_server.cpp" line="913" column="1"/>
            <symbol>free_command</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="modules/navigation/godot_navigation_server.cpp">
            <location file="modules/navigation/nav_region.h" line="66" column="7" info="Function in derived class"/>
            <location file="modules/navigation/nav_base.h" line="52" column="15" info="Virtual function in base class"/>
            <symbol>set_use_edge_connections</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="modules/navigation/godot_navigation_server.cpp">
            <location file="modules/navigation/nav_region.h" line="67" column="7" info="Function in derived class"/>
            <location file="modules/navigation/nav_base.h" line="53" column="15" info="Virtual function in base class"/>
            <symbol>get_use_edge_connections</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/navigation/nav_map.cpp">
            <location file="modules/navigation/nav_map.cpp" line="854" column="6"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="645" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="575" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="656" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="645" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="662" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="656" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="685" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="662" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="695" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="685" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="699" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="695" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="710" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="699" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="717" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="710" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="732" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="717" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="760" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="732" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="767" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="760" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_vertex_count&apos; can be reduced." verbose="The scope of the variable &apos;current_vertex_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="74" column="6"/>
            <symbol>current_vertex_count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;noise&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;noise&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/noise/noise_texture_2d.cpp">
            <location file="modules/noise/noise_texture_2d.cpp" line="38" column="2"/>
            <symbol>noise</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;noise&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;noise&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/noise/noise_texture_3d.cpp">
            <location file="modules/noise/noise_texture_3d.cpp" line="38" column="2"/>
            <symbol>noise</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRActionEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRActionEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/editor/openxr_action_editor.cpp">
            <location file="modules/openxr/editor/openxr_action_editor.h" line="72" column="2"/>
            <symbol>OpenXRActionEditor</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRSelectActionDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRSelectActionDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/editor/openxr_action_map_editor.cpp">
            <location file="modules/openxr/editor/openxr_select_action_dialog.h" line="65" column="2"/>
            <symbol>OpenXRSelectActionDialog</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/openxr/editor/openxr_interaction_profile_editor.cpp">
            <location file="modules/openxr/editor/openxr_interaction_profile_editor.cpp" line="252" column="48"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;action_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;action_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_select_action_dialog.cpp">
            <location file="modules/openxr/editor/openxr_select_action_dialog.cpp" line="121" column="2"/>
            <symbol>action_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;embree_device&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;embree_device&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/raycast/lightmap_raycaster_embree.cpp">
            <location file="modules/raycast/lightmap_raycaster_embree.cpp" line="181" column="2"/>
            <symbol>embree_device</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/raycast/lightmap_raycaster_embree.cpp">
            <location file="modules/raycast/lightmap_raycaster_embree.cpp" line="54" column="35"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/regex/regex.cpp">
            <location file="modules/regex/regex.h" line="100" column="2"/>
            <symbol>RegEx</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::header_size&apos; is never used." verbose="struct member &apos;ICU_data_header::header_size&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="36" column="11"/>
            <symbol>ICU_data_header::header_size</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::magic_1&apos; is never used." verbose="struct member &apos;ICU_data_header::magic_1&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="37" column="10"/>
            <symbol>ICU_data_header::magic_1</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::magic_2&apos; is never used." verbose="struct member &apos;ICU_data_header::magic_2&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="37" column="19"/>
            <symbol>ICU_data_header::magic_2</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::padding&apos; is never used." verbose="struct member &apos;ICU_data_header::padding&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="39" column="7"/>
            <symbol>ICU_data_header::padding</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::count&apos; is never used." verbose="struct member &apos;ICU_data_header::count&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="40" column="11"/>
            <symbol>ICU_data_header::count</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::reserved&apos; is never used." verbose="struct member &apos;ICU_data_header::reserved&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="40" column="18"/>
            <symbol>ICU_data_header::reserved</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::fake_name_and_data&apos; is never used." verbose="struct member &apos;ICU_data_header::fake_name_and_data&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="41" column="6"/>
            <symbol>ICU_data_header::fake_name_and_data</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;font_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;font_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_adv/register_types.cpp">
            <location file="modules/text_server_adv/text_server_adv.h" line="561" column="4"/>
            <symbol>font_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;antialiasing&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;antialiasing&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_adv/register_types.cpp">
            <location file="modules/text_server_adv/text_server_adv.h" line="565" column="4"/>
            <symbol>antialiasing</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p_h&lt;E.h&apos; is always true" verbose="Condition &apos;p_h&lt;E.h&apos; is always true" cwe="571" file0="modules/text_server_adv/register_types.cpp">
            <location file="modules/text_server_adv/text_server_adv.h" line="232" column="13" info="Condition &apos;p_h&lt;E.h&apos; is always true"/>
            <location file="modules/text_server_adv/text_server_adv.h" line="229" column="13" info="Assuming condition is false"/>
            <location file="modules/text_server_adv/text_server_adv.h" line="226" column="13" info="Assuming that condition &apos;p_h==E.h&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ell_min_characters&apos; can be reduced." verbose="The scope of the variable &apos;ell_min_characters&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="4713" column="6"/>
            <symbol>ell_min_characters</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_valid_cut&apos; can be reduced." verbose="The scope of the variable &apos;last_valid_cut&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="4721" column="6"/>
            <symbol>last_valid_cut</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="4722" column="7"/>
            <symbol>found</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;font_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;font_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_fb/register_types.cpp">
            <location file="modules/text_server_fb/text_server_fb.h" line="480" column="4"/>
            <symbol>font_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;antialiasing&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;antialiasing&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_fb/register_types.cpp">
            <location file="modules/text_server_fb/text_server_fb.h" line="484" column="4"/>
            <symbol>antialiasing</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p_h&lt;E.h&apos; is always true" verbose="Condition &apos;p_h&lt;E.h&apos; is always true" cwe="571" file0="modules/text_server_fb/register_types.cpp">
            <location file="modules/text_server_fb/text_server_fb.h" line="189" column="13" info="Condition &apos;p_h&lt;E.h&apos; is always true"/>
            <location file="modules/text_server_fb/text_server_fb.h" line="186" column="13" info="Assuming condition is false"/>
            <location file="modules/text_server_fb/text_server_fb.h" line="183" column="13" info="Assuming that condition &apos;p_h==E.h&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ell_min_characters&apos; can be reduced." verbose="The scope of the variable &apos;ell_min_characters&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="3516" column="6"/>
            <symbol>ell_min_characters</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_valid_cut&apos; can be reduced." verbose="The scope of the variable &apos;last_valid_cut&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="3522" column="6"/>
            <symbol>last_valid_cut</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="3523" column="7"/>
            <symbol>found</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="51" column="9"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="52" column="9"/>
            <symbol>count</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;tga_header.image_width&apos; is less than zero." verbose="The unsigned expression &apos;tga_header.image_width&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="304" column="29" info="Unsigned less than zero"/>
            <symbol>tga_header.image_width</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;tga_header.image_height&apos; is less than zero." verbose="The unsigned expression &apos;tga_header.image_height&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="304" column="61" info="Unsigned less than zero"/>
            <symbol>tga_header.image_height</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used." cwe="563" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="51" column="11"/>
            <symbol>c</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;count&apos; is assigned a value that is never used." verbose="Variable &apos;count&apos; is assigned a value that is never used." cwe="563" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="52" column="15"/>
            <symbol>count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;texture&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;texture&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/theora/video_stream_theora.cpp">
            <location file="modules/theora/video_stream_theora.cpp" line="630" column="2"/>
            <symbol>texture</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_loader_tinyexr.cpp">
            <location file="modules/tinyexr/image_loader_tinyexr.cpp" line="174" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_saver_tinyexr.cpp">
            <location file="modules/tinyexr/image_saver_tinyexr.cpp" line="209" column="27"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_saver_tinyexr.cpp">
            <location file="modules/tinyexr/image_saver_tinyexr.cpp" line="210" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/vorbis/audio_stream_ogg_vorbis.cpp">
            <location file="modules/vorbis/audio_stream_ogg_vorbis.cpp" line="427" column="6"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/vorbis/resource_importer_ogg_vorbis.cpp">
            <location file="modules/vorbis/resource_importer_ogg_vorbis.cpp" line="109" column="6"/>
            <symbol>err</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCDataChannelJS()&apos; at line 212. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCDataChannelJS()&apos; at line 212. Dynamic binding is not used." file0="modules/webrtc/webrtc_data_channel_js.cpp">
            <location file="modules/webrtc/webrtc_data_channel_js.h" line="78" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_data_channel_js.cpp" line="212" column="2" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;WebRTCDataChannelJS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;WebRTCDataChannelJS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/webrtc/webrtc_data_channel_js.cpp">
            <location file="modules/webrtc/webrtc_data_channel_js.h" line="88" column="2"/>
            <symbol>WebRTCDataChannelJS</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCMultiplayerPeer()&apos; at line 455. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCMultiplayerPeer()&apos; at line 455. Dynamic binding is not used." file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.h" line="121" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="455" column="2" info="Calling close"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="207" column="51" info="Integer overflow"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="295" column="51" info="Integer overflow"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;initialize&apos; is called from constructor &apos;WebRTCPeerConnectionJS()&apos; at line 144. Dynamic binding is not used." verbose="Virtual function &apos;initialize&apos; is called from constructor &apos;WebRTCPeerConnectionJS()&apos; at line 144. Dynamic binding is not used." file0="modules/webrtc/webrtc_peer_connection_js.cpp">
            <location file="modules/webrtc/webrtc_peer_connection_js.h" line="78" column="16" info="initialize is a virtual function"/>
            <location file="modules/webrtc/webrtc_peer_connection_js.cpp" line="144" column="2" info="Calling initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCPeerConnectionJS()&apos; at line 148. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCPeerConnectionJS()&apos; at line 148. Dynamic binding is not used." file0="modules/webrtc/webrtc_peer_connection_js.cpp">
            <location file="modules/webrtc/webrtc_peer_connection_js.h" line="85" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_peer_connection_js.cpp" line="148" column="2" info="Calling close"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;stop&apos; is called from destructor &apos;~EditorDebuggerServerWebSocket()&apos; at line 132. Dynamic binding is not used." verbose="Virtual function &apos;stop&apos; is called from destructor &apos;~EditorDebuggerServerWebSocket()&apos; at line 132. Dynamic binding is not used." file0="modules/websocket/editor/editor_debugger_server_websocket.cpp">
            <location file="modules/websocket/editor/editor_debugger_server_websocket.h" line="59" column="15" info="stop is a virtual function"/>
            <location file="modules/websocket/editor/editor_debugger_server_websocket.cpp" line="132" column="2" info="Calling stop"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;peer_config&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;peer_config&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/websocket/websocket_multiplayer_peer.cpp">
            <location file="modules/websocket/websocket_multiplayer_peer.cpp" line="36" column="2"/>
            <symbol>peer_config</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WSLPeer()&apos; at line 845. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WSLPeer()&apos; at line 845. Dynamic binding is not used." file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.h" line="136" column="15" info="close is a virtual function"/>
            <location file="modules/websocket/wsl_peer.cpp" line="845" column="2" info="Calling close"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.cpp" line="562" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.cpp" line="583" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.cpp" line="610" column="18"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;WebXRInterfaceJS::input_sources&apos; is not initialized in the constructor." verbose="Member variable &apos;WebXRInterfaceJS::input_sources&apos; is not initialized in the constructor." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="763" column="19"/>
            <symbol>WebXRInterfaceJS::input_sources</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;session_mode&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;session_mode&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="765" column="2"/>
            <symbol>session_mode</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;requested_reference_space_types&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;requested_reference_space_types&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="766" column="2"/>
            <symbol>requested_reference_space_types</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~WebXRInterfaceJS()&apos; at line 772. Dynamic binding is not used." verbose="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~WebXRInterfaceJS()&apos; at line 772. Dynamic binding is not used." file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.h" line="114" column="15" info="uninitialize is a virtual function"/>
            <location file="modules/webxr/webxr_interface_js.cpp" line="772" column="3" info="Calling uninitialize"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="102" column="3"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="modules/xatlas_unwrap/register_types.cpp">
            <location file="modules/xatlas_unwrap/register_types.cpp" line="100" column="11"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;keycode&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;keycode&apos;. The initialized value is overwritten before it is read." cwe="563" file0="platform/android/android_input_handler.cpp">
            <location file="platform/android/android_input_handler.cpp" line="93" column="11" info="keycode is overwritten"/>
            <location file="platform/android/android_input_handler.cpp" line="91" column="14" info="keycode is initialized"/>
            <symbol>keycode</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/api/api.cpp">
            <location file="platform/android/api/jni_singleton.h" line="84" column="18"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/api/api.cpp">
            <location file="platform/android/api/jni_singleton.h" line="241" column="3"/>
            <symbol>instance</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;res&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;res&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/audio_driver_opensl.cpp">
            <location file="platform/android/audio_driver_opensl.cpp" line="180" column="6" info="res is overwritten"/>
            <location file="platform/android/audio_driver_opensl.cpp" line="177" column="7" info="res is assigned"/>
            <symbol>res</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessJAndroid()&apos; at line 328. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessJAndroid()&apos; at line 328. Dynamic binding is not used." file0="platform/android/dir_access_jandroid.cpp">
            <location file="platform/android/dir_access_jandroid.h" line="68" column="15" info="list_dir_end is a virtual function"/>
            <location file="platform/android/dir_access_jandroid.cpp" line="328" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;DisplayServerAndroid::swap_buffers_flag&apos; is not initialized in the constructor." verbose="Member variable &apos;DisplayServerAndroid::swap_buffers_flag&apos; is not initialized in the constructor." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="539" column="23"/>
            <symbol>DisplayServerAndroid::swap_buffers_flag</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rendering_driver&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rendering_driver&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="540" column="2"/>
            <symbol>rendering_driver</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotJavaViewWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotJavaViewWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/java_godot_view_wrapper.h" line="56" column="2"/>
            <symbol>GodotJavaViewWrapper</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: context_vulkan" verbose="Possible null pointer dereference: context_vulkan" cwe="476" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="566" column="7" info="Null pointer dereference"/>
            <location file="platform/android/display_server_android.cpp" line="561" column="21" info="Assignment &apos;context_vulkan=nullptr&apos;, assigned value is 0"/>
            <symbol>context_vulkan</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;abi&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;abi&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/export/export.cpp">
            <location file="platform/android/export/export_plugin.h" line="123" column="4"/>
            <symbol>abi</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;arch&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;arch&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/export/export.cpp">
            <location file="platform/android/export/export_plugin.h" line="124" column="4"/>
            <symbol>arch</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;found_target_sdk&apos; is always true" verbose="Condition &apos;found_target_sdk&apos; is always true" cwe="571" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2223" column="23" info="Condition &apos;found_target_sdk&apos; is always true"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2019" column="6" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="2002" column="7" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2097" column="6" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="2067" column="9" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="3153" column="7" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="3147" column="6" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;min_sdk_int&apos; is assigned a value that is never used." verbose="Variable &apos;min_sdk_int&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="1756" column="20"/>
            <symbol>min_sdk_int</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." verbose="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="1773" column="23"/>
            <symbol>target_sdk_int</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." verbose="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2407" column="21"/>
            <symbol>target_sdk_int</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;valid&apos; is assigned a value that is never used." verbose="Variable &apos;valid&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2232" column="13"/>
            <symbol>valid</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gradle_build_enabled&apos; is assigned a value that is never used." verbose="Variable &apos;gradle_build_enabled&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2233" column="34"/>
            <symbol>gradle_build_enabled</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 348. Dynamic binding is not used." verbose="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 348. Dynamic binding is not used." file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.h" line="65" column="15" info="is_open is a virtual function"/>
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="348" column="6" info="Calling is_open"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 349. Dynamic binding is not used." verbose="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 349. Dynamic binding is not used." file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.h" line="65" column="15" info="is_open is a virtual function"/>
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="100" column="7" info="Calling is_open"/>
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="349" column="3" info="Calling _close"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;line_buffer_size&apos; is less than zero." verbose="The unsigned expression &apos;line_buffer_size&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="198" column="24" info="Unsigned less than zero"/>
            <symbol>line_buffer_size</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;bytes_read&apos; is less than zero." verbose="The unsigned expression &apos;bytes_read&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="207" column="18" info="Unsigned less than zero"/>
            <symbol>bytes_read</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_class_wrapper.cpp">
            <location file="platform/android/java_class_wrapper.cpp" line="157" column="20"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;godot_io_instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;godot_io_instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_io_wrapper.cpp">
            <location file="platform/android/java_godot_io_wrapper.cpp" line="43" column="2"/>
            <symbol>godot_io_instance</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="453" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="454" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="476" column="29"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="477" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obj&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obj&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/jni_utils.h" line="44" column="14"/>
            <symbol>obj</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;godot_instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;godot_instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_wrapper.cpp">
            <location file="platform/android/java_godot_wrapper.cpp" line="41" column="2"/>
            <symbol>godot_instance</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketAndroid()&apos; at line 75. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketAndroid()&apos; at line 75. Dynamic binding is not used." file0="platform/android/net_socket_android.cpp">
            <location file="platform/android/net_socket_android.h" line="67" column="15" info="close is a virtual function"/>
            <location file="platform/android/net_socket_android.cpp" line="75" column="2" info="Calling close"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/plugin/godot_plugin_jni.cpp">
            <location file="platform/android/plugin/godot_plugin_jni.cpp" line="119" column="39"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/plugin/godot_plugin_jni.cpp">
            <location file="platform/android/plugin/godot_plugin_jni.cpp" line="120" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/ios/export/export.cpp">
            <location file="platform/ios/export/export_plugin.h" line="97" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;valid&apos; is assigned a value that is never used." verbose="Variable &apos;valid&apos; is assigned a value that is never used." cwe="563" file0="platform/ios/export/export_plugin.cpp">
            <location file="platform/ios/export/export_plugin.cpp" line="1904" column="13"/>
            <symbol>valid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;relocation&apos; can be reduced." verbose="The scope of the variable &apos;relocation&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/crash_handler_linuxbsd.cpp">
            <location file="platform/linuxbsd/crash_handler_linuxbsd.cpp" line="89" column="12"/>
            <symbol>relocation</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;host&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;host&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="53" column="4"/>
            <symbol>host</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;port&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;port&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="54" column="4"/>
            <symbol>port</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ssh_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ssh_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="55" column="4"/>
            <symbol>ssh_args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cmd_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cmd_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="56" column="4"/>
            <symbol>cmd_args</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;unsupported&apos; is always false" verbose="Condition &apos;unsupported&apos; is always false" cwe="570" file0="platform/linuxbsd/freedesktop_portal_desktop.cpp">
            <location file="platform/linuxbsd/freedesktop_portal_desktop.cpp" line="141" column="6" info="Condition &apos;unsupported&apos; is always false"/>
            <location file="platform/linuxbsd/freedesktop_portal_desktop.cpp" line="138" column="16" info="Assignment &apos;unsupported=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;unsupported&apos; is always false" verbose="Condition &apos;unsupported&apos; is always false" cwe="570" file0="platform/linuxbsd/freedesktop_screensaver.cpp">
            <location file="platform/linuxbsd/freedesktop_screensaver.cpp" line="145" column="6" info="Condition &apos;unsupported&apos; is always false"/>
            <location file="platform/linuxbsd/freedesktop_screensaver.cpp" line="142" column="16" info="Assignment &apos;unsupported=false&apos;, assigned value is 0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadLinux&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadLinux&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/linuxbsd/godot_linuxbsd.cpp">
            <location file="platform/linuxbsd/joypad_linux.h" line="45" column="2"/>
            <symbol>JoypadLinux</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="474" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dylibloader_verbose&apos; can be reduced." verbose="The scope of the variable &apos;dylibloader_verbose&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="103" column="6"/>
            <symbol>dylibloader_verbose</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dev&apos; can be reduced." verbose="The scope of the variable &apos;dev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="176" column="15"/>
            <symbol>dev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;joypad&apos; can be reduced." verbose="The scope of the variable &apos;joypad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="280" column="11"/>
            <symbol>joypad</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dylibloader_verbose&apos; can be reduced." verbose="The scope of the variable &apos;dylibloader_verbose&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="105" column="6"/>
            <symbol>dylibloader_verbose</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;font_config_initialized&apos; is always true" verbose="Condition &apos;font_config_initialized&apos; is always true" cwe="571" file0="platform/linuxbsd/os_linuxbsd.cpp">
            <location file="platform/linuxbsd/os_linuxbsd.cpp" line="1171" column="6" info="Condition &apos;font_config_initialized&apos; is always true"/>
            <location file="platform/linuxbsd/os_linuxbsd.cpp" line="1169" column="28" info="Assignment &apos;font_config_initialized=true&apos;, assigned value is 1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/tts_linux.cpp">
            <location file="platform/linuxbsd/tts_linux.cpp" line="39" column="19"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_position&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5784. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_position&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5784. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="410" column="18" info="screen_get_position is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5784" column="21" info="Calling screen_get_position"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5784. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5784. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="411" column="17" info="screen_get_size is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5784" column="54" info="Calling screen_get_size"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_get_mode&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5787. Dynamic binding is not used." verbose="Virtual function &apos;window_get_mode&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5787. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="470" column="21" info="window_get_mode is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1772" column="27" info="Calling window_get_mode"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5292" column="3" info="Calling _update_size_hints"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5787" column="25" info="Calling _create_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5794. Dynamic binding is not used." verbose="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5794. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="474" column="15" info="window_set_flag is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5794" column="4" info="Calling window_set_flag"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5797. Dynamic binding is not used." verbose="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5797. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="426" column="15" info="show_window is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5797" column="2" info="Calling show_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5942. Dynamic binding is not used." verbose="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5942. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="495" column="15" info="cursor_set_shape is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5942" column="2" info="Calling cursor_set_shape"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5957. Dynamic binding is not used." verbose="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 5957. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="419" column="15" info="screen_set_keep_on is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5957" column="2" info="Calling screen_set_keep_on"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;direct_touch&apos; is always false" verbose="Condition &apos;direct_touch&apos; is always false" cwe="570" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="249" column="7" info="Condition &apos;direct_touch&apos; is always false"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="204" column="23" info="Assignment &apos;direct_touch=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!vi_selected&apos; is always true" verbose="Condition &apos;!vi_selected&apos; is always true" cwe="571" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5034" column="6" info="Condition &apos;!vi_selected&apos; is always true"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5023" column="21" info="Assignment &apos;vi_selected=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;modifiers==nullptr&apos; is always true" verbose="Condition &apos;modifiers==nullptr&apos; is always true" cwe="571" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5583" column="16" info="Condition &apos;modifiers==nullptr&apos; is always true"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5569" column="20" info="Assignment &apos;modifiers=nullptr&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!driver_found&apos; is always true" verbose="Condition &apos;!driver_found&apos; is always true" cwe="571" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5772" column="6" info="Condition &apos;!driver_found&apos; is always true"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5693" column="22" info="Assignment &apos;driver_found=false&apos;, assigned value is 0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="934" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wd&apos; can be reduced." verbose="The scope of the variable &apos;wd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1691" column="14"/>
            <symbol>wd</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="890" column="2" info="Shadow variable"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="887" column="53" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1167" column="2" info="Shadow variable"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1164" column="42" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1330" column="2" info="Shadow variable"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1327" column="53" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;wd&apos; can be declared with const" verbose="Variable &apos;wd&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="3549" column="14" info="Variable &apos;wd&apos; can be declared with const"/>
            <symbol>wd</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;wd&apos; can be declared with const" verbose="Variable &apos;wd&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="3865" column="14" info="Variable &apos;wd&apos; can be declared with const"/>
            <symbol>wd</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GLManager_X11::_x_windisp&apos; is not initialized in the constructor." verbose="Member variable &apos;GLManager_X11::_x_windisp&apos; is not initialized in the constructor." cwe="398" file0="platform/linuxbsd/x11/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/x11/gl_manager_x11.cpp" line="391" column="16"/>
            <symbol>GLManager_X11::_x_windisp</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GLDisplay::x11_display&apos; is not initialized in the constructor." verbose="Member variable &apos;GLDisplay::x11_display&apos; is not initialized in the constructor." cwe="398" file0="platform/linuxbsd/x11/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/x11/gl_manager_x11.h" line="77" column="3"/>
            <symbol>GLDisplay::x11_display</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;visual_attribs&apos; can be reduced." verbose="The scope of the variable &apos;visual_attribs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/x11/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/x11/gl_manager_x11.cpp" line="108" column="13"/>
            <symbol>visual_attribs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;visual_attribs_layered&apos; can be reduced." verbose="The scope of the variable &apos;visual_attribs_layered&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/x11/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/x11/gl_manager_x11.cpp" line="119" column="13"/>
            <symbol>visual_attribs_layered</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PList&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PList&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/macos/export/codesign.cpp">
            <location file="platform/macos/export/plist.h" line="75" column="2"/>
            <symbol>PList</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;file_pattern&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;file_pattern&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/codesign.cpp">
            <location file="platform/macos/export/codesign.h" line="91" column="4"/>
            <symbol>file_pattern</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;key&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/codesign.cpp">
            <location file="platform/macos/export/codesign.h" line="92" column="4"/>
            <symbol>key</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;blob&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;blob&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/codesign.cpp">
            <location file="platform/macos/export/codesign.cpp" line="449" column="2"/>
            <symbol>blob</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignRequirements&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignRequirements&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/macos/export/codesign.cpp">
            <location file="platform/macos/export/codesign.h" line="161" column="2"/>
            <symbol>CodeSignRequirements</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignEntitlementsText&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignEntitlementsText&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/macos/export/codesign.cpp">
            <location file="platform/macos/export/codesign.h" line="185" column="2"/>
            <symbol>CodeSignEntitlementsText</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignEntitlementsBinary&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignEntitlementsBinary&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/macos/export/codesign.cpp">
            <location file="platform/macos/export/codesign.h" line="207" column="2"/>
            <symbol>CodeSignEntitlementsBinary</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;host&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;host&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="73" column="4"/>
            <symbol>host</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;port&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;port&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="74" column="4"/>
            <symbol>port</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ssh_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ssh_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="75" column="4"/>
            <symbol>ssh_args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cmd_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cmd_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="76" column="4"/>
            <symbol>cmd_args</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/macos/export/export_plugin.cpp">
            <location file="platform/macos/export/export_plugin.cpp" line="2005" column="8" info="err is overwritten"/>
            <location file="platform/macos/export/export_plugin.cpp" line="1998" column="10" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/plist.cpp">
            <location file="platform/macos/export/plist.cpp" line="447" column="2"/>
            <symbol>root</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadMacOS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadMacOS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/macos/joypad_macos.cpp">
            <location file="platform/macos/joypad_macos.h" line="116" column="2"/>
            <symbol>JoypadMacOS</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &apos;READ_LE_4&apos;, Invalid ## usage when expanding &apos;READ_LE_4&apos;." verbose="failed to expand &apos;READ_LE_4&apos;, Invalid ## usage when expanding &apos;READ_LE_4&apos;.">
            <location file="platform/uwp/app_uwp.cpp" line="488" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offs&apos; is assigned a value that is never used." verbose="Variable &apos;offs&apos; is assigned a value that is never used." cwe="563" file0="platform/uwp/export/app_packager.cpp">
            <location file="platform/uwp/export/app_packager.cpp" line="156" column="7"/>
            <symbol>offs</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offs&apos; is assigned a value that is never used." verbose="Variable &apos;offs&apos; is assigned a value that is never used." cwe="563" file0="platform/uwp/export/app_packager.cpp">
            <location file="platform/uwp/export/app_packager.cpp" line="208" column="7"/>
            <symbol>offs</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: ^)" verbose="syntax error: ^)" file0="platform/uwp/joypad_uwp.cpp">
            <location file="platform/uwp/joypad_uwp.cpp" line="55" column="40"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="platform/uwp/os_uwp.cpp">
            <location file="platform/uwp/os_uwp.cpp" line="253" column="46"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="platform/web/audio_driver_web.cpp">
            <location file="platform/web/audio_driver_web.cpp" line="52" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/web/display_server_web.cpp">
            <location file="platform/web/display_server_web.cpp" line="369" column="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;valid&apos; is assigned a value that is never used." verbose="Variable &apos;valid&apos; is assigned a value that is never used." cwe="563" file0="platform/web/export/export_plugin.cpp">
            <location file="platform/web/export/export_plugin.cpp" line="363" column="13"/>
            <symbol>valid</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;extensions&apos; is assigned a value that is never used." verbose="Variable &apos;extensions&apos; is assigned a value that is never used." cwe="563" file0="platform/web/export/export_plugin.cpp">
            <location file="platform/web/export/export_plugin.cpp" line="364" column="18"/>
            <symbol>extensions</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~HTTPClientWeb()&apos; at line 271. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~HTTPClientWeb()&apos; at line 271. Dynamic binding is not used." file0="platform/web/http_client_web.cpp">
            <location file="platform/web/http_client_web.h" line="92" column="7" info="close is a virtual function"/>
            <location file="platform/web/http_client_web.cpp" line="271" column="2" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JavaScriptObjectImpl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JavaScriptObjectImpl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/web/javascript_bridge_singleton.cpp">
            <location file="platform/web/javascript_bridge_singleton.cpp" line="87" column="2"/>
            <symbol>JavaScriptObjectImpl</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/web/javascript_bridge_singleton.cpp">
            <location file="platform/web/javascript_bridge_singleton.cpp" line="227" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/web/javascript_bridge_singleton.cpp">
            <location file="platform/web/javascript_bridge_singleton.cpp" line="249" column="36"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;get_mod_info&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;get_mod_info&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/crash_handler_windows.cpp">
            <location file="platform/windows/crash_handler_windows.cpp" line="94" column="2"/>
            <symbol>get_mod_info</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;skip_first&apos; is always false" verbose="Condition &apos;skip_first&apos; is always false" cwe="570" file0="platform/windows/crash_handler_windows.cpp">
            <location file="platform/windows/crash_handler_windows.cpp" line="200" column="7" info="Condition &apos;skip_first&apos; is always false"/>
            <location file="platform/windows/crash_handler_windows.cpp" line="167" column="20" info="Assignment &apos;skip_first=false&apos;, assigned value is 0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;last_pad&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;last_pad&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="85" column="4"/>
            <symbol>last_pad</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;di_joy&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;di_joy&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="88" column="4"/>
            <symbol>di_joy</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;guid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;guid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="89" column="4"/>
            <symbol>guid</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4173. Dynamic binding is not used." verbose="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4173. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="535" column="15" info="screen_set_keep_on is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="4173" column="2" info="Calling screen_set_keep_on"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_position&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4308. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_position&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4308. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="527" column="18" info="screen_get_position is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="4308" column="21" info="Calling screen_get_position"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4308. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4308. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="528" column="17" info="screen_get_size is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="4308" column="54" info="Calling screen_get_size"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_dark_mode_supported&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4311. Dynamic binding is not used." verbose="Virtual function &apos;is_dark_mode_supported&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4311. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="510" column="15" info="is_dark_mode_supported is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="3967" column="7" info="Calling is_dark_mode_supported"/>
            <location file="platform/windows/display_server_windows.cpp" line="4311" column="25" info="Calling _create_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4318. Dynamic binding is not used." verbose="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4318. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="592" column="15" info="window_set_flag is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="4318" column="4" info="Calling window_set_flag"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4322. Dynamic binding is not used." verbose="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Error&amp;r_error)&apos; at line 4322. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="541" column="15" info="show_window is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="4322" column="2" info="Calling show_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_set_keep_on&apos; is called from destructor &apos;~DisplayServerWindows()&apos; at line 4417. Dynamic binding is not used." verbose="Virtual function &apos;screen_set_keep_on&apos; is called from destructor &apos;~DisplayServerWindows()&apos; at line 4417. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="535" column="15" info="screen_set_keep_on is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="4417" column="2" info="Calling screen_set_keep_on"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/os_windows.h" line="236" column="2"/>
            <symbol>OS_Windows</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadWindows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadWindows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="55" column="2"/>
            <symbol>JoypadWindows</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.cpp" line="438" column="2" info="Shadow variable"/>
            <location file="platform/windows/display_server_windows.cpp" line="435" column="55" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.cpp" line="476" column="2" info="Shadow variable"/>
            <location file="platform/windows/display_server_windows.cpp" line="473" column="50" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.cpp" line="523" column="2" info="Shadow variable"/>
            <location file="platform/windows/display_server_windows.cpp" line="520" column="57" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.cpp" line="601" column="2" info="Shadow variable"/>
            <location file="platform/windows/display_server_windows.cpp" line="598" column="46" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.cpp" line="701" column="2" info="Shadow variable"/>
            <location file="platform/windows/display_server_windows.cpp" line="698" column="57" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;wd&apos; can be declared with const" verbose="Variable &apos;wd&apos; can be declared with const" cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.cpp" line="2449" column="14" info="Variable &apos;wd&apos; can be declared with const"/>
            <symbol>wd</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GLManager_Windows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GLManager_Windows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/gl_manager_windows.h" line="119" column="2"/>
            <symbol>GLManager_Windows</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;host&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;host&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="57" column="4"/>
            <symbol>host</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;port&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;port&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="58" column="4"/>
            <symbol>port</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ssh_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ssh_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="59" column="4"/>
            <symbol>ssh_args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cmd_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cmd_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="60" column="4"/>
            <symbol>cmd_args</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &apos;id_type == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="platform/windows/export/export_plugin.cpp">
            <location file="platform/windows/export/export_plugin.cpp" line="566" column="15"/>
            <location file="platform/windows/export/export_plugin.cpp" line="555" column="16" info="&apos;id_type&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function freopen_s() is not used." verbose="Return value of function freopen_s() is not used." cwe="252" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.cpp" line="109" column="4"/>
            <symbol>freopen_s</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_cRef&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_cRef&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.cpp" line="1034" column="3"/>
            <symbol>_cRef</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;string&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;string&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.cpp" line="1035" column="3"/>
            <symbol>string</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;locale&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;locale&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.cpp" line="1036" column="3"/>
            <symbol>locale</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hInstance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hInstance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.cpp" line="1715" column="2"/>
            <symbol>hInstance</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef &lt; IDWriteFontFamily &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef &lt; IDWriteFontFamily &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef &lt; IDWriteFontFamily &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef &lt; IDWriteLocalizedStrings &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef &lt; IDWriteLocalizedStrings &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef &lt; IDWriteLocalizedStrings &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef &lt; IDWriteNumberSubstitution &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef &lt; IDWriteNumberSubstitution &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef &lt; IDWriteNumberSubstitution &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef &lt; IDWriteFont &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef &lt; IDWriteFont &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef &lt; IDWriteFont &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef &lt; IDWriteFontFace &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef &lt; IDWriteFontFace &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef &lt; IDWriteFontFace &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef &lt; IDWriteFontFile &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef &lt; IDWriteFontFile &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef &lt; IDWriteFontFile &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef &lt; IDWriteLocalFontFileLoader &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef &lt; IDWriteLocalFontFileLoader &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.h" line="86" column="2"/>
            <symbol>ComAutoreleaseRef &lt; IDWriteLocalFontFileLoader &gt;</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;joint&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;joint&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/joint_2d.cpp">
            <location file="scene/2d/joint_2d.cpp" line="245" column="2"/>
            <symbol>joint</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/2d/joint_2d.cpp">
            <location file="scene/2d/physics_body_2d.h" line="46" column="2"/>
            <symbol>PhysicsBody2D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_light&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_light&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_2d.cpp">
            <location file="scene/2d/light_2d.cpp" line="319" column="2"/>
            <symbol>canvas_light</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occ_polygon&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occ_polygon&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_occluder_2d.cpp">
            <location file="scene/2d/light_occluder_2d.cpp" line="147" column="2"/>
            <symbol>occ_polygon</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluder&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluder&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_occluder_2d.cpp">
            <location file="scene/2d/light_occluder_2d.cpp" line="288" column="2"/>
            <symbol>occluder</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_agent_2d.cpp">
            <location file="scene/2d/navigation_agent_2d.cpp" line="289" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;link&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;link&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_link_2d.cpp">
            <location file="scene/2d/navigation_link_2d.cpp" line="353" column="2"/>
            <symbol>link</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obstacle&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obstacle&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_obstacle_2d.cpp">
            <location file="scene/2d/navigation_obstacle_2d.cpp" line="149" column="2"/>
            <symbol>obstacle</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="467" column="51"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="469" column="68"/>
            <symbol>alloca</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="467" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="469" column="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/polygon_2d.cpp">
            <location file="scene/2d/polygon_2d.cpp" line="662" column="2"/>
            <symbol>mesh</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;length&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;length&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="497" column="2"/>
            <symbol>length</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_angle&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_angle&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="498" column="2"/>
            <symbol>bone_angle</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;skeleton&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;skeleton&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="782" column="2"/>
            <symbol>skeleton</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;coords&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;coords&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="98" column="3"/>
            <symbol>coords</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;debug_canvas_item&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;debug_canvas_item&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="99" column="3"/>
            <symbol>debug_canvas_item</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_items&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_items&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="100" column="3"/>
            <symbol>canvas_items</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluders&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluders&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="101" column="3"/>
            <symbol>occluders</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bodies&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bodies&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="102" column="3"/>
            <symbol>bodies</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;navigation_regions&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;navigation_regions&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="103" column="3"/>
            <symbol>navigation_regions</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;z1==z2&apos; is always true" verbose="Condition &apos;z1==z2&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1204" column="29" info="Condition &apos;z1==z2&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="1202" column="10" info="Assuming that condition &apos;z1&lt;z2&apos; is not redundant"/>
            <location file="scene/2d/tile_map.cpp" line="1204" column="17" info="Assuming that condition &apos;z1&gt;z2&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!in_editor&apos; is always true" verbose="Condition &apos;!in_editor&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1528" column="52" info="Condition &apos;!in_editor&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="1524" column="21" info="Assignment &apos;in_editor=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!in_editor&apos; is always true" verbose="Condition &apos;!in_editor&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1565" column="28" info="Condition &apos;!in_editor&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="1561" column="21" info="Assignment &apos;in_editor=false&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1256" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1402" column="18"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1616" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1807" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="2011" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="2070" column="18"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="3073" column="20"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1909" column="18"/>
            <symbol>source</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unit_rect&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unit_rect&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/touch_screen_button.cpp">
            <location file="scene/2d/touch_screen_button.cpp" line="420" column="2"/>
            <symbol>unit_rect</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rect&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rect&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/visible_on_screen_notifier_2d.cpp">
            <location file="scene/2d/visible_on_screen_notifier_2d.cpp" line="112" column="2"/>
            <symbol>rect</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;decal&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;decal&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/decal.cpp">
            <location file="scene/3d/decal.cpp" line="279" column="2"/>
            <symbol>decal</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;volume&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;volume&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/fog_volume.cpp">
            <location file="scene/3d/fog_volume.cpp" line="138" column="2"/>
            <symbol>volume</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;collision&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;collision&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.cpp" line="55" column="2"/>
            <symbol>collision</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;collision&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;collision&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.cpp" line="877" column="2"/>
            <symbol>collision</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GPUParticlesCollision3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GPUParticlesCollision3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.h" line="47" column="2"/>
            <symbol>GPUParticlesCollision3D</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GPUParticlesAttractor3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GPUParticlesAttractor3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.h" line="277" column="2"/>
            <symbol>GPUParticlesAttractor3D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/light_3d.cpp">
            <location file="scene/3d/light_3d.cpp" line="436" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Light3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Light3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/light_3d.cpp">
            <location file="scene/3d/light_3d.h" line="101" column="2"/>
            <symbol>Light3D</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::tnear</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::time&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::tfar</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::u&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::u&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::u</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::v&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::v&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::v</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::primID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::instID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="74" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="74" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="scene/3d/lightmapper.h" line="65" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="scene/3d/lightmapper.h" line="65" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_agent_3d.cpp">
            <location file="scene/3d/navigation_agent_3d.cpp" line="308" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;link&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;link&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_link_3d.cpp">
            <location file="scene/3d/navigation_link_3d.cpp" line="265" column="2"/>
            <symbol>link</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obstacle&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obstacle&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_obstacle_3d.cpp">
            <location file="scene/3d/navigation_obstacle_3d.cpp" line="163" column="2"/>
            <symbol>obstacle</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/navigation_obstacle_3d.cpp">
            <location file="scene/3d/navigation_obstacle_3d.cpp" line="353" column="11"/>
            <symbol>y</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluder&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluder&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/occluder_instance_3d.cpp">
            <location file="scene/3d/occluder_instance_3d.cpp" line="137" column="2"/>
            <symbol>occluder</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;probe&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;probe&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/reflection_probe.cpp">
            <location file="scene/3d/reflection_probe.cpp" line="285" column="2"/>
            <symbol>probe</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sub_chain_size&apos; can be reduced." verbose="The scope of the variable &apos;sub_chain_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/skeleton_ik_3d.cpp">
            <location file="scene/3d/skeleton_ik_3d.cpp" line="67" column="6"/>
            <symbol>sub_chain_size</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;spatial_attachment_path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;spatial_attachment_path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/soft_body_3d.cpp">
            <location file="scene/3d/soft_body_3d.cpp" line="107" column="2"/>
            <symbol>spatial_attachment_path</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/soft_body_3d.cpp">
            <location file="scene/3d/soft_body_3d.cpp" line="109" column="2"/>
            <symbol>offset</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;point_index&apos; can be reduced." verbose="The scope of the variable &apos;point_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/soft_body_3d.cpp">
            <location file="scene/3d/soft_body_3d.cpp" line="199" column="6"/>
            <symbol>point_index</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/3d/sprite_3d.cpp">
            <location file="scene/3d/sprite_3d.cpp" line="738" column="79"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/3d/sprite_3d.cpp">
            <location file="scene/3d/sprite_3d.cpp" line="742" column="76"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;rel_vel&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;rel_vel&apos;. The initialized value is overwritten before it is read." cwe="563" file0="scene/3d/vehicle_body_3d.cpp">
            <location file="scene/3d/vehicle_body_3d.cpp" line="578" column="10" info="rel_vel is overwritten"/>
            <location file="scene/3d/vehicle_body_3d.cpp" line="572" column="17" info="rel_vel is initialized"/>
            <symbol>rel_vel</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_screen_enter&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 105. Dynamic binding is not used." verbose="Virtual function &apos;_screen_enter&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 105. Dynamic binding is not used." file0="scene/3d/visible_on_screen_notifier_3d.cpp">
            <location file="scene/3d/visible_on_screen_notifier_3d.h" line="49" column="15" info="_screen_enter is a virtual function"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="42" column="2" info="Calling _screen_enter"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="105" column="113" info="Calling _visibility_enter"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_screen_exit&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 105. Dynamic binding is not used." verbose="Virtual function &apos;_screen_exit&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 105. Dynamic binding is not used." file0="scene/3d/visible_on_screen_notifier_3d.cpp">
            <location file="scene/3d/visible_on_screen_notifier_3d.h" line="50" column="15" info="_screen_exit is a virtual function"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="51" column="2" info="Calling _screen_exit"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="105" column="179" info="Calling _visibility_exit"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/visual_instance_3d.cpp">
            <location file="scene/3d/visual_instance_3d.cpp" line="160" column="2"/>
            <symbol>instance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;probe&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;probe&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/voxel_gi.cpp">
            <location file="scene/3d/voxel_gi.cpp" line="259" column="2"/>
            <symbol>probe</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;voxel_gi&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;voxel_gi&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/voxel_gi.cpp">
            <location file="scene/3d/voxel_gi.cpp" line="533" column="2"/>
            <symbol>voxel_gi</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="786" column="22"/>
            <symbol>alloca</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="787" column="11"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="788" column="13"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_unbind_tracker&apos; is called from destructor &apos;~XRNode3D()&apos; at line 398. Dynamic binding is not used." verbose="Virtual function &apos;_unbind_tracker&apos; is called from destructor &apos;~XRNode3D()&apos; at line 398. Dynamic binding is not used." file0="scene/3d/xr_nodes.cpp">
            <location file="scene/3d/xr_nodes.h" line="89" column="15" info="_unbind_tracker is a virtual function"/>
            <location file="scene/3d/xr_nodes.cpp" line="398" column="2" info="Calling _unbind_tracker"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="451" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update&apos; is not initialized in the constructor." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2314" column="18"/>
            <symbol>AnimationPlayer::cache_update</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update_prop&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update_prop&apos; is not initialized in the constructor." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2314" column="18"/>
            <symbol>AnimationPlayer::cache_update_prop</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update_bezier&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update_bezier&apos; is not initialized in the constructor." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2314" column="18"/>
            <symbol>AnimationPlayer::cache_update_bezier</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update_audio&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update_audio&apos; is not initialized in the constructor." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2314" column="18"/>
            <symbol>AnimationPlayer::cache_update_audio</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2315" column="2"/>
            <symbol>root</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="748" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;target&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;target&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="611" column="2"/>
            <symbol>target</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="697" column="2"/>
            <symbol>callback</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="786" column="2"/>
            <symbol>callback</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;initial_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;initial_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="787" column="2"/>
            <symbol>initial_val</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;delta_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;delta_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="788" column="2"/>
            <symbol>delta_val</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MethodTweener&apos; defines member variable with name &apos;tween&apos; also defined in its parent class &apos;Tweener&apos;." verbose="The class &apos;MethodTweener&apos; defines member variable with name &apos;tween&apos; also defined in its parent class &apos;Tweener&apos;." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="291" column="13" info="Derived variable &apos;MethodTweener::tween&apos;"/>
            <location file="scene/animation/tween.h" line="51" column="13" info="Parent variable &apos;Tweener::tween&apos;"/>
            <symbol>MethodTweener</symbol>
            <symbol>tween</symbol>
            <symbol>Tweener</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Tween&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Tween&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="183" column="2"/>
            <symbol>Tween</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;IntervalTweener&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;IntervalTweener&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="238" column="2"/>
            <symbol>IntervalTweener</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallbackTweener&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallbackTweener&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="254" column="2"/>
            <symbol>CallbackTweener</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;step_active&apos; is assigned a value that is never used." verbose="Variable &apos;step_active&apos; is assigned a value that is never used." cwe="563" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="321" column="19"/>
            <symbol>step_active</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="106" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="107" column="4"/>
            <symbol>type_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="108" column="4"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scene_file_path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scene_file_path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="110" column="4"/>
            <symbol>scene_file_path</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;live_edit_root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;live_edit_root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="160" column="3"/>
            <symbol>live_edit_root</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.cpp" line="321" column="2"/>
            <symbol>id</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneDebuggerObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneDebuggerObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="81" column="2"/>
            <symbol>SceneDebuggerObject</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneDebuggerTree&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneDebuggerTree&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="121" column="2"/>
            <symbol>SceneDebuggerTree</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeHSV&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeHSV&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="76" column="2"/>
            <symbol>ColorModeHSV</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeRGB&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeRGB&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="95" column="2"/>
            <symbol>ColorModeRGB</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeRAW&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeRAW&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="116" column="2"/>
            <symbol>ColorModeRAW</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeOKHSL&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeOKHSL&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="137" column="2"/>
            <symbol>ColorModeOKHSL</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preset_color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preset_color&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="2175" column="2"/>
            <symbol>preset_color</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;AcceptDialog()&apos; at line 415. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;AcceptDialog()&apos; at line 415. Dynamic binding is not used." file0="scene/gui/dialogs.cpp">
            <location file="scene/gui/dialogs.h" line="76" column="15" info="ok_pressed is a virtual function"/>
            <location file="scene/gui/dialogs.cpp" line="126" column="2" info="Calling ok_pressed"/>
            <location file="scene/gui/dialogs.cpp" line="415" column="65" info="Calling _ok_pressed"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="scene/gui/item_list.cpp">
            <location file="scene/gui/item_list.cpp" line="1270" column="11" info="Second condition"/>
            <location file="scene/gui/item_list.cpp" line="1266" column="11" info="First condition"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text_rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text_rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/label.cpp">
            <location file="scene/gui/label.cpp" line="1064" column="2"/>
            <symbol>text_rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text_rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text_rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/line_edit.cpp">
            <location file="scene/gui/line_edit.cpp" line="2661" column="2"/>
            <symbol>text_rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/menu_bar.cpp">
            <location file="scene/gui/menu_bar.h" line="60" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Menu&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Menu&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/menu_bar.cpp">
            <location file="scene/gui/menu_bar.h" line="59" column="3"/>
            <symbol>Menu</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;style&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;style&apos;. The initialized value is overwritten before it is read." cwe="563" file0="scene/gui/menu_bar.cpp">
            <location file="scene/gui/menu_bar.cpp" line="461" column="10" info="style is overwritten"/>
            <location file="scene/gui/menu_bar.cpp" line="456" column="22" info="style is initialized"/>
            <symbol>style</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/scroll_bar.cpp">
            <location file="scene/gui/scroll_bar.cpp" line="651" column="2"/>
            <symbol>orientation</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/slider.cpp">
            <location file="scene/gui/slider.cpp" line="398" column="2"/>
            <symbol>orientation</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;get_minimum_size&apos; is called from constructor &apos;TabBar()&apos; at line 1701. Dynamic binding is not used." verbose="Virtual function &apos;get_minimum_size&apos; is called from constructor &apos;TabBar()&apos; at line 1701. Dynamic binding is not used." file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.h" line="244" column="8" info="get_minimum_size is a virtual function"/>
            <location file="scene/gui/tab_bar.cpp" line="1701" column="35" info="Calling get_minimum_size"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.cpp" line="1163" column="51"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_container.cpp">
            <location file="scene/gui/tab_container.cpp" line="453" column="85"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_container.cpp">
            <location file="scene/gui/tab_container.cpp" line="482" column="86"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/tree.cpp">
            <location file="scene/gui/tree.h" line="142" column="2"/>
            <symbol>TreeItem</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/gui/view_panner.cpp">
            <location file="scene/gui/view_panner.cpp" line="161" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zoom_factor&apos; is assigned a value that is never used." verbose="Variable &apos;zoom_factor&apos; is assigned a value that is never used." cwe="563" file0="scene/gui/view_panner.cpp">
            <location file="scene/gui/view_panner.cpp" line="48" column="18"/>
            <symbol>zoom_factor</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zoom_factor&apos; is assigned a value that is never used." verbose="Variable &apos;zoom_factor&apos; is assigned a value that is never used." cwe="563" file0="scene/gui/view_panner.cpp">
            <location file="scene/gui/view_panner.cpp" line="79" column="18"/>
            <symbol>zoom_factor</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_item&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_item&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_item.cpp">
            <location file="scene/main/canvas_item.cpp" line="1482" column="2"/>
            <symbol>canvas_item</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_texture&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_texture&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_item.cpp">
            <location file="scene/main/canvas_item.cpp" line="1638" column="2"/>
            <symbol>canvas_texture</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_layer.cpp">
            <location file="scene/main/canvas_layer.cpp" line="364" column="2"/>
            <symbol>canvas</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;client&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;client&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/http_request.cpp">
            <location file="scene/main/http_request.cpp" line="662" column="2"/>
            <symbol>client</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_mode&apos; can be reduced." verbose="The scope of the variable &apos;encode_mode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/main/multiplayer_api.cpp">
            <location file="scene/main/multiplayer_api.cpp" line="78" column="10"/>
            <symbol>encode_mode</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;BoxShape3D()&apos; at line 99. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;BoxShape3D()&apos; at line 99. Dynamic binding is not used." file0="scene/resources/box_shape_3d.cpp">
            <location file="scene/resources/box_shape_3d.h" line="47" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/box_shape_3d.cpp" line="82" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/box_shape_3d.cpp" line="99" column="2" info="Calling set_size"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;camera_attributes&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;camera_attributes&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.cpp" line="134" column="2"/>
            <symbol>camera_attributes</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 303. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 303. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="94" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="228" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="303" column="2" info="Calling set_auto_exposure_min_sensitivity"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 304. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 304. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="94" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="237" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="304" column="2" info="Calling set_auto_exposure_max_sensitivity"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 495. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 495. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="145" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="422" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="495" column="2" info="Calling set_auto_exposure_min_exposure_value"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 496. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 496. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="145" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="431" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="496" column="2" info="Calling set_auto_exposure_max_exposure_value"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CapsuleShape3D()&apos; at line 124. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CapsuleShape3D()&apos; at line 124. Dynamic binding is not used." file0="scene/resources/capsule_shape_3d.cpp">
            <location file="scene/resources/capsule_shape_3d.h" line="44" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/capsule_shape_3d.cpp" line="124" column="2" info="Calling _update_shape"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/concave_polygon_shape_3d.cpp">
            <location file="scene/resources/concave_polygon_shape_3d.h" line="54" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/concave_polygon_shape_3d.cpp">
            <location file="scene/resources/concave_polygon_shape_3d.h" line="55" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;position&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;position&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="67" column="4"/>
            <symbol>position</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;left_tangent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;left_tangent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="68" column="4"/>
            <symbol>left_tangent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;right_tangent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;right_tangent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="69" column="4"/>
            <symbol>right_tangent</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Point&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Point&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="62" column="3"/>
            <symbol>Point</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CylinderShape3D()&apos; at line 109. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CylinderShape3D()&apos; at line 109. Dynamic binding is not used." file0="scene/resources/cylinder_shape_3d.cpp">
            <location file="scene/resources/cylinder_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/cylinder_shape_3d.cpp" line="109" column="2" info="Calling _update_shape"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." cwe="563" file0="scene/resources/default_theme/default_theme.cpp">
            <location file="scene/resources/default_theme/default_theme.cpp" line="92" column="6" info="img is overwritten"/>
            <location file="scene/resources/default_theme/default_theme.cpp" line="79" column="17" info="img is initialized"/>
            <symbol>img</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="65" column="4"/>
            <symbol>text</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;jst_flags&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;jst_flags&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="68" column="4"/>
            <symbol>jst_flags</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;brk_flags&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;brk_flags&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="69" column="4"/>
            <symbol>brk_flags</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;direction&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;direction&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="70" column="4"/>
            <symbol>direction</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="71" column="4"/>
            <symbol>orientation</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;HeightMapShape3D()&apos; at line 204. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;HeightMapShape3D()&apos; at line 204. Dynamic binding is not used." file0="scene/resources/height_map_shape_3d.cpp">
            <location file="scene/resources/height_map_shape_3d.h" line="47" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/height_map_shape_3d.cpp" line="204" column="2" info="Calling _update_shape"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" file0="scene/resources/importer_mesh.cpp">
            <location file="scene/resources/importer_mesh.cpp" line="331" column="94"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;multimesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;multimesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/multimesh.cpp">
            <location file="scene/resources/multimesh.cpp" line="364" column="2"/>
            <symbol>multimesh</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_vertex_count&apos; can be reduced." verbose="The scope of the variable &apos;current_vertex_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/resources/navigation_mesh_source_geometry_data_3d.cpp">
            <location file="scene/resources/navigation_mesh_source_geometry_data_3d.cpp" line="53" column="6"/>
            <symbol>current_vertex_count</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="110" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="497" column="48"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;state&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;state&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="1965" column="2"/>
            <symbol>state</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;pending_add&apos; is always true" verbose="Condition &apos;pending_add&apos; is always true" cwe="571" file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="387" column="11" info="Condition &apos;pending_add&apos; is always true"/>
            <location file="scene/resources/packed_scene.cpp" line="363" column="26" info="Assignment &apos;pending_add=true&apos;, assigned value is 1"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;size&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/rectangle_shape_2d.cpp">
            <location file="scene/resources/rectangle_shape_2d.cpp" line="105" column="2"/>
            <symbol>size</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/resource_format_text.cpp">
            <location file="scene/resources/resource_format_text.cpp" line="998" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/segment_shape_2d.cpp">
            <location file="scene/resources/segment_shape_2d.cpp" line="97" column="2"/>
            <symbol>a</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SeparationRayShape3D()&apos; at line 90. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SeparationRayShape3D()&apos; at line 90. Dynamic binding is not used." file0="scene/resources/separation_ray_shape_3d.cpp">
            <location file="scene/resources/separation_ray_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/separation_ray_shape_3d.cpp" line="90" column="2" info="Calling _update_shape"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;shape&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;shape&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/shape_2d.cpp">
            <location file="scene/resources/shape_2d.cpp" line="123" column="2"/>
            <symbol>shape</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;jiggle_data_chain&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;jiggle_data_chain&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/skeleton_modification_2d_jiggle.cpp">
            <location file="scene/resources/skeleton_modification_2d_jiggle.cpp" line="559" column="2"/>
            <symbol>jiggle_data_chain</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;gravity&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;gravity&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/skeleton_modification_2d_jiggle.cpp">
            <location file="scene/resources/skeleton_modification_2d_jiggle.cpp" line="564" column="2"/>
            <symbol>gravity</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;physical_bone_chain&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;physical_bone_chain&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/skeleton_modification_2d_physicalbones.cpp">
            <location file="scene/resources/skeleton_modification_2d_physicalbones.cpp" line="291" column="2"/>
            <symbol>physical_bone_chain</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SphereShape3D()&apos; at line 86. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SphereShape3D()&apos; at line 86. Dynamic binding is not used." file0="scene/resources/sphere_shape_3d.cpp">
            <location file="scene/resources/sphere_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/sphere_shape_3d.cpp" line="69" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/sphere_shape_3d.cpp" line="86" column="2" info="Calling set_radius"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/text_line.cpp">
            <location file="scene/resources/text_line.cpp" line="454" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/text_line.cpp">
            <location file="scene/resources/text_line.cpp" line="464" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/resources/tile_set.cpp">
            <location file="scene/resources/tile_set.cpp" line="3612" column="9"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;tad&apos; can be declared with const" verbose="Variable &apos;tad&apos; can be declared with const" cwe="398" file0="scene/resources/tile_set.cpp">
            <location file="scene/resources/tile_set.cpp" line="4264" column="24" info="Variable &apos;tad&apos; can be declared with const"/>
            <symbol>tad</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/world_2d.cpp">
            <location file="scene/resources/world_2d.cpp" line="95" column="2"/>
            <symbol>canvas</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/world_3d.cpp">
            <location file="scene/resources/world_3d.cpp" line="158" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;WorldBoundaryShape3D()&apos; at line 88. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;WorldBoundaryShape3D()&apos; at line 88. Dynamic binding is not used." file0="scene/resources/world_boundary_shape_3d.cpp">
            <location file="scene/resources/world_boundary_shape_3d.h" line="42" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/world_boundary_shape_3d.cpp" line="71" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/world_boundary_shape_3d.cpp" line="88" column="2" info="Calling set_plane"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SceneStringNames::free&apos;" verbose="Unused private function: &apos;SceneStringNames::free&apos;" cwe="398" file0="scene/scene_string_names.cpp">
            <location file="scene/scene_string_names.h" line="44" column="14"/>
            <symbol>SceneStringNames::free</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_estimate_cost&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_estimate_cost&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/scene_string_names.cpp">
            <location file="scene/scene_string_names.cpp" line="36" column="2"/>
            <symbol>_estimate_cost</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.cpp" line="149" column="19"/>
            <symbol>AudioDriverDummy::channels</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectAmplifyInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectAmplifyInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_amplify.cpp">
            <location file="servers/audio/effects/audio_effect_amplify.h" line="38" column="1"/>
            <symbol>AudioEffectAmplifyInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectChorusInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectChorusInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_chorus.cpp">
            <location file="servers/audio/effects/audio_effect_chorus.h" line="38" column="1"/>
            <symbol>AudioEffectChorusInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectCompressorInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectCompressorInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_compressor.cpp">
            <location file="servers/audio/effects/audio_effect_compressor.h" line="38" column="1"/>
            <symbol>AudioEffectCompressorInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectDelayInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectDelayInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_delay.cpp">
            <location file="servers/audio/effects/audio_effect_delay.h" line="38" column="1"/>
            <symbol>AudioEffectDelayInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectDistortionInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectDistortionInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_distortion.cpp">
            <location file="servers/audio/effects/audio_effect_distortion.h" line="38" column="1"/>
            <symbol>AudioEffectDistortionInstance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mode&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mode&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/audio/effects/audio_effect_filter.cpp">
            <location file="servers/audio/effects/audio_effect_filter.cpp" line="168" column="2"/>
            <symbol>mode</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectLimiterInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectLimiterInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_limiter.cpp">
            <location file="servers/audio/effects/audio_effect_limiter.h" line="38" column="1"/>
            <symbol>AudioEffectLimiterInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectPhaserInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectPhaserInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_phaser.cpp">
            <location file="servers/audio/effects/audio_effect_phaser.h" line="38" column="1"/>
            <symbol>AudioEffectPhaserInstance</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SMBPitchShift::gSynFreq&apos; is not initialized in the constructor." verbose="Member variable &apos;SMBPitchShift::gSynFreq&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.h" line="58" column="2"/>
            <symbol>SMBPitchShift::gSynFreq</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SMBPitchShift::gSynMagn&apos; is not initialized in the constructor." verbose="Member variable &apos;SMBPitchShift::gSynMagn&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.h" line="58" column="2"/>
            <symbol>SMBPitchShift::gSynMagn</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectPitchShiftInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectPitchShiftInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.h" line="73" column="1"/>
            <symbol>AudioEffectPitchShiftInstance</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wr&apos; can be reduced." verbose="The scope of the variable &apos;wr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="8"/>
            <symbol>wr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wi&apos; can be reduced." verbose="The scope of the variable &apos;wi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="12"/>
            <symbol>wi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg&apos; can be reduced." verbose="The scope of the variable &apos;arg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="16"/>
            <symbol>arg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ur&apos; can be reduced." verbose="The scope of the variable &apos;ur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="242" column="16"/>
            <symbol>ur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ui&apos; can be reduced." verbose="The scope of the variable &apos;ui&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="242" column="20"/>
            <symbol>ui</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;le2&apos; can be reduced." verbose="The scope of the variable &apos;le2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="243" column="23"/>
            <symbol>le2</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;indata&apos; can be declared with const" verbose="Parameter &apos;indata&apos; can be declared with const" cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="77" column="130" info="Parameter &apos;indata&apos; can be declared with const"/>
            <symbol>indata</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectRecordInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectRecordInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.h" line="44" column="1"/>
            <symbol>AudioEffectRecordInstance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.cpp" line="290" column="2"/>
            <symbol>format</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectSpectrumAnalyzerInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectSpectrumAnalyzerInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.h" line="38" column="1"/>
            <symbol>AudioEffectSpectrumAnalyzerInstance</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wr&apos; can be reduced." verbose="The scope of the variable &apos;wr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="8"/>
            <symbol>wr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wi&apos; can be reduced." verbose="The scope of the variable &apos;wi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="12"/>
            <symbol>wi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg&apos; can be reduced." verbose="The scope of the variable &apos;arg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="16"/>
            <symbol>arg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ur&apos; can be reduced." verbose="The scope of the variable &apos;ur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="48" column="16"/>
            <symbol>ur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ui&apos; can be reduced." verbose="The scope of the variable &apos;ui&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="48" column="20"/>
            <symbol>ui</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;le2&apos; can be reduced." verbose="The scope of the variable &apos;le2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="49" column="23"/>
            <symbol>le2</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_src&apos; can be declared with const" verbose="Parameter &apos;p_src&apos; can be declared with const" cwe="398" file0="servers/audio/effects/reverb_filter.cpp">
            <location file="servers/audio/effects/reverb_filter.cpp" line="57" column="29" info="Parameter &apos;p_src&apos; can be declared with const"/>
            <symbol>p_src</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CameraFeed&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CameraFeed&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/camera/camera_feed.cpp">
            <location file="servers/camera/camera_feed.h" line="97" column="2"/>
            <symbol>CameraFeed</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;length&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;length&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="218" column="62"/>
            <symbol>length</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="259" column="3"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="260" column="3"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;n&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;n&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="261" column="3"/>
            <symbol>n</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_area_2d.cpp" line="36" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_area_2d.cpp" line="43" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotSeparationRayShape2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotSeparationRayShape2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="218" column="17"/>
            <symbol>GodotSeparationRayShape2D</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_body_2d.h" line="117" column="18"/>
            <symbol>AreaCMP</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="363" column="3"/>
            <symbol>margin_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="364" column="3"/>
            <symbol>margin_B</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;motion_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;motion_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="369" column="3"/>
            <symbol>motion_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;motion_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;motion_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="370" column="3"/>
            <symbol>motion_B</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;anchor_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;anchor_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="217" column="2"/>
            <symbol>anchor_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;A_groove_1&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;A_groove_1&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="373" column="2"/>
            <symbol>A_groove_1</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;anchor_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;anchor_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="483" column="2"/>
            <symbol>anchor_A</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="servers/physics_2d/godot_shape_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.cpp" line="674" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="servers/physics_2d/godot_shape_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.cpp" line="906" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;body_linear_velocity_sleep_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;body_linear_velocity_sleep_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="1219" column="2"/>
            <symbol>body_linear_velocity_sleep_threshold</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!did_collide&apos; is always true" verbose="Condition &apos;!did_collide&apos; is always true" cwe="571" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="675" column="10" info="Condition &apos;!did_collide&apos; is always true"/>
            <location file="servers/physics_2d/godot_space_2d.cpp" line="664" column="25" info="Assignment &apos;did_collide=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;did_collide&apos; is always false" verbose="Condition &apos;did_collide&apos; is always false" cwe="570" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="686" column="10" info="Condition &apos;did_collide&apos; is always false"/>
            <location file="servers/physics_2d/godot_space_2d.cpp" line="664" column="25" info="Assignment &apos;did_collide=false&apos;, assigned value is 0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="203" column="3"/>
            <symbol>GJK::m_simplices</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="203" column="3"/>
            <symbol>GJK::m_free</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="593" column="4"/>
            <symbol>EPA::m_result</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="593" column="4"/>
            <symbol>EPA::m_fc_store</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;t&lt;=0&apos; is always true" verbose="Condition &apos;t&lt;=0&apos; is always true" cwe="571" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="441" column="14" info="Condition &apos;t&lt;=0&apos; is always true"/>
            <location file="servers/physics_3d/gjk_epa.cpp" line="440" column="9" info="Assuming that condition &apos;t&gt;=1&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ns&apos; can be reduced." verbose="The scope of the variable &apos;ns&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="248" column="15"/>
            <symbol>ns</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valid&apos; can be reduced." verbose="The scope of the variable &apos;valid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="682" column="16"/>
            <symbol>valid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="38" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="45" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="52" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.h" line="234" column="17"/>
            <symbol>AreaCMP</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotSoftBodyShape3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotSoftBodyShape3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.h" line="272" column="2"/>
            <symbol>GodotSoftBodyShape3D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="761" column="3"/>
            <symbol>margin_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="762" column="3"/>
            <symbol>margin_B</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;edges_start_A&apos; can be declared with const" verbose="Variable &apos;edges_start_A&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1339" column="6" info="Variable &apos;edges_start_A&apos; can be declared with const"/>
            <symbol>edges_start_A</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1763" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;edges_end_A&apos; can be declared with const" verbose="Variable &apos;edges_end_A&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1340" column="6" info="Variable &apos;edges_end_A&apos; can be declared with const"/>
            <symbol>edges_end_A</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="2178" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1022" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1505" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;vertex[3]&apos; accessed at index -1, which is out of bounds." verbose="Array &apos;vertex[3]&apos; accessed at index -1, which is out of bounds." cwe="786" file0="servers/physics_3d/godot_shape_3d.cpp">
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1200" column="15" info="Negative array index"/>
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1194" column="14" info="Assuming condition is false"/>
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1188" column="26" info="Assignment &apos;vert_support_idx=-1&apos;, assigned value is -1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="591" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="591" column="14"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lr&apos; can be reduced." verbose="The scope of the variable &apos;lr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="722" column="8"/>
            <symbol>lr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ar&apos; can be reduced." verbose="The scope of the variable &apos;ar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="723" column="6"/>
            <symbol>ar</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;br&apos; can be reduced." verbose="The scope of the variable &apos;br&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="723" column="10"/>
            <symbol>br</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;link_num&apos; can be reduced." verbose="The scope of the variable &apos;link_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="727" column="40"/>
            <symbol>link_num</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;body_linear_velocity_sleep_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;body_linear_velocity_sleep_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_space_3d.cpp">
            <location file="servers/physics_3d/godot_space_3d.cpp" line="1253" column="2"/>
            <symbol>body_linear_velocity_sleep_threshold</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;profile_begtime&apos; is assigned a value that is never used." verbose="Variable &apos;profile_begtime&apos; is assigned a value that is never used." cwe="563" file0="servers/physics_3d/godot_step_3d.cpp">
            <location file="servers/physics_3d/godot_step_3d.cpp" line="402" column="19"/>
            <symbol>profile_begtime</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbAFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbAFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp" line="59" column="2"/>
            <symbol>m_rbAFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbBFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbBFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp" line="60" column="2"/>
            <symbol>m_rbBFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbAFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbAFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_hinge_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_hinge_joint_3d.cpp" line="57" column="2"/>
            <symbol>m_rbAFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbBFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbBFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_hinge_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_hinge_joint_3d.cpp" line="58" column="2"/>
            <symbol>m_rbBFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_pivotInA&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_pivotInA&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_pin_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_pin_joint_3d.cpp" line="173" column="2"/>
            <symbol>m_pivotInA</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_pivotInB&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_pivotInB&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_pin_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_pin_joint_3d.cpp" line="174" column="2"/>
            <symbol>m_pivotInB</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::radius_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::radius_cache&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="96" column="3"/>
            <symbol>Light::radius_cache</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandNinePatch::margin&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandNinePatch::margin&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="222" column="4"/>
            <symbol>CommandNinePatch::margin</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandPrimitive::point_count&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandPrimitive::point_count&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="247" column="4"/>
            <symbol>CommandPrimitive::point_count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;color&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="99" column="4"/>
            <symbol>color</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;final_modulate&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;final_modulate&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="454" column="4"/>
            <symbol>final_modulate</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cull_cache&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cull_cache&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="500" column="4"/>
            <symbol>cull_cache</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;state_uniform&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;state_uniform&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/cluster_builder_rd.cpp">
            <location file="servers/rendering/renderer_rd/cluster_builder_rd.cpp" line="565" column="2"/>
            <symbol>state_uniform</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.cpp" line="110" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.cpp" line="315" column="2"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BokehDOF&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BokehDOF&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.h" line="116" column="2"/>
            <symbol>BokehDOF</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CopyEffects&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CopyEffects&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.h" line="320" column="2"/>
            <symbol>CopyEffects</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="62" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="91" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="345" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="396" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="433" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="472" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="511" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="548" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="610" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="639" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="680" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="715" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="769" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="840" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="876" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="907" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="943" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="1155" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="1198" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/effects/fsr.cpp" line="83" column="2"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;context&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;context&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.h" line="103" column="4"/>
            <symbol>context</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;buffer_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;buffer_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.h" line="104" column="4"/>
            <symbol>buffer_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="187" column="4"/>
            <symbol>format</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format_srgb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format_srgb&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="188" column="4"/>
            <symbol>format_srgb</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_r&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_r&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="189" column="4"/>
            <symbol>swizzle_r</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_g&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_g&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="190" column="4"/>
            <symbol>swizzle_g</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="191" column="4"/>
            <symbol>swizzle_b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="192" column="4"/>
            <symbol>swizzle_a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="377" column="6"/>
            <symbol>rid</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.cpp" line="167" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.cpp" line="203" column="3"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;LuminanceBuffers&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;LuminanceBuffers&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.h" line="94" column="2"/>
            <symbol>LuminanceBuffers</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Luminance&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Luminance&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.h" line="114" column="2"/>
            <symbol>Luminance</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RoughnessLimiter::push_constant&apos; is not initialized in the constructor." verbose="Member variable &apos;RoughnessLimiter::push_constant&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/effects/roughness_limiter.cpp">
            <location file="servers/rendering/renderer_rd/effects/roughness_limiter.cpp" line="37" column="19"/>
            <symbol>RoughnessLimiter::push_constant</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/ss_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="667" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/ss_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="1065" column="2"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;b&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;b&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/renderer_rd/effects/ss_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="83" column="7" info="b is overwritten"/>
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="80" column="11" info="b is initialized"/>
            <symbol>b</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;spmap&apos; can be declared with const" verbose="Variable &apos;spmap&apos; can be declared with const" cwe="398" file0="servers/rendering/renderer_rd/effects/ss_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="82" column="9" info="Variable &apos;spmap&apos; can be declared with const"/>
            <symbol>spmap</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/taa.cpp">
            <location file="servers/rendering/renderer_rd/effects/taa.cpp" line="76" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/tone_mapper.cpp">
            <location file="servers/rendering/renderer_rd/effects/tone_mapper.cpp" line="90" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/tone_mapper.cpp">
            <location file="servers/rendering/renderer_rd/effects/tone_mapper.cpp" line="186" column="2"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;sdfgi_ray_count&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;sdfgi_ray_count&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="3342" column="2"/>
            <symbol>sdfgi_ray_count</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;half_size&apos; is always true" verbose="Condition &apos;half_size&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="2158" column="7" info="Condition &apos;half_size&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="2155" column="20" info="Assignment &apos;half_size=true&apos;, assigned value is 1"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;probe_half_size&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;probe_half_size&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="1200" column="19" info="probe_half_size is overwritten"/>
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="1199" column="27" info="probe_half_size is initialized"/>
            <symbol>probe_half_size</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="2483" column="19"/>
            <symbol>cc</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/environment/sky.cpp">
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="216" column="2"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyRD::sky_scene_state&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyRD::sky_scene_state&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/environment/sky.cpp">
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="721" column="8"/>
            <symbol>SkyRD::sky_scene_state</symbol>
        </error>
        <error id="duplicateAssignExpression" severity="style" msg="Same expression used in consecutive assignments of &apos;w&apos; and &apos;h&apos;." verbose="Finding variables &apos;w&apos; and &apos;h&apos; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="servers/rendering/renderer_rd/environment/sky.cpp">
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="1625" column="13"/>
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="1625" column="37"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GeometryInstanceForwardClustered::lightmap_slice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;GeometryInstanceForwardClustered::lightmap_slice_index&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="473" column="3"/>
            <symbol>GeometryInstanceForwardClustered::lightmap_slice_index</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;render_pass_uniform_set&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;render_pass_uniform_set&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="217" column="4"/>
            <symbol>render_pass_uniform_set</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;uv_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;uv_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="219" column="4"/>
            <symbol>uv_offset</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GeometryInstanceForwardMobile::lightmap_slice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;GeometryInstanceForwardMobile::lightmap_slice_index&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="501" column="3"/>
            <symbol>GeometryInstanceForwardMobile::lightmap_slice_index</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;render_pass_uniform_set&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;render_pass_uniform_set&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="182" column="4"/>
            <symbol>render_pass_uniform_set</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;uv_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;uv_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="184" column="4"/>
            <symbol>uv_offset</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_render_buffers_get_color_format&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2784. Dynamic binding is not used." verbose="Virtual function &apos;_render_buffers_get_color_format&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2784. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="357" column="25" info="_render_buffers_get_color_format is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="2784" column="25" info="Calling _render_buffers_get_color_format"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2823. Dynamic binding is not used." verbose="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2823. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="354" column="15" info="_update_shader_quality_settings is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="2823" column="2" info="Calling _update_shader_quality_settings"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!force_alpha&apos; is always true" verbose="Condition &apos;!force_alpha&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1901" column="9" info="Condition &apos;!force_alpha&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1899" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;force_alpha&apos; is always false" verbose="Condition &apos;force_alpha&apos; is always false" cwe="570" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1904" column="9" info="Condition &apos;force_alpha&apos; is always false"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1899" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp" line="361" column="39"/>
            <symbol>ShaderData::depth_draw</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp" line="361" column="39"/>
            <symbol>ShaderData::depth_test</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererCanvasRenderRD::items&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererCanvasRenderRD::items&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="2281" column="25"/>
            <symbol>RendererCanvasRenderRD::items</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="136" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="1894" column="19"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.h" line="91" column="21" info="Shift"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.h" line="91" column="21" info="Integer overflow"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererCompositorRD::blit&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererCompositorRD::blit&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_compositor_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_compositor_rd.cpp" line="254" column="23"/>
            <symbol>RendererCompositorRD::blit</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_dynamic_gi_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1334. Dynamic binding is not used." verbose="Virtual function &apos;is_dynamic_gi_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1334. Dynamic binding is not used." file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="372" column="15" info="is_dynamic_gi_supported is a virtual function"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="1334" column="6" info="Calling is_dynamic_gi_supported"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_volumetric_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1338. Dynamic binding is not used." verbose="Virtual function &apos;is_volumetric_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1338. Dynamic binding is not used." file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="373" column="15" info="is_volumetric_supported is a virtual function"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="1338" column="6" info="Calling is_volumetric_supported"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_glow_level&apos; can be reduced." verbose="The scope of the variable &apos;max_glow_level&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="429" column="6"/>
            <symbol>max_glow_level</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightStorage::max_lights&apos; is not initialized in the constructor." verbose="Member variable &apos;LightStorage::max_lights&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="44" column="15"/>
            <symbol>LightStorage::max_lights</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightStorage::max_directional_lights&apos; is not initialized in the constructor." verbose="Member variable &apos;LightStorage::max_directional_lights&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="44" column="15"/>
            <symbol>LightStorage::max_directional_lights</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightStorage::max_reflections&apos; is not initialized in the constructor." verbose="Member variable &apos;LightStorage::max_reflections&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="44" column="15"/>
            <symbol>LightStorage::max_reflections</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;using_lightmap_array&apos; is always true" verbose="Condition &apos;using_lightmap_array&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="53" column="6" info="Condition &apos;using_lightmap_array&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="52" column="25" info="Assignment &apos;using_lightmap_array=true&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_begin&apos; can be reduced." verbose="The scope of the variable &apos;fade_begin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="807" column="9"/>
            <symbol>fade_begin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_shadow&apos; can be reduced." verbose="The scope of the variable &apos;fade_shadow&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="808" column="9"/>
            <symbol>fade_shadow</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_length&apos; can be reduced." verbose="The scope of the variable &apos;fade_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="809" column="9"/>
            <symbol>fade_length</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;should_realloc&apos; can be reduced." verbose="The scope of the variable &apos;should_realloc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="2247" column="7"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;should_realloc&apos; is assigned a value that is never used." verbose="Variable &apos;should_realloc&apos; is assigned a value that is never used." cwe="563" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="2247" column="22"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="208" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="219" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="231" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="244" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="258" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="299" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="331" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="429" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="434" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="442" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="450" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="457" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="470" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="486" column="17"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: gv.buffer_elements" verbose="Uninitialized struct member: gv.buffer_elements" cwe="457" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1651" column="45"/>
            <symbol>gv.buffer_elements</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: gv.buffer_elements" verbose="Uninitialized variable: gv.buffer_elements" cwe="457" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1651" column="45"/>
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1623" column="13" info="Assuming condition is true"/>
            <symbol>gv</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp" line="125" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp" line="1364" column="24"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/storage_rd/render_scene_data_rd.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/render_scene_data_rd.cpp" line="45" column="2"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: fnode" verbose="Possible null pointer dereference: fnode" cwe="476" file0="servers/rendering/shader_compiler.cpp">
            <location file="servers/rendering/shader_compiler.cpp" line="329" column="7" info="Null pointer dereference"/>
            <location file="servers/rendering/shader_compiler.cpp" line="317" column="21" info="Assuming condition is false"/>
            <location file="servers/rendering/shader_compiler.cpp" line="315" column="29" info="Assignment &apos;fnode=nullptr&apos;, assigned value is 0"/>
            <symbol>fnode</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;name&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;name&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/shader_compiler.cpp">
            <location file="servers/rendering/shader_compiler.cpp" line="914" column="13" info="name is overwritten"/>
            <location file="servers/rendering/shader_compiler.cpp" line="912" column="23" info="name is initialized"/>
            <symbol>name</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::completion_type&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::completion_type&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="10615" column="17"/>
            <symbol>ShaderLanguage::completion_type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::completion_base&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::completion_base&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="10615" column="17"/>
            <symbol>ShaderLanguage::completion_base</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Varying::tkpos&apos; is not initialized in the constructor." verbose="Member variable &apos;Varying::tkpos&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="655" column="4"/>
            <symbol>Varying::tkpos</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderLanguage::_lookup_next&apos;" verbose="Unused private function: &apos;ShaderLanguage::_lookup_next&apos;" cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="1012" column="7"/>
            <symbol>ShaderLanguage::_lookup_next</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;fragment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;fragment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="350" column="4"/>
            <symbol>fragment</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vertex&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vertex&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="351" column="4"/>
            <symbol>vertex</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;light&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;light&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="352" column="4"/>
            <symbol>light</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="819" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Node&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Node&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="381" column="3"/>
            <symbol>Node</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;BuiltInInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;BuiltInInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="808" column="3"/>
            <symbol>BuiltInInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ModeInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ModeInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="834" column="3"/>
            <symbol>ModeInfo</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;vn&apos; is always true" verbose="Condition &apos;vn&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4739" column="10" info="Condition &apos;vn&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;((int)tk.constant)&gt;0&apos; is always true" verbose="Condition &apos;((int)tk.constant)&gt;0&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4768" column="33" info="Condition &apos;((int)tk.constant)&gt;0&apos; is always true"/>
            <location file="servers/rendering/shader_language.cpp" line="4733" column="55" info="Assuming that condition &apos;((int)tk.constant)&lt;=0&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cnode&apos; is always true" verbose="Condition &apos;cnode&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="5611" column="12" info="Condition &apos;cnode&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cnode&apos; is always true" verbose="Condition &apos;cnode&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="6076" column="12" info="Condition &apos;cnode&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;const_node&apos; is always true" verbose="Condition &apos;const_node&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="7257" column="11" info="Condition &apos;const_node&apos; is always true"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;tk&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;tk&apos; is reassigned a value before the old one has been used." cwe="563" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="9747" column="6" info="tk is overwritten"/>
            <location file="servers/rendering/shader_language.cpp" line="8995" column="10" info="tk is assigned"/>
            <symbol>tk</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;full_def&apos; can be reduced." verbose="The scope of the variable &apos;full_def&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="7049" column="11"/>
            <symbol>full_def</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: tk.constant" verbose="Uninitialized struct member: tk.constant" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="252" column="9"/>
            <symbol>tk.constant</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: var.value" verbose="Uninitialized struct member: var.value" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="7276" column="32"/>
            <symbol>var.value</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tk.constant" verbose="Uninitialized variable: tk.constant" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="252" column="9"/>
            <symbol>tk</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;type&apos; is assigned a value that is never used." verbose="Variable &apos;type&apos; is assigned a value that is never used." cwe="563" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4880" column="16"/>
            <symbol>type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::keyword_completion_context&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::keyword_completion_context&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="10615" column="17"/>
            <symbol>ShaderLanguage::keyword_completion_context</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderLanguage::_add_global_warning&apos;" verbose="Unused private function: &apos;ShaderLanguage::_add_global_warning&apos;" cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="941" column="7"/>
            <symbol>ShaderLanguage::_add_global_warning</symbol>
        </error>
        <error id="danglingLifetime" severity="error" msg="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." verbose="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." cwe="562" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="1185" column="2"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1260" column="8" info="Variable created here."/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1265" column="25" info="Calling function &apos;preprocess&apos;, 1st argument &apos;&amp;pp_state&apos; value is lifetime=pp_state"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1265" column="25" info="Address of variable taken here."/>
        </error>
        <error id="danglingLifetime" severity="error" msg="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." verbose="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." cwe="562" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="1197" column="2"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1260" column="8" info="Variable created here."/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1190" column="6" info="Assuming condition is false"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1265" column="25" info="Calling function &apos;preprocess&apos;, 1st argument &apos;&amp;pp_state&apos; value is lifetime=pp_state"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1265" column="25" info="Address of variable taken here."/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderPreprocessor::create_define&apos;" verbose="Unused private function: &apos;ShaderPreprocessor::create_define&apos;" cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.h" line="213" column="17"/>
            <symbol>ShaderPreprocessor::create_define</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;code&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;code&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="213" column="2"/>
            <symbol>code</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;code&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;code&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="315" column="2"/>
            <symbol>code</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Tokenizer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Tokenizer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.h" line="107" column="3"/>
            <symbol>Tokenizer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CommentRemover&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CommentRemover&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.h" line="128" column="3"/>
            <symbol>CommentRemover</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1094" column="25"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1108" column="25"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1173" column="23"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1187" column="23"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1231" column="25"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/xr/xr_positional_tracker.cpp">
            <location file="servers/xr/xr_positional_tracker.cpp" line="223" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/xr/xr_positional_tracker.cpp">
            <location file="servers/xr/xr_positional_tracker.cpp" line="224" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;RenderingDeviceVulkan::DrawList::Validation&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;RenderingDeviceVulkan::DrawList::Validation&apos;" cwe="758">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="906" column="3"/>
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="880" column="3"/>
            <symbol>RenderingDeviceVulkan::DrawList::Validation</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;ProjectConverter3To4&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;ProjectConverter3To4&apos;" cwe="758">
            <location file="editor/project_converter_3_to_4.h" line="42" column="1"/>
            <location file="editor/project_converter_3_to_4.h" line="68" column="1"/>
            <symbol>ProjectConverter3To4</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GL_State&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GL_State&apos;" cwe="758">
            <location file="modules/text_server_adv/thorvg_svg_in_ot.h" line="61" column="1"/>
            <location file="modules/text_server_fb/thorvg_svg_in_ot.h" line="61" column="1"/>
            <symbol>GL_State</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;CrashHandler&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;CrashHandler&apos;" cwe="758">
            <location file="platform/linuxbsd/crash_handler_linuxbsd.h" line="34" column="1"/>
            <location file="platform/windows/crash_handler_windows.h" line="44" column="1"/>
            <symbol>CrashHandler</symbol>
        </error>
        <error id="ctuuninitvar" severity="error" msg="Using argument rt that points at uninitialized variable render_target" verbose="Using argument rt that points at uninitialized variable render_target" cwe="457">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.cpp" line="2574" column="6" info="Using argument rt"/>
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.cpp" line="2724" column="23" info="Calling function _update_render_target, 1st argument is uninitialized"/>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
