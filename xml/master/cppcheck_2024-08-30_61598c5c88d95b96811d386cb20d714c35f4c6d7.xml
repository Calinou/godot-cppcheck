<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.7"/>
    <errors>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectSettings&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectSettings&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/config/project_settings.cpp">
            <location file="core/config/project_settings.h" line="227" column="2"/>
            <symbol>ProjectSettings</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;t&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;t&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/core_bind.cpp">
            <location file="core/core_bind.cpp" line="1282" column="4" info="t is overwritten"/>
            <location file="core/core_bind.cpp" line="1275" column="4" info="t is assigned"/>
            <symbol>t</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;CoreStringNames::free&apos;" verbose="Unused private function: &apos;CoreStringNames::free&apos;" cwe="398" file0="core/core_string_names.cpp">
            <location file="core/core_string_names.h" line="41" column="14"/>
            <symbol>CoreStringNames::free</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;peer&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;peer&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/debugger/remote_debugger.cpp">
            <location file="core/debugger/remote_debugger.cpp" line="660" column="2"/>
            <symbol>peer</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~RemoteDebuggerPeerTCP()&apos; at line 92. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~RemoteDebuggerPeerTCP()&apos; at line 92. Dynamic binding is not used." file0="core/debugger/remote_debugger_peer.cpp">
            <location file="core/debugger/remote_debugger_peer.h" line="90" column="7" info="close is a virtual function"/>
            <location file="core/debugger/remote_debugger_peer.cpp" line="92" column="2" info="Calling close"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TOOLS_ENABLED;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TOOLS_ENABLED;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/extension/extension_api_dump.cpp" line="110" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;object&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;object&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/gdextension_interface.cpp">
            <location file="core/extension/gdextension_interface.cpp" line="182" column="3"/>
            <symbol>object</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;object&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;object&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/gdextension_interface.cpp">
            <location file="core/extension/gdextension_interface.cpp" line="209" column="3"/>
            <symbol>object</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallableCustomExtension&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallableCustomExtension&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/extension/gdextension_interface.cpp">
            <location file="core/extension/gdextension_interface.cpp" line="178" column="2"/>
            <symbol>CallableCustomExtension</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallableCustomExtension&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallableCustomExtension&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/extension/gdextension_interface.cpp">
            <location file="core/extension/gdextension_interface.cpp" line="205" column="2"/>
            <symbol>CallableCustomExtension</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;is_valid&apos; shadows outer function" verbose="Local variable &apos;is_valid&apos; shadows outer function" cwe="398" file0="core/extension/gdextension_interface.cpp">
            <location file="core/extension/gdextension_interface.cpp" line="114" column="20" info="Shadow variable"/>
            <location file="core/extension/gdextension_interface.cpp" line="133" column="7" info="Shadowed declaration"/>
            <symbol>is_valid</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;is_valid&apos; shadows outer function" verbose="Local variable &apos;is_valid&apos; shadows outer function" cwe="398" file0="core/extension/gdextension_interface.cpp">
            <location file="core/extension/gdextension_interface.cpp" line="150" column="20" info="Shadow variable"/>
            <location file="core/extension/gdextension_interface.cpp" line="133" column="7" info="Shadowed declaration"/>
            <symbol>is_valid</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/extension/gdextension_library_loader.cpp" line="311" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/extension/gdextension_library_loader.cpp" line="341" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CharBuffer::stack_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;CharBuffer::stack_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/file_access.cpp">
            <location file="core/io/file_access.cpp" line="362" column="17"/>
            <symbol>CharBuffer::stack_buffer</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/io/file_access_compressed.cpp">
            <location file="core/io/file_access_compressed.cpp" line="119" column="31" info="err is overwritten"/>
            <location file="core/io/file_access_compressed.cpp" line="118" column="7" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;open_internal&apos; is called from constructor &apos;FileAccessZip(const String&amp;p_path,const PackedData::PackedFile&amp;p_file)&apos; at line 344. Dynamic binding is not used." verbose="Virtual function &apos;open_internal&apos; is called from constructor &apos;FileAccessZip(const String&amp;p_path,const PackedData::PackedFile&amp;p_file)&apos; at line 344. Dynamic binding is not used." file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.h" line="88" column="16" info="open_internal is a virtual function"/>
            <location file="core/io/file_access_zip.cpp" line="344" column="2" info="Calling open_internal"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="59" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="69" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="74" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="93" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="99" column="16"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;IPAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;IPAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/io/ip_address.cpp">
            <location file="core/io/ip_address.h" line="94" column="2"/>
            <symbol>IPAddress</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDP::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDP::recv_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/packet_peer_udp.cpp">
            <location file="core/io/packet_peer_udp.cpp" line="361" column="16"/>
            <symbol>PacketPeerUDP::recv_buffer</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDP::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDP::packet_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/packet_peer_udp.cpp">
            <location file="core/io/packet_peer_udp.cpp" line="361" column="16"/>
            <symbol>PacketPeerUDP::packet_buffer</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/io/plist.cpp">
            <location file="core/io/plist.cpp" line="447" column="2"/>
            <symbol>root</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PList&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PList&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/io/plist.cpp">
            <location file="core/io/plist.h" line="75" column="2"/>
            <symbol>PList</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.h" line="125" column="1"/>
            <symbol>ResourceFormatSaverBinaryInstance</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;dst&apos; shadows outer argument" verbose="Local variable &apos;dst&apos; shadows outer argument" cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="119" column="15" info="Shadow variable"/>
            <location file="core/io/resource_format_binary.cpp" line="112" column="33" info="Shadowed declaration"/>
            <symbol>dst</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;dst&apos; shadows outer argument" verbose="Local variable &apos;dst&apos; shadows outer argument" cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="139" column="15" info="Shadow variable"/>
            <location file="core/io/resource_format_binary.cpp" line="112" column="33" info="Shadowed declaration"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dst" verbose="Uninitialized variable: dst" cwe="457" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="119" column="33"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dst" verbose="Uninitialized variable: dst" cwe="457" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="139" column="33"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;UDPServer::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;UDPServer::recv_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/udp_server.cpp">
            <location file="core/io/udp_server.cpp" line="199" column="12"/>
            <symbol>UDPServer::recv_buffer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Basis&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Basis&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/basis.cpp">
            <location file="core/math/basis.h" line="226" column="2"/>
            <symbol>Basis</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Color&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Color&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/color.cpp">
            <location file="core/math/color.h" line="270" column="2"/>
            <symbol>Color</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;x&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;x&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="398" column="4"/>
            <symbol>x</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;y&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;y&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="399" column="4"/>
            <symbol>y</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;z&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;z&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="400" column="4"/>
            <symbol>z</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;denominator&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;denominator&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="401" column="4"/>
            <symbol>denominator</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="188" column="3"/>
            <symbol>Int128</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="193" column="3"/>
            <symbol>Int128</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Rational128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Rational128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="346" column="3"/>
            <symbol>Rational128</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;++low==0&apos; is always false" verbose="Condition &apos;++low==0&apos; is always false" cwe="570" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="258" column="14" info="Condition &apos;++low==0&apos; is always false"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v00" verbose="Possible null pointer dereference: v00" cwe="476" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="966" column="2" info="Null pointer dereference"/>
            <location file="core/math/convex_hull.cpp" line="953" column="12" info="Assuming condition is false"/>
            <location file="core/math/convex_hull.cpp" line="869" column="16" info="Assignment &apos;v00=nullptr&apos;, assigned value is 0"/>
            <symbol>v00</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v10" verbose="Possible null pointer dereference: v10" cwe="476" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="967" column="2" info="Null pointer dereference"/>
            <location file="core/math/convex_hull.cpp" line="953" column="12" info="Assuming condition is false"/>
            <location file="core/math/convex_hull.cpp" line="870" column="16" info="Assignment &apos;v10=nullptr&apos;, assigned value is 0"/>
            <symbol>v10</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 1) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 1) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1814" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 2) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 2) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1814" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1814" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 4) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 4) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1814" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1832" column="4"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1862" column="4"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="331" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="384" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="438" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.h" line="475" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="869" column="22"/>
            <symbol>alloca</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="870" column="11"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="871" column="13"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Plane&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Plane&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/plane.cpp">
            <location file="core/math/plane.h" line="88" column="17"/>
            <symbol>Plane</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Projection&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Projection&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/projection.cpp">
            <location file="core/math/projection.h" line="155" column="2"/>
            <symbol>Projection</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::tnear</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::time&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::tfar</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::u&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::u&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::u</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::v&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::v&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::v</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::primID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::instID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="62" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="62" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/math/static_raycaster.h" line="53" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/math/static_raycaster.h" line="53" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;basis&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;basis&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/transform_3d.cpp">
            <location file="core/math/transform_3d.cpp" line="242" column="2"/>
            <symbol>basis</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Transform3D&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Transform3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/transform_3d.cpp">
            <location file="core/math/transform_3d.h" line="128" column="2"/>
            <symbol>Transform3D</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;TransformInterpolator::_basis_is_orthogonal_any_scale&apos;" verbose="Unused private function: &apos;TransformInterpolator::_basis_is_orthogonal_any_scale&apos;" cwe="398" file0="core/math/transform_interpolator.cpp">
            <location file="core/math/transform_interpolator.h" line="73" column="14"/>
            <symbol>TransformInterpolator::_basis_is_orthogonal_any_scale</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="186" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="287" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="388" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Vector4i&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Vector4i&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/vector4i.cpp">
            <location file="core/math/vector4i.h" line="138" column="2"/>
            <symbol>Vector4i</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;CallableCustomMethodPointerBase&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;CallableCustomMethodPointerBase&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="40" column="1"/>
            <symbol>CallableCustomMethodPointerBase</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="106" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="106" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="158" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="158" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="210" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="210" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="266" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="266" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="312" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="312" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallableCustomStaticMethodPointer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallableCustomStaticMethodPointer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="266" column="2"/>
            <symbol>CallableCustomStaticMethodPointer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallableCustomStaticMethodPointerRet&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallableCustomStaticMethodPointerRet&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="312" column="2"/>
            <symbol>CallableCustomStaticMethodPointerRet</symbol>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;return&apos; condition is always true." verbose="Identical inner &apos;return&apos; condition is always true (outer condition is &apos;*method&apos; and inner condition is &apos;*method&apos;)." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="1029" column="11" info="identical inner condition: *method"/>
            <location file="core/object/class_db.cpp" line="1028" column="17" info="outer condition: *method"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.h" line="53" column="2"/>
            <symbol>MethodDefinition</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.h" line="55" column="2"/>
            <symbol>MethodDefinition</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;class_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;class_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="96" column="3"/>
            <symbol>class_name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PlaceholderExtensionInstance&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PlaceholderExtensionInstance&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="95" column="2"/>
            <symbol>PlaceholderExtensionInstance</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="126" column="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="137" column="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="219" column="44"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/message_queue.cpp">
            <location file="core/object/message_queue.cpp" line="212" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="core/object/message_queue.cpp">
            <location file="core/object/message_queue.cpp" line="426" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="core/object/message_queue.cpp">
            <location file="core/object/message_queue.cpp" line="426" column="2"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;MethodBindVarArgT::_gen_return_type_info_impl&apos;" verbose="Unused private function: &apos;MethodBindVarArgT::_gen_return_type_info_impl&apos;" cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="244" column="22"/>
            <symbol>MethodBindVarArgT::_gen_return_type_info_impl</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;MethodBindVarArgTR::_gen_return_type_info_impl&apos;" verbose="Unused private function: &apos;MethodBindVarArgTR::_gen_return_type_info_impl&apos;" cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="286" column="22"/>
            <symbol>MethodBindVarArgTR::_gen_return_type_info_impl</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindT&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="372" column="2"/>
            <symbol>MethodBindT</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTC&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTC&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="456" column="2"/>
            <symbol>MethodBindTC</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTR&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTR&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="551" column="2"/>
            <symbol>MethodBindTR</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTRC&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTRC&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="647" column="2"/>
            <symbol>MethodBindTRC</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="713" column="2"/>
            <symbol>MethodBindTS</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTRS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTRS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="779" column="2"/>
            <symbol>MethodBindTRS</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="742" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1150" column="41"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1151" column="37"/>
            <symbol>alloca</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ObjectDB::cleanup&apos;" verbose="Unused private function: &apos;ObjectDB::cleanup&apos;" cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="1018" column="14"/>
            <symbol>ObjectDB::cleanup</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ObjectDB::setup&apos;" verbose="Unused private function: &apos;ObjectDB::setup&apos;" cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="1024" column="14"/>
            <symbol>ObjectDB::setup</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="271" column="37"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="275" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="282" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="287" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;return_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;return_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="293" column="3"/>
            <symbol>return_val</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="294" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;return_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;return_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="299" column="3"/>
            <symbol>return_val</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="300" column="3"/>
            <symbol>name</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;to_string&apos; is called from destructor &apos;~Object()&apos; at line 2084. Dynamic binding is not used." verbose="Virtual function &apos;to_string&apos; is called from destructor &apos;~Object()&apos; at line 2084. Dynamic binding is not used." file0="core/object/object.cpp">
            <location file="core/object/object.h" line="875" column="17" info="to_string is a virtual function"/>
            <location file="core/object/object.cpp" line="2084" column="25" info="Calling to_string"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PropertyInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PropertyInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="181" column="2"/>
            <symbol>PropertyInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="271" column="2"/>
            <symbol>MethodInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="279" column="2"/>
            <symbol>MethodInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Object&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Object&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="664" column="2"/>
            <symbol>Object</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Connection&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Connection&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.h" line="587" column="3"/>
            <symbol>Connection</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1904" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1927" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="2216" column="18"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_token&apos; can be declared with const" verbose="Parameter &apos;p_token&apos; can be declared with const" cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1949" column="41" info="Parameter &apos;p_token&apos; can be declared with const"/>
            <symbol>p_token</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_token&apos; can be declared with const" verbose="Parameter &apos;p_token&apos; can be declared with const" cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="1962" column="42" info="Parameter &apos;p_token&apos; can be declared with const"/>
            <symbol>p_token</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;_ObjectDebugLock&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;_ObjectDebugLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="50" column="2"/>
            <symbol>_ObjectDebugLock</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="170" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="182" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="188" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;display&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;display&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/script_language.cpp">
            <location file="core/object/script_language.h" line="320" column="4"/>
            <symbol>display</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;insert_text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;insert_text&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/script_language.cpp">
            <location file="core/object/script_language.h" line="321" column="4"/>
            <symbol>insert_text</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;theme_color_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;theme_color_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/script_language.cpp">
            <location file="core/object/script_language.h" line="324" column="4"/>
            <symbol>theme_color_name</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/worker_thread_pool.cpp">
            <location file="core/object/worker_thread_pool.cpp" line="565" column="27"/>
            <symbol>alloca</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/object/worker_thread_pool.cpp">
            <location file="core/object/worker_thread_pool.cpp" line="185" column="28"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: p1" verbose="Memory leak: p1" cwe="401" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="81" column="2"/>
            <symbol>p1</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" cwe="401" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="162" column="4"/>
            <symbol>mem</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" cwe="401" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="172" column="3"/>
            <symbol>mem</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_ptr&apos; can be declared with const" verbose="Parameter &apos;p_ptr&apos; can be declared with const" cwe="398" file0="core/os/memory.cpp">
            <location file="core/os/memory.h" line="167" column="58" info="Parameter &apos;p_ptr&apos; can be declared with const"/>
            <symbol>p_ptr</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="108" column="32" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="103" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="114" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="103" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="143" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="138" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="193" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="186" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Parser&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Parser&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/os/midi_driver.cpp">
            <location file="core/os/midi_driver.h" line="66" column="3"/>
            <symbol>Parser</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MutexLock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MutexLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/os/mutex.cpp">
            <location file="core/os/mutex.h" line="121" column="2"/>
            <symbol>MutexLock</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/node_path.cpp">
            <location file="core/string/node_path.h" line="95" column="2"/>
            <symbol>NodePath</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="92" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="179" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="181" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="182" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer that will be invalid when returning." verbose="Returning pointer that will be invalid when returning." cwe="562" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="124" column="10"/>
            <location file="core/string/ustring.cpp" line="124" column="10" info="Address of variable taken here."/>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer that will be invalid when returning." verbose="Returning pointer that will be invalid when returning." cwe="562" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="194" column="10"/>
            <location file="core/string/ustring.cpp" line="194" column="10" info="Address of variable taken here."/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Char16String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Char16String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="114" column="17"/>
            <symbol>Char16String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CharString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CharString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="155" column="17"/>
            <symbol>CharString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="491" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="492" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="493" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="497" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buffer[end]&apos; is assigned a value that is never used." verbose="Variable &apos;buffer[end]&apos; is assigned a value that is never used." cwe="563" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="1549" column="16"/>
            <symbol>buffer[end]</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buffer[end]&apos; is assigned a value that is never used." verbose="Variable &apos;buffer[end]&apos; is assigned a value that is never used." cwe="563" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="1581" column="16"/>
            <symbol>buffer[end]</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ConstIterator&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ConstIterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/array.cpp">
            <location file="core/variant/array.h" line="59" column="18"/>
            <symbol>ConstIterator</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Iterator&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Iterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/array.cpp">
            <location file="core/variant/array.h" line="86" column="18"/>
            <symbol>Iterator</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="77" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="106" column="47"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;object&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;object&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="572" column="2"/>
            <symbol>object</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="573" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Callable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Callable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.h" line="133" column="2"/>
            <symbol>Callable</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="144" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="156" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="168" column="2"/>
            <symbol>callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;binds&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;binds&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="169" column="2"/>
            <symbol>binds</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="282" column="2"/>
            <symbol>callable</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: operator" verbose="syntax error: operator" file0="core/variant/dictionary.cpp">
            <location file="core/variant/dictionary.cpp" line="102" column="48"/>
        </error>
        <error id="templateRecursion" severity="information" msg="TemplateSimplifier: max template recursion (100) reached for template &apos;_convert_array&lt;uint8_t&gt;&apos;. You might want to limit Cppcheck recursion." verbose="TemplateSimplifier: max template recursion (100) reached for template &apos;_convert_array&lt;uint8_t&gt;&apos;. You might want to limit Cppcheck recursion." file0="core/variant/variant.cpp">
            <location file="core/variant/variant.cpp" line="2196" column="57"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;array&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;array&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="230" column="4"/>
            <symbol>array</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="331" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="332" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="434" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="435" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="436" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="437" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="438" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="439" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="440" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="441" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="442" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="443" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="444" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="445" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="446" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="447" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="448" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="449" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="450" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="451" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="452" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="453" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="454" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="455" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="456" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="457" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="458" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="459" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="460" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="461" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="462" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="463" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="464" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="465" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="466" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="467" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="468" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="469" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="470" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="471" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="473" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="474" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="475" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="476" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="477" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="478" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="479" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="480" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="481" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="482" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="483" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="485" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="486" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="487" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="488" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="489" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="491" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="500" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="501" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="502" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="503" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="504" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="505" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="506" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; uint8_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; uint8_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; uint8_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; int32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; int64_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; int64_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; int64_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; float &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; float &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; float &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; double &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; double &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; double &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; String &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; String &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; String &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Vector2 &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Vector2 &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; Vector2 &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Vector3 &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Vector3 &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; Vector3 &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Color &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Color &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; Color &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Vector4 &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Vector4 &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef &lt; Vector4 &gt;</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;args&apos; can be declared with const" verbose="Variable &apos;args&apos; can be declared with const" cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="813" column="10" info="Variable &apos;args&apos; can be declared with const"/>
            <symbol>args</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;args&apos; can be declared with const" verbose="Variable &apos;args&apos; can be declared with const" cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="849" column="10" info="Variable &apos;args&apos; can be declared with const"/>
            <symbol>args</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant_call.cpp">
            <location file="core/variant/variant.h" line="229" column="18"/>
            <symbol>PackedArrayRef</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;enum_data&apos; can be declared with const" verbose="Variable &apos;enum_data&apos; can be declared with const" cwe="398" file0="core/variant/variant_call.cpp">
            <location file="core/variant/variant_call.cpp" line="1503" column="26" info="Variable &apos;enum_data&apos; can be declared with const"/>
            <symbol>enum_data</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;enum_data&apos; can be declared with const" verbose="Variable &apos;enum_data&apos; can be declared with const" cwe="398" file0="core/variant/variant_call.cpp">
            <location file="core/variant/variant_call.cpp" line="1513" column="26" info="Variable &apos;enum_data&apos; can be declared with const"/>
            <symbol>enum_data</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;variant&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;variant&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/variant_callable.cpp">
            <location file="core/variant/variant_callable.cpp" line="86" column="2"/>
            <symbol>variant</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;method&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;method&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/variant_callable.cpp">
            <location file="core/variant/variant_callable.cpp" line="87" column="2"/>
            <symbol>method</symbol>
        </error>
        <error id="templateRecursion" severity="information" msg="TemplateSimplifier: max template recursion (100) reached for template &apos;add_constructor&lt;:: RID , :: RID&gt;&apos;. You might want to limit Cppcheck recursion." verbose="TemplateSimplifier: max template recursion (100) reached for template &apos;add_constructor&lt;:: RID , :: RID&gt;&apos;. You might want to limit Cppcheck recursion." file0="core/variant/variant_construct.cpp">
            <location file="core/variant/variant_construct.cpp" line="185" column="18"/>
        </error>
        <error id="templateRecursion" severity="information" msg="TemplateSimplifier: max template recursion (100) reached for template &apos;register_op&lt;Basis , Basis , Basis&gt;&apos;. You might want to limit Cppcheck recursion." verbose="TemplateSimplifier: max template recursion (100) reached for template &apos;register_op&lt;Basis , Basis , Basis&gt;&apos;. You might want to limit Cppcheck recursion." file0="core/variant/variant_op.cpp">
            <location file="core/variant/variant_op.cpp" line="369" column="14"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/variant_parser.cpp">
            <location file="core/variant/variant_parser.cpp" line="78" column="29"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Stream::readahead_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;Stream::readahead_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/variant/variant_parser.cpp">
            <location file="core/variant/variant_parser.h" line="60" column="3"/>
            <symbol>Stream::readahead_buffer</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_parser.cpp">
            <location file="core/variant/variant_parser.cpp" line="1212" column="8" info="err is overwritten"/>
            <location file="core/variant/variant_parser.cpp" line="1174" column="11" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1242" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1249" column="9"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1242" column="2" info="p_func is overwritten"/>
            <location file="core/variant/variant_utility.cpp" line="1242" column="2" info="p_func is assigned"/>
            <symbol>p_func</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1249" column="7" info="p_func is overwritten"/>
            <location file="core/variant/variant_utility.cpp" line="1249" column="7" info="p_func is assigned"/>
            <symbol>p_func</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p_func&apos; is assigned a value that is never used." verbose="Variable &apos;p_func&apos; is assigned a value that is never used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1242" column="2"/>
            <symbol>p_func</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p_func&apos; is assigned a value that is never used." verbose="Variable &apos;p_func&apos; is assigned a value that is never used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="1249" column="7"/>
            <symbol>p_func</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 145. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 145. Dynamic binding is not used." file0="drivers/alsamidi/midi_driver_alsamidi.cpp">
            <location file="drivers/alsamidi/midi_driver_alsamidi.h" line="76" column="15" info="close is a virtual function"/>
            <location file="drivers/alsamidi/midi_driver_alsamidi.cpp" line="145" column="2" info="Calling close"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverCoreMidi()&apos; at line 130. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverCoreMidi()&apos; at line 130. Dynamic binding is not used." file0="drivers/coremidi/midi_driver_coremidi.cpp">
            <location file="drivers/coremidi/midi_driver_coremidi.h" line="63" column="15" info="close is a virtual function"/>
            <location file="drivers/coremidi/midi_driver_coremidi.cpp" line="130" column="2" info="Calling close"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;name&apos; shadows outer variable" verbose="Local variable &apos;name&apos; shadows outer variable" cwe="398" file0="drivers/coremidi/midi_driver_coremidi.cpp">
            <location file="drivers/coremidi/midi_driver_coremidi.cpp" line="91" column="10" info="Shadow variable"/>
            <location file="drivers/coremidi/midi_driver_coremidi.cpp" line="64" column="14" info="Shadowed declaration"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RenderingDeviceDriverD3D12&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RenderingDeviceDriverD3D12&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="drivers/d3d12/d3d12ma.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.h" line="1042" column="2"/>
            <symbol>RenderingDeviceDriverD3D12</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="255" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="262" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="269" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="275" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="280" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="285" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="290" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="295" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_context_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_context_driver_d3d12.cpp" line="300" column="21"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.h" line="399" column="0"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6081" column="27"/>
            <symbol>alloca</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p_layer!=0&apos; is always true" verbose="Condition &apos;p_layer!=0&apos; is always true" cwe="571" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1519" column="90" info="Condition &apos;p_layer!=0&apos; is always true"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1509" column="78" info="Assuming that condition &apos;p_layer==0&apos; is not redundant"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: last_bind" verbose="Possible null pointer dereference: last_bind" cwe="476" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4362" column="2" info="Null pointer dereference"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4304" column="20" info="Assuming condition is false"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4303" column="42" info="Assignment &apos;last_bind=nullptr&apos;, assigned value is 0"/>
            <symbol>last_bind</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: last_bind" verbose="Possible null pointer dereference: last_bind" cwe="476" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4363" column="2" info="Null pointer dereference"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4304" column="20" info="Assuming condition is false"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4303" column="42" info="Assignment &apos;last_bind=nullptr&apos;, assigned value is 0"/>
            <symbol>last_bind</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: last_bind" verbose="Possible null pointer dereference: last_bind" cwe="476" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4364" column="2" info="Null pointer dereference"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4304" column="20" info="Assuming condition is false"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4303" column="42" info="Assignment &apos;last_bind=nullptr&apos;, assigned value is 0"/>
            <symbol>last_bind</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: last_bind" verbose="Possible null pointer dereference: last_bind" cwe="476" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4365" column="2" info="Null pointer dereference"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4304" column="20" info="Assuming condition is false"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4303" column="42" info="Assignment &apos;last_bind=nullptr&apos;, assigned value is 0"/>
            <symbol>last_bind</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: last_bind" verbose="Possible null pointer dereference: last_bind" cwe="476" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4366" column="2" info="Null pointer dereference"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4304" column="20" info="Assuming condition is false"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4303" column="42" info="Assignment &apos;last_bind=nullptr&apos;, assigned value is 0"/>
            <symbol>last_bind</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="940" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="946" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="951" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="956" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="964" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1448" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1588" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1593" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1598" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1623" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1639" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1704" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1843" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2109" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2135" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2145" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2220" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2230" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2250" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2289" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2291" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2299" column="45"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2306" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2312" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2322" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2334" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2348" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2357" column="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2397" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2406" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2415" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2427" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2429" column="49"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2488" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2489" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2624" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2636" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2641" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2646" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2793" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2798" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2837" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2880" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3201" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3259" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3277" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3809" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3814" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3819" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3937" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3954" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3968" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3977" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3988" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4005" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4022" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4071" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4109" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4135" column="44"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4136" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4252" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4269" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4277" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4293" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4294" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4296" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4523" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4524" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4586" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4587" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4588" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4602" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4603" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4604" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4641" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4642" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4643" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4657" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4658" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4778" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4779" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4780" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4846" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4847" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4848" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4922" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4923" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4990" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4997" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4998" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4999" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5024" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5034" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5054" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5081" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5112" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5123" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5147" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5151" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5173" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5189" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5198" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5260" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5275" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5290" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5350" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5389" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5395" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5401" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5403" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5413" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5415" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5416" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5427" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5429" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5439" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5441" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5442" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5453" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5462" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5480" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5481" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5509" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5628" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5633" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5664" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5870" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5893" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5902" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5903" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5915" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6000" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6005" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6023" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6024" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6089" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6097" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6101" column="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6105" column="46"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6141" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6145" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6149" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6156" column="35"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;final_states&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;final_states&apos;. The initialized value is overwritten before it is read." cwe="563" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="588" column="19" info="final_states is overwritten"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="586" column="40" info="final_states is initialized"/>
            <symbol>final_states</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;initial_state&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;initial_state&apos;. The initialized value is overwritten before it is read." cwe="563" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1324" column="18" info="initial_state is overwritten"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1303" column="38" info="initial_state is initialized"/>
            <symbol>initial_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;(&amp;pipeline_desc.RasterizerState)-&gt;DepthBias&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;(&amp;pipeline_desc.RasterizerState)-&gt;DepthBias&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5699" column="47" info="(&amp;pipeline_desc.RasterizerState)-&gt;DepthBias is overwritten"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5696" column="47" info="(&amp;pipeline_desc.RasterizerState)-&gt;DepthBias is assigned"/>
            <symbol>(&amp;pipeline_desc.RasterizerState)-&gt;DepthBias</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;(&amp;pipeline_desc.RasterizerState)-&gt;DepthBiasClamp&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;(&amp;pipeline_desc.RasterizerState)-&gt;DepthBiasClamp&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5700" column="52" info="(&amp;pipeline_desc.RasterizerState)-&gt;DepthBiasClamp is overwritten"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5697" column="52" info="(&amp;pipeline_desc.RasterizerState)-&gt;DepthBiasClamp is assigned"/>
            <symbol>(&amp;pipeline_desc.RasterizerState)-&gt;DepthBiasClamp</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;(&amp;pipeline_desc.RasterizerState)-&gt;SlopeScaledDepthBias&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;(&amp;pipeline_desc.RasterizerState)-&gt;SlopeScaledDepthBias&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5701" column="58" info="(&amp;pipeline_desc.RasterizerState)-&gt;SlopeScaledDepthBias is overwritten"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="5698" column="58" info="(&amp;pipeline_desc.RasterizerState)-&gt;SlopeScaledDepthBias is assigned"/>
            <symbol>(&amp;pipeline_desc.RasterizerState)-&gt;SlopeScaledDepthBias</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;multiview_capabilities.is_supported&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;multiview_capabilities.is_supported&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6434" column="38" info="multiview_capabilities.is_supported is overwritten"/>
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6429" column="38" info="multiview_capabilities.is_supported is assigned"/>
            <symbol>multiview_capabilities.is_supported</symbol>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="1933" column="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;relocated&apos; can be reduced." verbose="The scope of the variable &apos;relocated&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="604" column="11"/>
            <symbol>relocated</symbol>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2906" column="35" info="Integer overflow"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2915" column="35" info="Integer overflow"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="3919" column="39"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;has_rs_locations&apos; is assigned a value that is never used." verbose="Variable &apos;has_rs_locations&apos; is assigned a value that is never used." cwe="563" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="4352" column="21"/>
            <symbol>has_rs_locations</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2095" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="2124" column="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6032" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/d3d12/rendering_device_driver_d3d12.cpp">
            <location file="drivers/d3d12/rendering_device_driver_d3d12.cpp" line="6039" column="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gldisplay&apos; can be reduced." verbose="The scope of the variable &apos;gldisplay&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/egl/egl_manager.cpp">
            <location file="drivers/egl/egl_manager.cpp" line="270" column="13"/>
            <symbol>gldisplay</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;glwindow&apos; can be declared with const" verbose="Variable &apos;glwindow&apos; can be declared with const" cwe="398" file0="drivers/egl/egl_manager.cpp">
            <location file="drivers/egl/egl_manager.cpp" line="343" column="12" info="Variable &apos;glwindow&apos; can be declared with const"/>
            <symbol>glwindow</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;display&apos; can be declared with const" verbose="Variable &apos;display&apos; can be declared with const" cwe="398" file0="drivers/egl/egl_manager.cpp">
            <location file="drivers/egl/egl_manager.cpp" line="349" column="13" info="Variable &apos;display&apos; can be declared with const"/>
            <symbol>display</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;has_blob_cache&apos; is always true" verbose="Condition &apos;has_blob_cache&apos; is always true" cwe="571" file0="drivers/egl/egl_manager.cpp">
            <location file="drivers/egl/egl_manager.cpp" line="113" column="6" info="Condition &apos;has_blob_cache&apos; is always true"/>
            <location file="drivers/egl/egl_manager.cpp" line="109" column="24" info="Assignment &apos;has_blob_cache=true&apos;, assigned value is 1"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::shadow_transform&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::shadow_transform&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/light_storage.h" line="111" column="2"/>
            <symbol>LightInstance::shadow_transform</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticlesShaderData::valid&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticlesShaderData::valid&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="392" column="2"/>
            <symbol>ParticlesShaderData::valid</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticlesShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticlesShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="392" column="2"/>
            <symbol>ParticlesShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticlesShaderData::uses_collision&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticlesShaderData::uses_collision&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="392" column="2"/>
            <symbol>ParticlesShaderData::uses_collision</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticlesShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticlesShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="392" column="2"/>
            <symbol>ParticlesShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticlesShaderData::userdata_count&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticlesShaderData::userdata_count&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="392" column="2"/>
            <symbol>ParticlesShaderData::userdata_count</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GeometryInstanceGLES3::lightmap_slice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;GeometryInstanceGLES3::lightmap_slice_index&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.h" line="336" column="3"/>
            <symbol>GeometryInstanceGLES3::lightmap_slice_index</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerCanvasGLES3::items&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerCanvasGLES3::items&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="2614" column="24"/>
            <symbol>RasterizerCanvasGLES3::items</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="104" column="5"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vert_id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vert_id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="105" column="5"/>
            <symbol>vert_id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;frag_id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;frag_id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="106" column="5"/>
            <symbol>frag_id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;uv_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;uv_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.h" line="581" column="4"/>
            <symbol>uv_offset</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="175" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="66" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="176" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="177" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="178" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="189" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="93" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="190" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="191" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="192" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="220" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="66" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="221" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="222" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="223" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="234" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="93" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="235" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="236" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="237" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="335" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="66" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="336" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="337" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="338" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="352" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="93" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="353" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="354" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="355" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="387" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="66" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="388" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="67" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="389" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="68" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="390" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="402" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="93" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="403" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="94" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="404" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="95" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="405" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="96" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="1997" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="2419" column="17"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.h" line="79" column="21" info="Shift"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.h" line="79" column="21" info="Integer overflow"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;has_egl&apos; is always true" verbose="Condition &apos;has_egl&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_gles3.cpp">
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="251" column="7" info="Condition &apos;has_egl&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="245" column="17" info="Assignment &apos;has_egl=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!glad_loaded&apos; is always true" verbose="Condition &apos;!glad_loaded&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_gles3.cpp">
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="251" column="18" info="Condition &apos;!glad_loaded&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="237" column="21" info="Assignment &apos;glad_loaded=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;has_egl&apos; is always true" verbose="Condition &apos;has_egl&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_gles3.cpp">
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="255" column="7" info="Condition &apos;has_egl&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="245" column="17" info="Assignment &apos;has_egl=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!glad_loaded&apos; is always true" verbose="Condition &apos;!glad_loaded&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_gles3.cpp">
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="255" column="18" info="Condition &apos;!glad_loaded&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="237" column="21" info="Assignment &apos;glad_loaded=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!glad_loaded&apos; is always true" verbose="Condition &apos;!glad_loaded&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_gles3.cpp">
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="262" column="7" info="Condition &apos;!glad_loaded&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="237" column="21" info="Assignment &apos;glad_loaded=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!glad_loaded&apos; is always true" verbose="Condition &apos;!glad_loaded&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_gles3.cpp">
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="266" column="7" info="Condition &apos;!glad_loaded&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_gles3.cpp" line="237" column="21" info="Assignment &apos;glad_loaded=false&apos;, assigned value is 0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerSceneGLES3::time&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerSceneGLES3::time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="4063" column="23"/>
            <symbol>RasterizerSceneGLES3::time</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;positional_soft_shadow_filter_set_quality&apos; is called from constructor &apos;RasterizerSceneGLES3()&apos; at line 4074. Dynamic binding is not used." verbose="Virtual function &apos;positional_soft_shadow_filter_set_quality&apos; is called from constructor &apos;RasterizerSceneGLES3()&apos; at line 4074. Dynamic binding is not used." file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.h" line="816" column="7" info="positional_soft_shadow_filter_set_quality is a virtual function"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="4074" column="2" info="Calling positional_soft_shadow_filter_set_quality"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;directional_soft_shadow_filter_set_quality&apos; is called from constructor &apos;RasterizerSceneGLES3()&apos; at line 4075. Dynamic binding is not used." verbose="Virtual function &apos;directional_soft_shadow_filter_set_quality&apos; is called from constructor &apos;RasterizerSceneGLES3()&apos; at line 4075. Dynamic binding is not used." file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.h" line="817" column="7" info="directional_soft_shadow_filter_set_quality is a virtual function"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="4075" column="2" info="Calling directional_soft_shadow_filter_set_quality"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;lightmaps_set_bicubic_filter&apos; is called from constructor &apos;RasterizerSceneGLES3()&apos; at line 4076. Dynamic binding is not used." verbose="Virtual function &apos;lightmaps_set_bicubic_filter&apos; is called from constructor &apos;RasterizerSceneGLES3()&apos; at line 4076. Dynamic binding is not used." file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.h" line="868" column="15" info="lightmaps_set_bicubic_filter is a virtual function"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="4076" column="2" info="Calling lightmaps_set_bicubic_filter"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!force_alpha&apos; is always true" verbose="Condition &apos;!force_alpha&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1431" column="9" info="Condition &apos;!force_alpha&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1429" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;force_alpha&apos; is always false" verbose="Condition &apos;force_alpha&apos; is always false" cwe="570" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1434" column="9" info="Condition &apos;force_alpha&apos; is always false"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1429" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fbo_int!=0&apos; is always true" verbose="Condition &apos;fbo_int!=0&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="2775" column="27" info="Condition &apos;fbo_int!=0&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fbo_int!=0&apos; is always true" verbose="Condition &apos;fbo_int!=0&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="2837" column="34" info="Condition &apos;fbo_int!=0&apos; is always true"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_begin&apos; can be reduced." verbose="The scope of the variable &apos;fade_begin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1854" column="9"/>
            <symbol>fade_begin</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderGLES3::feedbacks&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderGLES3::feedbacks&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/shader_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.cpp" line="762" column="14"/>
            <symbol>ShaderGLES3::feedbacks</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;should_realloc&apos; can be reduced." verbose="The scope of the variable &apos;should_realloc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/gles3/storage/light_storage.cpp">
            <location file="drivers/gles3/storage/light_storage.cpp" line="1382" column="7"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;old_key&apos; is assigned a value that is never used." verbose="Variable &apos;old_key&apos; is assigned a value that is never used." cwe="563" file0="drivers/gles3/storage/light_storage.cpp">
            <location file="drivers/gles3/storage/light_storage.cpp" line="1377" column="19"/>
            <symbol>old_key</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;should_realloc&apos; is assigned a value that is never used." verbose="Variable &apos;should_realloc&apos; is assigned a value that is never used." cwe="563" file0="drivers/gles3/storage/light_storage.cpp">
            <location file="drivers/gles3/storage/light_storage.cpp" line="1382" column="22"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2632" column="19"/>
            <symbol>CanvasShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::blend_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::blend_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2632" column="19"/>
            <symbol>CanvasShaderData::blend_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::uses_screen_texture_mipmaps&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::uses_screen_texture_mipmaps&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2632" column="19"/>
            <symbol>CanvasShaderData::uses_screen_texture_mipmaps</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2632" column="19"/>
            <symbol>CanvasShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::uses_custom0&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::uses_custom0&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2632" column="19"/>
            <symbol>CanvasShaderData::uses_custom0</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::uses_custom1&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::uses_custom1&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2632" column="19"/>
            <symbol>CanvasShaderData::uses_custom1</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::vertex_input_mask&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::vertex_input_mask&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2632" column="19"/>
            <symbol>CanvasShaderData::vertex_input_mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2800" column="16"/>
            <symbol>SkyShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2800" column="16"/>
            <symbol>SkyShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_position&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_position&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2800" column="16"/>
            <symbol>SkyShaderData::uses_position</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_half_res&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_half_res&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2800" column="16"/>
            <symbol>SkyShaderData::uses_half_res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_quarter_res&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_quarter_res&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2800" column="16"/>
            <symbol>SkyShaderData::uses_quarter_res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_light&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_light&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2800" column="16"/>
            <symbol>SkyShaderData::uses_light</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::blend_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::blend_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::blend_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::alpha_antialiasing_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::alpha_antialiasing_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::alpha_antialiasing_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::depth_draw&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::depth_draw&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::depth_draw</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::depth_test&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::depth_test</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::cull_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::cull_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::cull_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_point_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_point_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_point_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_alpha_clip&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_alpha_clip&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_alpha_clip</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_blend_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_blend_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_blend_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_depth_prepass_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_depth_prepass_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_depth_prepass_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_discard&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_discard&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_discard</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_roughness&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_roughness&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_roughness</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_normal&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_normal&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_normal</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_particle_trails&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_particle_trails&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_particle_trails</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::wireframe&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::wireframe&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::wireframe</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::unshaded&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::unshaded&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::unshaded</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_vertex&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_vertex&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_vertex</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_position&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_position&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_position</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_sss&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_sss&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_sss</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_transmittance&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_transmittance&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_transmittance</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_screen_texture_mipmaps&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_screen_texture_mipmaps&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_screen_texture_mipmaps</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_depth_texture&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_depth_texture&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_depth_texture</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_normal_texture&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_normal_texture&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_normal_texture</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_vertex_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_vertex_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_vertex_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_fragment_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_fragment_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_fragment_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::writes_modelview_or_projection&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::writes_modelview_or_projection&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::writes_modelview_or_projection</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_world_coordinates&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_world_coordinates&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_world_coordinates</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_tangent&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_tangent&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_tangent</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_color&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_color&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_color</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_uv&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_uv&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_uv</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_uv2&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_uv2&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_uv2</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom0&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom0&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_custom0</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom1&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom1&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_custom1</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom2&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom2&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_custom2</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom3&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom3&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_custom3</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_bones&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_bones&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_bones</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_weights&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_weights&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::uses_weights</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::vertex_input_mask&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::vertex_input_mask&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3073" column="18"/>
            <symbol>SceneShaderData::vertex_input_mask</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="214" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="225" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="237" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="250" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="264" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="305" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="337" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="435" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="440" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="448" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="456" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="463" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="476" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="492" column="17"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;gv&apos; can be declared with const" verbose="Variable &apos;gv&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="1804" column="34" info="Variable &apos;gv&apos; can be declared with const"/>
            <symbol>gv</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;datatype_from_value&apos; can be declared with const" verbose="Variable &apos;datatype_from_value&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2028" column="27" info="Variable &apos;datatype_from_value&apos; can be declared with const"/>
            <symbol>datatype_from_value</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: gv.buffer_elements" verbose="Uninitialized struct member: gv.buffer_elements" cwe="457" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="1797" column="45"/>
            <symbol>gv.buffer_elements</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: gv.buffer_elements" verbose="Uninitialized variable: gv.buffer_elements" cwe="457" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="1797" column="45"/>
            <location file="drivers/gles3/storage/material_storage.cpp" line="1769" column="13" info="Assuming condition is true"/>
            <symbol>gv</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="1526" column="24"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="1301" column="71"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="1415" column="71"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmtsize&apos; can be declared with const" verbose="Variable &apos;fmtsize&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="970" column="14" info="Variable &apos;fmtsize&apos; can be declared with const"/>
            <symbol>fmtsize</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;gl_type&apos; can be declared with const" verbose="Variable &apos;gl_type&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="971" column="12" info="Variable &apos;gl_type&apos; can be declared with const"/>
            <symbol>gl_type</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmt_shift&apos; can be declared with const" verbose="Variable &apos;fmt_shift&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="968" column="14" info="Variable &apos;fmt_shift&apos; can be declared with const"/>
            <symbol>fmt_shift</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;norm&apos; can be declared with const" verbose="Variable &apos;norm&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="972" column="15" info="Variable &apos;norm&apos; can be declared with const"/>
            <symbol>norm</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmtsize&apos; can be declared with const" verbose="Variable &apos;fmtsize&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="164" column="16" info="Variable &apos;fmtsize&apos; can be declared with const"/>
            <symbol>fmtsize</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmt_shift&apos; can be declared with const" verbose="Variable &apos;fmt_shift&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="162" column="16" info="Variable &apos;fmt_shift&apos; can be declared with const"/>
            <symbol>fmt_shift</symbol>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always true because &apos;else if&apos; condition is opposite to previous condition at line 368." verbose="Expression is always true because &apos;else if&apos; condition is opposite to previous condition at line 368." cwe="398" file0="drivers/gles3/storage/render_scene_buffers_gles3.cpp">
            <location file="drivers/gles3/storage/render_scene_buffers_gles3.cpp" line="374" column="14" info="else if condition is opposite to first condition"/>
            <location file="drivers/gles3/storage/render_scene_buffers_gles3.cpp" line="368" column="14" info="first condition"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 71. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 71. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="71" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 72. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 72. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="512" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="72" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 77. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 77. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="77" column="61" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 78. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 78. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="513" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="78" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 84. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 84. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="84" column="60" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 85. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 85. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="513" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="85" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 96. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 96. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="96" column="55" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 97. Dynamic binding is not used." verbose="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 97. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="514" column="15" info="texture_3d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="97" column="4" info="Calling texture_3d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 105. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 105. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="105" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 106. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 106. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="512" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="106" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 112. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 112. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="112" column="60" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 113. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 113. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="513" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="113" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 124. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 124. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="124" column="55" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 125. Dynamic binding is not used." verbose="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 125. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="514" column="15" info="texture_3d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="125" column="4" info="Calling texture_3d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 133. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 133. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="133" column="58" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 134. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 134. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="512" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="134" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 142. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 142. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="142" column="53" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 143. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 143. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="512" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="143" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 151. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 151. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="151" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 152. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 152. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="512" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="152" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 164. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 164. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="164" column="54" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 186. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 186. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="509" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="186" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_free&apos; is called from destructor &apos;~TextureStorage()&apos; at line 238. Dynamic binding is not used." verbose="Virtual function &apos;texture_free&apos; is called from destructor &apos;~TextureStorage()&apos; at line 238. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="510" column="15" info="texture_free is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="238" column="3" info="Calling texture_free"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessUnix()&apos; at line 527. Dynamic binding is not used." verbose="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessUnix()&apos; at line 527. Dynamic binding is not used." file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.h" line="67" column="16" info="change_dir is a virtual function"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="527" column="2" info="Calling change_dir"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessUnix()&apos; at line 531. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessUnix()&apos; at line 531. Dynamic binding is not used." file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.h" line="60" column="15" info="list_dir_end is a virtual function"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="531" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_dir&apos; shadows outer argument" verbose="Local variable &apos;p_dir&apos; shadows outer argument" cwe="398" file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.cpp" line="339" column="2" info="Shadow variable"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="336" column="40" info="Shadowed declaration"/>
            <symbol>p_dir</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketPosix()&apos; at line 179. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketPosix()&apos; at line 179. Dynamic binding is not used." file0="drivers/unix/net_socket_posix.cpp">
            <location file="drivers/unix/net_socket_posix.h" line="80" column="15" info="close is a virtual function"/>
            <location file="drivers/unix/net_socket_posix.cpp" line="179" column="2" info="Calling close"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IPV6_ADD_MEMBERSHIP;IPV6_JOIN_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_ADD_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IPV6_ADD_MEMBERSHIP;IPV6_JOIN_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_ADD_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="295" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IPV6_DROP_MEMBERSHIP;IPV6_LEAVE_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_DROP_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IPV6_DROP_MEMBERSHIP;IPV6_LEAVE_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_DROP_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="295" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;MSG_NOSIGNAL&apos; since the value of &apos;MSG_NOSIGNAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;MSG_NOSIGNAL&apos; since the value of &apos;MSG_NOSIGNAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="613" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIO_UDP_NETRESET;__MINGW32__;WINDOWS_ENABLED&apos; since the value of &apos;SIO_UDP_NETRESET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIO_UDP_NETRESET;__MINGW32__;WINDOWS_ENABLED&apos; since the value of &apos;SIO_UDP_NETRESET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="372" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SO_NOSIGPIPE&apos; since the value of &apos;SO_NOSIGPIPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SO_NOSIGPIPE&apos; since the value of &apos;SO_NOSIGPIPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="381" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &apos;err == 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="drivers/unix/thread_posix.cpp">
            <location file="drivers/unix/thread_posix.cpp" line="67" column="13"/>
            <location file="drivers/unix/thread_posix.cpp" line="58" column="12" info="&apos;err&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RenderingDeviceDriverVulkan&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RenderingDeviceDriverVulkan&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.h" line="677" column="2"/>
            <symbol>RenderingDeviceDriverVulkan</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;want_debug_utils&apos; is always true" verbose="Condition &apos;want_debug_utils&apos; is always true" cwe="571" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="452" column="6" info="Condition &apos;want_debug_utils&apos; is always true"/>
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="448" column="26" info="Assignment &apos;want_debug_utils=true&apos;, assigned value is 1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="977" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="984" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="990" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="995" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="1000" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="1005" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="1010" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="1015" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_context_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_context_driver_vulkan.cpp" line="1047" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1076" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1474" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1491" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1503" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1508" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1516" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1769" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1827" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1880" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1890" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1895" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1937" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="1962" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2101" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2167" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2174" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2236" column="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2267" column="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2365" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2367" column="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2474" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2498" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2533" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2582" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2592" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2769" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2770" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2960" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="2961" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3021" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3028" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3043" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3060" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3545" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3559" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3732" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3745" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3758" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3771" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3793" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3810" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3820" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3835" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3864" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3890" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3954" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3959" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3960" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3970" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3971" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3976" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3977" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4002" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4012" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4013" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4023" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4024" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4039" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4070" column="49"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4141" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4390" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4391" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4404" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4409" column="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4410" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4415" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4420" column="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4421" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4428" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4434" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4539" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4736" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4805" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4806" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4815" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4822" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="4973" column="53"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5136" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5146" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5153" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5160" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5184" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5191" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5195" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5199" column="35"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;binary_data.specialization_constants_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;binary_data.specialization_constants_count&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3196" column="45" info="binary_data.specialization_constants_count is overwritten"/>
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3123" column="46" info="binary_data.specialization_constants_count is assigned"/>
            <symbol>binary_data.specialization_constants_count</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;binary_data.set_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;binary_data.set_count&apos; is reassigned a value before the old one has been used." cwe="563" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3197" column="24" info="binary_data.set_count is overwritten"/>
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3128" column="25" info="binary_data.set_count is assigned"/>
            <symbol>binary_data.set_count</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;curr_vk_size&apos; is assigned a value that is never used." verbose="Variable &apos;curr_vk_size&apos; is assigned a value that is never used." cwe="563" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="3654" column="16"/>
            <symbol>curr_vk_size</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5056" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5057" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5059" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="5061" column="29"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;want_debug_markers&apos; is always true" verbose="Condition &apos;want_debug_markers&apos; is always true" cwe="571" file0="drivers/vulkan/rendering_device_driver_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="520" column="7" info="Condition &apos;want_debug_markers&apos; is always true"/>
            <location file="drivers/vulkan/rendering_device_driver_vulkan.cpp" line="516" column="29" info="Assignment &apos;want_debug_markers=true&apos;, assigned value is 1"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessWindows()&apos; at line 464. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessWindows()&apos; at line 464. Dynamic binding is not used." file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.h" line="64" column="15" info="list_dir_end is a virtual function"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="464" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverWinMidi()&apos; at line 94. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverWinMidi()&apos; at line 94. Dynamic binding is not used." file0="drivers/winmidi/midi_driver_winmidi.cpp">
            <location file="drivers/winmidi/midi_driver_winmidi.h" line="52" column="15" info="close is a virtual function"/>
            <location file="drivers/winmidi/midi_driver_winmidi.cpp" line="94" column="2" info="Calling close"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preview&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preview&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="80" column="4"/>
            <symbol>preview</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base_stream&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base_stream&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="81" column="4"/>
            <symbol>base_stream</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;playback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;playback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="82" column="4"/>
            <symbol>playback</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_code_complete_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1859. Dynamic binding is not used." verbose="Virtual function &apos;_code_complete_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1859. Dynamic binding is not used." file0="editor/code_editor.cpp">
            <location file="editor/code_editor.h" line="220" column="15" info="_code_complete_script is a virtual function"/>
            <location file="editor/code_editor.cpp" line="963" column="2" info="Calling _code_complete_script"/>
            <location file="editor/code_editor.cpp" line="1859" column="87" info="Calling _complete_request"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_validate_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1870. Dynamic binding is not used." verbose="Virtual function &apos;_validate_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1870. Dynamic binding is not used." file0="editor/code_editor.cpp">
            <location file="editor/code_editor.h" line="219" column="15" info="_validate_script is a virtual function"/>
            <location file="editor/code_editor.cpp" line="1518" column="2" info="Calling _validate_script"/>
            <location file="editor/code_editor.cpp" line="1870" column="62" info="Calling _text_changed_idle_timeout"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/create_dialog.cpp">
            <location file="editor/create_dialog.cpp" line="748" column="2"/>
            <symbol>base_type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preferred_search_result_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preferred_search_result_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/create_dialog.cpp">
            <location file="editor/create_dialog.cpp" line="749" column="2"/>
            <symbol>preferred_search_result_type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;source&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;source&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_debugger_node.cpp">
            <location file="editor/debugger/editor_debugger_node.h" line="94" column="4"/>
            <symbol>source</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="43" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="46" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="47" column="2"/>
            <symbol>base</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;gui_input&apos; is called from constructor &apos;EditorAudioBus(EditorAudioBuses*p_buses=nullptr,bool p_is_master=false)&apos; at line 946. Dynamic binding is not used." verbose="Virtual function &apos;gui_input&apos; is called from constructor &apos;EditorAudioBus(EditorAudioBuses*p_buses=nullptr,bool p_is_master=false)&apos; at line 946. Dynamic binding is not used." file0="editor/editor_audio_buses.cpp">
            <location file="editor/editor_audio_buses.h" line="93" column="15" info="gui_input is a virtual function"/>
            <location file="editor/editor_audio_buses.cpp" line="946" column="35" info="Calling gui_input"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AudioBusesEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AudioBusesEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_audio_buses.cpp">
            <location file="editor/editor_audio_buses.h" line="283" column="2"/>
            <symbol>AudioBusesEditorPlugin</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="editor/editor_command_palette.cpp">
            <location file="editor/editor_command_palette.cpp" line="239" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorHelpBitTooltip&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorHelpBitTooltip&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_help.cpp">
            <location file="editor/editor_help.h" line="345" column="2"/>
            <symbol>EditorHelpBitTooltip</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!codeblock_printed&apos; is always true" verbose="Condition &apos;!codeblock_printed&apos; is always true" cwe="571" file0="editor/editor_help.cpp">
            <location file="editor/editor_help.cpp" line="2678" column="8" info="Condition &apos;!codeblock_printed&apos; is always true"/>
            <location file="editor/editor_help.cpp" line="2662" column="29" info="Assignment &apos;codeblock_printed=false&apos;, assigned value is 0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;has_prev_text&apos; is assigned a value that is never used." verbose="Variable &apos;has_prev_text&apos; is assigned a value that is never used." cwe="563" file0="editor/editor_help.cpp">
            <location file="editor/editor_help.cpp" line="3544" column="17"/>
            <symbol>has_prev_text</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!codeblock_printed&apos; is always true" verbose="Condition &apos;!codeblock_printed&apos; is always true" cwe="571" file0="editor/editor_help.cpp">
            <location file="editor/editor_help.cpp" line="2665" column="8" info="Condition &apos;!codeblock_printed&apos; is always true"/>
            <location file="editor/editor_help.cpp" line="2662" column="29" info="Assignment &apos;codeblock_printed=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!codeblock_printed&apos; is always true" verbose="Condition &apos;!codeblock_printed&apos; is always true" cwe="571" file0="editor/editor_help.cpp">
            <location file="editor/editor_help.cpp" line="2672" column="8" info="Condition &apos;!codeblock_printed&apos; is always true"/>
            <location file="editor/editor_help.cpp" line="2662" column="29" info="Assignment &apos;codeblock_printed=false&apos;, assigned value is 0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MemberMatch &lt; DocData :: MethodDoc &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MemberMatch &lt; DocData :: MethodDoc &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_help_search.cpp">
            <location file="editor/editor_help_search.h" line="128" column="3"/>
            <symbol>MemberMatch &lt; DocData :: MethodDoc &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MemberMatch &lt; DocData :: ConstantDoc &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MemberMatch &lt; DocData :: ConstantDoc &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_help_search.cpp">
            <location file="editor/editor_help_search.h" line="128" column="3"/>
            <symbol>MemberMatch &lt; DocData :: ConstantDoc &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MemberMatch &lt; DocData :: PropertyDoc &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MemberMatch &lt; DocData :: PropertyDoc &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_help_search.cpp">
            <location file="editor/editor_help_search.h" line="128" column="3"/>
            <symbol>MemberMatch &lt; DocData :: PropertyDoc &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MemberMatch &lt; DocData :: ThemeItemDoc &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MemberMatch &lt; DocData :: ThemeItemDoc &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_help_search.cpp">
            <location file="editor/editor_help_search.h" line="128" column="3"/>
            <symbol>MemberMatch &lt; DocData :: ThemeItemDoc &gt;</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;match&apos; can be declared with const" verbose="Variable &apos;match&apos; can be declared with const" cwe="398" file0="editor/editor_help_search.cpp">
            <location file="editor/editor_help_search.cpp" line="908" column="14" info="Variable &apos;match&apos; can be declared with const"/>
            <symbol>match</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;found&apos; can be declared with const" verbose="Variable &apos;found&apos; can be declared with const" cwe="398" file0="editor/editor_help_search.cpp">
            <location file="editor/editor_help_search.cpp" line="1075" column="17" info="Variable &apos;found&apos; can be declared with const"/>
            <symbol>found</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;LogFilter&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;LogFilter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_log.cpp">
            <location file="editor/editor_log.h" line="126" column="3"/>
            <symbol>LogFilter</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;save_each&apos; is always true" verbose="Condition &apos;save_each&apos; is always true" cwe="571" file0="editor/editor_node.cpp">
            <location file="editor/editor_node.cpp" line="3084" column="9" info="Condition &apos;save_each&apos; is always true"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="editor/editor_node.cpp">
            <location file="editor/editor_node.cpp" line="1205" column="15"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="editor/editor_node.cpp">
            <location file="editor/editor_node.cpp" line="3572" column="38"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 446. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 446. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="177" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="404" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="446" column="77" info="Calling _locale_selected"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 447. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 447. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="177" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="404" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="438" column="2" info="Calling _locale_selected"/>
            <location file="editor/editor_properties.cpp" line="447" column="90" info="Calling _locale_focus_exited"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 584. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 584. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="158" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="467" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="584" column="73" info="Calling _path_selected"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 585. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 585. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="158" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="467" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="535" column="2" info="Calling _path_selected"/>
            <location file="editor/editor_properties.cpp" line="585" column="86" info="Calling _path_focus_exited"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyClassName()&apos; at line 634. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyClassName()&apos; at line 634. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="197" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="622" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="634" column="72" info="Calling _dialog_created"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyQuaternion()&apos; at line 2125. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyQuaternion()&apos; at line 2125. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="508" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="1952" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="2125" column="94" info="Calling _edit_custom_value"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1177. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1177. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="240" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1148" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1177" column="87" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1389. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1389. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="275" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1371" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1389" column="94" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1400. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1400. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="275" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1218" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1400" column="96" info="Calling _add_locale"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vector_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vector_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/editor_properties_vector.cpp">
            <location file="editor/editor_properties_vector.cpp" line="175" column="2"/>
            <symbol>vector_type</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="editor/editor_resource_preview.cpp">
            <location file="editor/editor_resource_preview.cpp" line="138" column="31"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;running_scene&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;running_scene&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/editor_run.cpp">
            <location file="editor/editor_run.cpp" line="291" column="2"/>
            <symbol>running_scene</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;Editor&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;Editor&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/editor_string_names.cpp">
            <location file="editor/editor_string_names.cpp" line="36" column="2"/>
            <symbol>Editor</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;file_pattern&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;file_pattern&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/export/codesign.cpp">
            <location file="editor/export/codesign.h" line="90" column="4"/>
            <symbol>file_pattern</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;key&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/export/codesign.cpp">
            <location file="editor/export/codesign.h" line="91" column="4"/>
            <symbol>key</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;blob&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;blob&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/export/codesign.cpp">
            <location file="editor/export/codesign.cpp" line="453" column="2"/>
            <symbol>blob</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignRequirements&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignRequirements&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/export/codesign.cpp">
            <location file="editor/export/codesign.h" line="160" column="2"/>
            <symbol>CodeSignRequirements</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignEntitlementsText&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignEntitlementsText&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/export/codesign.cpp">
            <location file="editor/export/codesign.h" line="184" column="2"/>
            <symbol>CodeSignEntitlementsText</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignEntitlementsBinary&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignEntitlementsBinary&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/export/codesign.cpp">
            <location file="editor/export/codesign.h" line="206" column="2"/>
            <symbol>CodeSignEntitlementsBinary</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/export/export_template_manager.cpp">
            <location file="editor/export/export_template_manager.cpp" line="564" column="7" info="ret is overwritten"/>
            <location file="editor/export/export_template_manager.cpp" line="553" column="8" info="ret is assigned"/>
            <symbol>ret</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!append_default_args&apos; is always false" verbose="Condition &apos;!append_default_args&apos; is always false" cwe="570" file0="editor/filesystem_dock.cpp">
            <location file="editor/filesystem_dock.cpp" line="2269" column="9" info="Condition &apos;!append_default_args&apos; is always false"/>
            <location file="editor/filesystem_dock.cpp" line="2268" column="34" info="Assuming container is not empty"/>
            <location file="editor/filesystem_dock.cpp" line="2249" column="31" info="Assignment &apos;append_default_args=true&apos;, assigned value is 1"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorObjectSelector&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorObjectSelector&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/gui/editor_object_selector.cpp">
            <location file="editor/gui/editor_object_selector.h" line="69" column="2"/>
            <symbol>EditorObjectSelector</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;gui_input&apos; is called from constructor &apos;EditorSpinSlider()&apos; at line 742. Dynamic binding is not used." verbose="Virtual function &apos;gui_input&apos; is called from constructor &apos;EditorSpinSlider()&apos; at line 742. Dynamic binding is not used." file0="editor/gui/editor_spin_slider.cpp">
            <location file="editor/gui/editor_spin_slider.h" line="97" column="15" info="gui_input is a virtual function"/>
            <location file="editor/gui/editor_spin_slider.cpp" line="742" column="35" info="Calling gui_input"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;in_dev&apos; is always false" verbose="Condition &apos;in_dev&apos; is always false" cwe="570" file0="editor/gui/editor_toaster.cpp">
            <location file="editor/gui/editor_toaster.cpp" line="168" column="51" info="Condition &apos;in_dev&apos; is always false"/>
            <location file="editor/gui/editor_toaster.cpp" line="163" column="16" info="Assignment &apos;in_dev=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;in_dev&apos; is always true" verbose="Condition &apos;in_dev&apos; is always true" cwe="571" file0="editor/gui/editor_toaster.cpp">
            <location file="editor/gui/editor_toaster.cpp" line="168" column="51" info="Condition &apos;in_dev&apos; is always true"/>
            <location file="editor/gui/editor_toaster.cpp" line="161" column="16" info="Assignment &apos;in_dev=true&apos;, assigned value is 1"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;c&apos; is used before limits check." verbose="Defensive programming: The variable &apos;c&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398" file0="editor/import/resource_importer_imagefont.cpp">
            <location file="editor/import/resource_importer_imagefont.cpp" line="161" column="23"/>
            <symbol>c</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;InspectorDock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;InspectorDock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/inspector_dock.cpp">
            <location file="editor/inspector_dock.h" line="164" column="2"/>
            <symbol>InspectorDock</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;localization_changed&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;localization_changed&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/localization_editor.cpp">
            <location file="editor/localization_editor.cpp" line="610" column="2"/>
            <symbol>localization_changed</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;edited_point&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;edited_point&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/abstract_polygon_2d_editor.cpp" line="720" column="2"/>
            <symbol>edited_point</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/abstract_polygon_2d_editor.h" line="51" column="3"/>
            <symbol>Vertex</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CanvasItemEditorViewport&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CanvasItemEditorViewport&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.h" line="669" column="2"/>
            <symbol>CanvasItemEditorViewport</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/animation_player_editor_plugin.cpp">
            <location file="editor/plugins/animation_player_editor_plugin.h" line="272" column="2"/>
            <symbol>AnimationPlayerEditor</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;profile_bone_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;profile_bone_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="100" column="2"/>
            <symbol>profile_bone_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="162" column="2"/>
            <symbol>bone_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;profile_bone_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;profile_bone_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="163" column="2"/>
            <symbol>profile_bone_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1409" column="2"/>
            <symbol>bone_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1459" column="2"/>
            <symbol>bone_map</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoneMapperItem&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoneMapperItem&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.h" line="108" column="2"/>
            <symbol>BoneMapperItem</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BonePicker&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BonePicker&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.h" line="132" column="2"/>
            <symbol>BonePicker</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoneMapEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoneMapEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.h" line="217" column="2"/>
            <symbol>BoneMapEditor</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapperItem&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapperItem&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="161" column="46" info="Parameter &apos;p_bone_map&apos; can be declared with const"/>
            <location file="editor/plugins/bone_map_editor_plugin.h" line="86" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_bone_map</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapper&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapper&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1407" column="62" info="Parameter &apos;p_bone_map&apos; can be declared with const"/>
            <location file="editor/plugins/bone_map_editor_plugin.h" line="137" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_bone_map</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapEditor&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_bone_map&apos; can be declared with const. However it seems that &apos;BoneMapEditor&apos; is a callback function, if &apos;p_bone_map&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1458" column="44" info="Parameter &apos;p_bone_map&apos; can be declared with const"/>
            <location file="editor/plugins/bone_map_editor_plugin.h" line="204" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_bone_map</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="838" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="812" column="11" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="857" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="838" column="11" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1334" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1187" column="11" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1334" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1222" column="14" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1334" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1281" column="12" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1334" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1304" column="12" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bone_idx&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/plugins/bone_map_editor_plugin.cpp">
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1334" column="11" info="bone_idx is overwritten"/>
            <location file="editor/plugins/bone_map_editor_plugin.cpp" line="1319" column="12" info="bone_idx is assigned"/>
            <symbol>bone_idx</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;x_rot&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;x_rot&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="390" column="4"/>
            <symbol>x_rot</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;y_rot&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;y_rot&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="391" column="4"/>
            <symbol>y_rot</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;distance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;distance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="392" column="4"/>
            <symbol>distance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;fov_scale&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;fov_scale&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="393" column="4"/>
            <symbol>fov_scale</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;default_texture_node_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;default_texture_node_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/canvas_item_editor_plugin.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="6291" column="2"/>
            <symbol>default_texture_node_type</symbol>
        </error>
        <error id="redundantAssignInSwitch" severity="style" msg="Variable &apos;nodes_to_move&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;nodes_to_move&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" cwe="563" file0="editor/plugins/canvas_item_editor_plugin.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="955" column="18" info="$symbol is overwritten"/>
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="951" column="18" info="$symbol is assigned"/>
            <symbol>nodes_to_move</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;grab_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;grab_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/collision_shape_2d_editor_plugin.cpp">
            <location file="editor/plugins/collision_shape_2d_editor_plugin.cpp" line="48" column="2"/>
            <symbol>grab_threshold</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SizeFlagPresetPicker&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SizeFlagPresetPicker&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/control_editor_plugin.cpp">
            <location file="editor/plugins/control_editor_plugin.h" line="210" column="2"/>
            <symbol>SizeFlagPresetPicker</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CurveEdit::initial_grab_index&apos; is not initialized in the constructor." verbose="Member variable &apos;CurveEdit::initial_grab_index&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/curve_editor_plugin.cpp">
            <location file="editor/plugins/curve_editor_plugin.cpp" line="50" column="12"/>
            <symbol>CurveEdit::initial_grab_index</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CurveEdit::initial_grab_left_tangent&apos; is not initialized in the constructor." verbose="Member variable &apos;CurveEdit::initial_grab_left_tangent&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/curve_editor_plugin.cpp">
            <location file="editor/plugins/curve_editor_plugin.cpp" line="50" column="12"/>
            <symbol>CurveEdit::initial_grab_left_tangent</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CurveEdit::initial_grab_right_tangent&apos; is not initialized in the constructor." verbose="Member variable &apos;CurveEdit::initial_grab_right_tangent&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/curve_editor_plugin.cpp">
            <location file="editor/plugins/curve_editor_plugin.cpp" line="50" column="12"/>
            <symbol>CurveEdit::initial_grab_right_tangent</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;DebuggerEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;DebuggerEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/debugger_editor_plugin.cpp">
            <location file="editor/plugins/debugger_editor_plugin.h" line="73" column="2"/>
            <symbol>DebuggerEditorPlugin</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorDebuggerSession&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorDebuggerSession&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/editor_debugger_plugin.cpp">
            <location file="editor/plugins/editor_debugger_plugin.h" line="67" column="2"/>
            <symbol>EditorDebuggerSession</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="329" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="753" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;viewport&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;viewport&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="871" column="2"/>
            <symbol>viewport</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 360. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 360. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="118" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="340" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="360" column="93" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 373. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 373. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="118" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="209" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="373" column="96" info="Calling _add_script"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 376. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyFontMetaOverride(bool p_script)&apos; at line 376. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="118" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="221" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="376" column="95" info="Calling _add_lang"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTVariation()&apos; at line 546. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTVariation()&apos; at line 546. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="149" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="528" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="546" column="88" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 849. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 849. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="201" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="831" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="849" column="87" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 856. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 856. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="201" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="608" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="856" column="90" info="Calling _add_feature"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 861. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyOTFeatures()&apos; at line 861. Dynamic binding is not used." file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="201" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="608" column="2" info="Calling update_property"/>
            <location file="editor/plugins/font_config_plugin.cpp" line="861" column="98" info="Calling _add_feature"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorPropertyFontMetaOverride&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorPropertyFontMetaOverride&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/font_config_plugin.cpp">
            <location file="editor/plugins/font_config_plugin.h" line="120" column="2"/>
            <symbol>EditorPropertyFontMetaOverride</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;Gizmo3DHelper&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;Gizmo3DHelper&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="editor/plugins/gizmos/gizmo_3d_helper.cpp">
            <location file="editor/plugins/gizmos/gizmo_3d_helper.h" line="38" column="1"/>
            <symbol>Gizmo3DHelper</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sign&gt;0&apos; is always false" verbose="Condition &apos;sign&gt;0&apos; is always false" cwe="570" file0="editor/plugins/gizmos/gizmo_3d_helper.cpp">
            <location file="editor/plugins/gizmos/gizmo_3d_helper.cpp" line="98" column="27" info="Condition &apos;sign&gt;0&apos; is always false"/>
            <location file="editor/plugins/gizmos/gizmo_3d_helper.cpp" line="81" column="27" info="Assignment &apos;sign=p_id%2*-2+1&apos;, assigned value is less than -3"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sign&gt;0&apos; is always false" verbose="Condition &apos;sign&gt;0&apos; is always false" cwe="570" file0="editor/plugins/gizmos/gizmo_3d_helper.cpp">
            <location file="editor/plugins/gizmos/gizmo_3d_helper.cpp" line="111" column="12" info="Condition &apos;sign&gt;0&apos; is always false"/>
            <location file="editor/plugins/gizmos/gizmo_3d_helper.cpp" line="81" column="27" info="Assignment &apos;sign=p_id%2*-2+1&apos;, assigned value is less than -3"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;arrow&apos; can be declared with const" verbose="Variable &apos;arrow&apos; can be declared with const" cwe="398" file0="editor/plugins/gizmos/light_3d_gizmo_plugin.cpp">
            <location file="editor/plugins/gizmos/light_3d_gizmo_plugin.cpp" line="168" column="12" info="Variable &apos;arrow&apos; can be declared with const"/>
            <symbol>arrow</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos3d_mesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos3d_mesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/gizmos/marker_3d_gizmo_plugin.cpp">
            <location file="editor/plugins/gizmos/marker_3d_gizmo_plugin.cpp" line="39" column="2"/>
            <symbol>pos3d_mesh</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_2d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_2d_editor_plugin.cpp" line="300" column="16"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_2d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_2d_editor_plugin.cpp" line="336" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_3d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_3d_editor_plugin.cpp" line="359" column="15"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_3d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_3d_editor_plugin.cpp" line="385" column="16"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;smallest_offset&apos; is assigned a value that is never used." verbose="Variable &apos;smallest_offset&apos; is assigned a value that is never used." cwe="563" file0="editor/plugins/gradient_editor_plugin.cpp">
            <location file="editor/plugins/gradient_editor_plugin.cpp" line="397" column="22"/>
            <symbol>smallest_offset</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;viewport_environment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;viewport_environment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="8565" column="2"/>
            <symbol>viewport_environment</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;se&apos; is always true" verbose="Condition &apos;se&apos; is always true" cwe="571" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="660" column="7" info="Condition &apos;se&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;mesh!=nullptr&apos; and &apos;scene!=nullptr&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="4509" column="22"/>
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="4504" column="27" info="&apos;scene&apos; is assigned value &apos;res&apos; here."/>
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="4505" column="19" info="&apos;mesh&apos; is assigned value &apos;res&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;snapped_to_floor&apos; can be reduced." verbose="The scope of the variable &apos;snapped_to_floor&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="7772" column="7"/>
            <symbol>snapped_to_floor</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;selection&apos; can be declared with const" verbose="Variable &apos;selection&apos; can be declared with const" cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="4871" column="16" info="Variable &apos;selection&apos; can be declared with const"/>
            <symbol>selection</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;packed_scene&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;packed_scene&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/packed_scene_editor_plugin.cpp">
            <location file="editor/plugins/packed_scene_editor_plugin.cpp" line="52" column="2"/>
            <symbol>packed_scene</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PackedSceneEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PackedSceneEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/packed_scene_editor_plugin.cpp">
            <location file="editor/plugins/packed_scene_editor_plugin.h" line="50" column="2"/>
            <symbol>PackedSceneEditor</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;p_packed_scene&apos; can be declared with const. However it seems that &apos;PackedSceneEditor&apos; is a callback function, if &apos;p_packed_scene&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;p_packed_scene&apos; can be declared with const. However it seems that &apos;PackedSceneEditor&apos; is a callback function, if &apos;p_packed_scene&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="editor/plugins/packed_scene_editor_plugin.cpp">
            <location file="editor/plugins/packed_scene_editor_plugin.cpp" line="51" column="56" info="Parameter &apos;p_packed_scene&apos; can be declared with const"/>
            <location file="editor/plugins/packed_scene_editor_plugin.h" line="39" column="10" info="You might need to cast the function pointer here"/>
            <symbol>p_packed_scene</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path3DGizmoPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path3DGizmoPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/path_3d_editor_plugin.cpp">
            <location file="editor/plugins/path_3d_editor_plugin.h" line="104" column="2"/>
            <symbol>Path3DGizmoPlugin</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;snap_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;snap_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1315" column="2"/>
            <symbol>snap_offset</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1559. Dynamic binding is not used." verbose="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1559. Dynamic binding is not used." file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.h" line="166" column="18" info="_get_node is a virtual function"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1057" column="33" info="Calling _get_node"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1559" column="83" info="Calling _uv_draw"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1560. Dynamic binding is not used." verbose="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1560. Dynamic binding is not used." file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.h" line="166" column="18" info="_get_node is a virtual function"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="499" column="7" info="Calling _get_node"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1560" column="88" info="Calling _uv_input"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 206. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 206. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="58" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="165" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="206" column="88" info="Calling _node_clear"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 212. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 212. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="58" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="50" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="212" column="98" info="Calling _confirmed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 219. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 219. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="58" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="50" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="219" column="82" info="Calling _confirmed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;make_visible&apos; is called from constructor &apos;Skeleton2DEditorPlugin()&apos; at line 133. Dynamic binding is not used." verbose="Virtual function &apos;make_visible&apos; is called from constructor &apos;Skeleton2DEditorPlugin()&apos; at line 133. Dynamic binding is not used." file0="editor/plugins/skeleton_2d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_2d_editor_plugin.h" line="76" column="15" info="make_visible is a virtual function"/>
            <location file="editor/plugins/skeleton_2d_editor_plugin.cpp" line="133" column="2" info="Calling make_visible"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;handle_material&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;handle_material&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.cpp" line="1075" column="2"/>
            <symbol>handle_material</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unselected_mat&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unselected_mat&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.cpp" line="1352" column="2"/>
            <symbol>unselected_mat</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoneTransformEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoneTransformEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.h" line="86" column="2"/>
            <symbol>BoneTransformEditor</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;make_visible&apos; is called from constructor &apos;Sprite2DEditorPlugin()&apos; at line 677. Dynamic binding is not used." verbose="Virtual function &apos;make_visible&apos; is called from constructor &apos;Sprite2DEditorPlugin()&apos; at line 677. Dynamic binding is not used." file0="editor/plugins/sprite_2d_editor_plugin.cpp">
            <location file="editor/plugins/sprite_2d_editor_plugin.h" line="128" column="15" info="make_visible is a virtual function"/>
            <location file="editor/plugins/sprite_2d_editor_plugin.cpp" line="677" column="2" info="Calling make_visible"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;duration&apos; can be reduced." verbose="The scope of the variable &apos;duration&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/plugins/sprite_frames_editor_plugin.cpp">
            <location file="editor/plugins/sprite_frames_editor_plugin.cpp" line="778" column="8"/>
            <symbol>duration</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;duration&apos; is assigned a value that is never used." verbose="Variable &apos;duration&apos; is assigned a value that is never used." cwe="563" file0="editor/plugins/sprite_frames_editor_plugin.cpp">
            <location file="editor/plugins/sprite_frames_editor_plugin.cpp" line="778" column="17"/>
            <symbol>duration</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ThemeItemEditorDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ThemeItemEditorDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/theme_editor_plugin.cpp">
            <location file="editor/plugins/theme_editor_plugin.h" line="285" column="2"/>
            <symbol>ThemeItemEditorDialog</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;gui_input&apos; is called from constructor &apos;TileAtlasView()&apos; at line 663. Dynamic binding is not used." verbose="Virtual function &apos;gui_input&apos; is called from constructor &apos;TileAtlasView()&apos; at line 663. Dynamic binding is not used." file0="editor/plugins/tiles/tile_atlas_view.cpp">
            <location file="editor/plugins/tiles/tile_atlas_view.h" line="65" column="15" info="gui_input is a virtual function"/>
            <location file="editor/plugins/tiles/tile_atlas_view.cpp" line="663" column="44" info="Calling gui_input"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;gui_input&apos; is called from constructor &apos;TileAtlasView()&apos; at line 700. Dynamic binding is not used." verbose="Virtual function &apos;gui_input&apos; is called from constructor &apos;TileAtlasView()&apos; at line 700. Dynamic binding is not used." file0="editor/plugins/tiles/tile_atlas_view.cpp">
            <location file="editor/plugins/tiles/tile_atlas_view.h" line="65" column="15" info="gui_input is a virtual function"/>
            <location file="editor/plugins/tiles/tile_atlas_view.cpp" line="700" column="51" info="Calling gui_input"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;gui_input&apos; is called from constructor &apos;TileAtlasView()&apos; at line 743. Dynamic binding is not used." verbose="Virtual function &apos;gui_input&apos; is called from constructor &apos;TileAtlasView()&apos; at line 743. Dynamic binding is not used." file0="editor/plugins/tiles/tile_atlas_view.cpp">
            <location file="editor/plugins/tiles/tile_atlas_view.h" line="65" column="15" info="gui_input is a virtual function"/>
            <location file="editor/plugins/tiles/tile_atlas_view.cpp" line="743" column="58" info="Calling gui_input"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneTileProxyObject::source_id&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneTileProxyObject::source_id&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="91" column="3"/>
            <symbol>SceneTileProxyObject::source_id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneTileProxyObject::scene_id&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneTileProxyObject::scene_id&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="91" column="3"/>
            <symbol>SceneTileProxyObject::scene_id</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;dummy_object&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." verbose="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;dummy_object&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.h" line="313" column="15" info="Derived variable &apos;TileDataCollisionEditor::dummy_object&apos;"/>
            <location file="editor/plugins/tiles/tile_data_editors.h" line="227" column="15" info="Parent variable &apos;TileDataDefaultEditor::dummy_object&apos;"/>
            <symbol>TileDataCollisionEditor</symbol>
            <symbol>dummy_object</symbol>
            <symbol>TileDataDefaultEditor</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AtlasTileProxyObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AtlasTileProxyObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_atlas_source_editor.h" line="110" column="3"/>
            <symbol>AtlasTileProxyObject</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TileAtlasControl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TileAtlasControl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_atlas_source_editor.h" line="120" column="3"/>
            <symbol>TileAtlasControl</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneTileProxyObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneTileProxyObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="91" column="3"/>
            <symbol>SceneTileProxyObject</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;color&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;color&apos;. The initialized value is overwritten before it is read." cwe="563" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.cpp" line="2989" column="9" info="color is overwritten"/>
            <location file="editor/plugins/tiles/tile_data_editors.cpp" line="2987" column="15" info="color is initialized"/>
            <symbol>color</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_layer_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_layer_editor.cpp" line="4038" column="61"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_layer_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_layer_editor.cpp" line="4055" column="61"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_layer_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_layer_editor.cpp" line="4062" column="61"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="editor/plugins/tiles/tile_set_atlas_source_editor.cpp">
            <location file="editor/plugins/tiles/tile_set_atlas_source_editor.cpp" line="810" column="46"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_diff_content&apos; can be declared with const" verbose="Parameter &apos;p_diff_content&apos; can be declared with const" cwe="398" file0="editor/plugins/version_control_editor_plugin.cpp">
            <location file="editor/plugins/version_control_editor_plugin.cpp" line="747" column="97" info="Parameter &apos;p_diff_content&apos; can be declared with const"/>
            <symbol>p_diff_content</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="392" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="393" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;category&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;category&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="394" column="4"/>
            <symbol>category</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;description&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;description&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="395" column="4"/>
            <symbol>description</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ops&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ops&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="396" column="4"/>
            <symbol>ops</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_preview_material&apos; can be declared with const" verbose="Parameter &apos;p_preview_material&apos; can be declared with const" cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.cpp" line="8017" column="97" info="Parameter &apos;p_preview_material&apos; can be declared with const"/>
            <symbol>p_preview_material</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;selected_node_id&apos; is assigned a value that is never used." verbose="Variable &apos;selected_node_id&apos; is assigned a value that is never used." cwe="563" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.cpp" line="4135" column="23"/>
            <symbol>selected_node_id</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;op&apos; is assigned a value that is never used." verbose="Variable &apos;op&apos; is assigned a value that is never used." cwe="563" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.cpp" line="5983" column="16"/>
            <symbol>op</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;POTGenerator::_print_all_translation_strings&apos;" verbose="Unused private function: &apos;POTGenerator::_print_all_translation_strings&apos;" cwe="398" file0="editor/pot_generator.cpp">
            <location file="editor/pot_generator.h" line="56" column="7"/>
            <symbol>POTGenerator::_print_all_translation_strings</symbol>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="117" column="19"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;no_updates&apos; is always true" verbose="Condition &apos;no_updates&apos; is always true" cwe="571" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="111" column="6" info="Condition &apos;no_updates&apos; is always true"/>
            <location file="editor/progress_dialog.cpp" line="105" column="20" info="Assignment &apos;no_updates=true&apos;, assigned value is 1"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;no_updates&apos; shadows outer variable" verbose="Local variable &apos;no_updates&apos; shadows outer variable" cwe="398" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="108" column="3" info="Shadow variable"/>
            <location file="editor/progress_dialog.cpp" line="105" column="7" info="Shadowed declaration"/>
            <symbol>no_updates</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectTag&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectTag&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/project_manager/project_tag.cpp">
            <location file="editor/project_manager/project_tag.h" line="53" column="2"/>
            <symbol>ProjectTag</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectSettingsEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectSettingsEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/project_settings_editor.cpp">
            <location file="editor/project_settings_editor.h" line="135" column="2"/>
            <symbol>ProjectSettingsEditor</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RenameDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RenameDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/rename_dialog.cpp">
            <location file="editor/rename_dialog.h" line="114" column="2"/>
            <symbol>RenameDialog</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="editor/rename_dialog.cpp">
            <location file="editor/rename_dialog.cpp" line="473" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;start&apos; can be reduced." verbose="The scope of the variable &apos;start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/rename_dialog.cpp">
            <location file="editor/rename_dialog.cpp" line="520" column="8"/>
            <symbol>start</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;start&apos; is assigned a value that is never used." verbose="Variable &apos;start&apos; is assigned a value that is never used." cwe="563" file0="editor/rename_dialog.cpp">
            <location file="editor/rename_dialog.cpp" line="520" column="14"/>
            <symbol>start</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_char&apos; can be reduced." verbose="The scope of the variable &apos;arg_char&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/run_instances_dialog.cpp">
            <location file="editor/run_instances_dialog.cpp" line="127" column="11"/>
            <symbol>arg_char</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;space_indent_size&apos; can be reduced." verbose="The scope of the variable &apos;space_indent_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.cpp" line="731" column="6"/>
            <symbol>space_indent_size</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_language_info&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 544. Dynamic binding is not used." verbose="Virtual function &apos;_update_language_info&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 544. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="86" column="15" info="_update_language_info is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="544" column="2" info="Calling _update_language_info"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." cwe="563" file0="editor/themes/editor_icons.cpp">
            <location file="editor/themes/editor_icons.cpp" line="75" column="6" info="img is overwritten"/>
            <location file="editor/themes/editor_icons.cpp" line="60" column="17" info="img is initialized"/>
            <symbol>img</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;show_logo&apos; is always true" verbose="Condition &apos;show_logo&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="3384" column="6" info="Condition &apos;show_logo&apos; is always true"/>
            <location file="main/main.cpp" line="3381" column="19" info="Assignment &apos;show_logo=true&apos;, assigned value is 1"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;boot_bg_color&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;boot_bg_color&apos;. The initialized value is overwritten before it is read." cwe="563" file0="main/main.cpp">
            <location file="main/main.cpp" line="3411" column="17" info="boot_bg_color is overwritten"/>
            <location file="main/main.cpp" line="3408" column="23" info="boot_bg_color is initialized"/>
            <symbol>boot_bg_color</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: ret.interpolation_fraction" verbose="Uninitialized struct member: ret.interpolation_fraction" cwe="457" file0="main/main_timer_sync.cpp">
            <location file="main/main_timer_sync.cpp" line="410" column="9"/>
            <symbol>ret.interpolation_fraction</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ret.interpolation_fraction" verbose="Uninitialized variable: ret.interpolation_fraction" cwe="457" file0="main/main_timer_sync.cpp">
            <location file="main/main_timer_sync.cpp" line="410" column="9"/>
            <location file="main/main_timer_sync.cpp" line="349" column="55" info="Assuming condition is false"/>
            <symbol>ret</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="main/performance.cpp">
            <location file="main/performance.cpp" line="350" column="2"/>
            <symbol>_callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_arguments&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_arguments&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="main/performance.cpp">
            <location file="main/performance.cpp" line="351" column="2"/>
            <symbol>_arguments</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="main/steam_tracker.cpp">
            <location file="main/steam_tracker.cpp" line="84" column="30"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;rcd!=nullptr&apos; is always false" verbose="Condition &apos;rcd!=nullptr&apos; is always false" cwe="570" file0="modules/betsy/image_compress_betsy.cpp">
            <location file="modules/betsy/image_compress_betsy.cpp" line="74" column="11" info="Condition &apos;rcd!=nullptr&apos; is always false"/>
            <location file="modules/betsy/image_compress_betsy.cpp" line="64" column="32" info="Assignment &apos;rcd=nullptr&apos;, assigned value is 0"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/csg/csg.cpp">
            <location file="modules/csg/csg.cpp" line="554" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ENetPacketPeer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ENetPacketPeer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_packet_peer.h" line="124" column="2"/>
            <symbol>ENetPacketPeer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Compressor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Compressor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.h" line="98" column="3"/>
            <symbol>Compressor</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.h" line="103" column="14"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="128" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="135" column="50"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="147" column="50"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="148" column="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bind_ip&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bind_ip&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="487" column="2"/>
            <symbol>bind_ip</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~ENetMultiplayerPeer()&apos; at line 492. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~ENetMultiplayerPeer()&apos; at line 492. Dynamic binding is not used." file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.h" line="104" column="15" info="close is a virtual function"/>
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="492" column="3" info="Calling close"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_event&apos; can be declared with const" verbose="Parameter &apos;p_event&apos; can be declared with const" cwe="398" file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="134" column="82" info="Parameter &apos;p_event&apos; can be declared with const"/>
            <symbol>p_event</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="modules/fbx/fbx_document.cpp">
            <location file="modules/fbx/fbx_document.cpp" line="856" column="9" info="Second condition"/>
            <location file="modules/fbx/fbx_document.cpp" line="775" column="9" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!current_node&apos; is always true" verbose="Condition &apos;!current_node&apos; is always true" cwe="571" file0="modules/fbx/fbx_document.cpp">
            <location file="modules/fbx/fbx_document.cpp" line="1640" column="6" info="Condition &apos;!current_node&apos; is always true"/>
            <location file="modules/fbx/fbx_document.cpp" line="1618" column="25" info="Assignment &apos;current_node=nullptr&apos;, assigned value is 0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/fbx/fbx_document.cpp">
            <location file="modules/fbx/fbx_document.cpp" line="247" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/fbx/fbx_document.cpp">
            <location file="modules/fbx/fbx_document.cpp" line="255" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/fbx/fbx_document.cpp">
            <location file="modules/fbx/fbx_document.cpp" line="263" column="24"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;enum_value&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;enum_value&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="730" column="5"/>
            <symbol>enum_value</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1110" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1123" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1136" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1149" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDScriptNativeClass&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDScriptNativeClass&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript.h" line="58" column="2"/>
            <symbol>GDScriptNativeClass</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;UpdatableFuncPtr&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;UpdatableFuncPtr&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript.h" line="132" column="3"/>
            <symbol>UpdatableFuncPtr</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Token&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Token&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.h" line="186" column="3"/>
            <symbol>Token</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="704" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="708" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="712" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="716" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="720" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="724" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="728" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="732" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;comment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;comment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_docgen.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.h" line="201" column="4"/>
            <symbol>comment</symbol>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;non_op&apos; is used before limits check." verbose="Defensive programming: The variable &apos;non_op&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398" file0="modules/gdscript/editor/gdscript_highlighter.cpp">
            <location file="modules/gdscript/editor/gdscript_highlighter.cpp" line="379" column="37"/>
            <symbol>non_op</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDScriptAnalyzer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDScriptAnalyzer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_translation_parser_plugin.cpp">
            <location file="modules/gdscript/gdscript_analyzer.h" line="166" column="2"/>
            <symbol>GDScriptAnalyzer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Finally&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Finally&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_translation_parser_plugin.cpp">
            <location file="modules/gdscript/gdscript_analyzer.h" line="49" column="3"/>
            <symbol>Finally</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="60" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="65" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="69" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Address&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Address&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="58" column="3"/>
            <symbol>Address</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;can_run&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;can_run&apos;. The initialized value is overwritten before it is read." cwe="563" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="838" column="10" info="can_run is overwritten"/>
            <location file="modules/gdscript/gdscript.cpp" line="795" column="15" info="can_run is initialized"/>
            <symbol>can_run</symbol>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;p_script.is_valid()&apos; and inner condition is &apos;gdscript.is_valid()&apos;)." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="1452" column="24" info="identical inner condition: gdscript.is_valid()"/>
            <location file="modules/gdscript/gdscript.cpp" line="1450" column="23" info="outer condition: p_script.is_valid()"/>
            <location file="modules/gdscript/gdscript.cpp" line="1451" column="28" info="&apos;gdscript&apos; is assigned value &apos;p_script&apos; here."/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDScriptUtilityCallable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDScriptUtilityCallable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_utility_callable.h" line="63" column="2"/>
            <symbol>GDScriptUtilityCallable</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;result.kind&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;result.kind&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="5163" column="17" info="result.kind is overwritten"/>
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="5120" column="15" info="result.kind is assigned"/>
            <symbol>result.kind</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_base&apos; can be declared with const" verbose="Parameter &apos;p_base&apos; can be declared with const" cwe="398" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="3797" column="124" info="Parameter &apos;p_base&apos; can be declared with const"/>
            <symbol>p_base</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;clearing&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;clearing&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/gdscript/gdscript_cache.cpp">
            <location file="modules/gdscript/gdscript_cache.cpp" line="125" column="11" info="clearing is overwritten"/>
            <location file="modules/gdscript/gdscript_cache.cpp" line="114" column="11" info="clearing is assigned"/>
            <symbol>clearing</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!type_hints&apos; is always true" verbose="Condition &apos;!type_hints&apos; is always true" cwe="571" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="81" column="6" info="Condition &apos;!type_hints&apos; is always true"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="77" column="20" info="Assignment &apos;type_hints=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;th&apos; is always false" verbose="Condition &apos;th&apos; is always false" cwe="570" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="510" column="8" info="Condition &apos;th&apos; is always false"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="500" column="12" info="Assignment &apos;th=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;th&apos; is always false" verbose="Condition &apos;th&apos; is always false" cwe="570" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="518" column="22" info="Condition &apos;th&apos; is always false"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="500" column="12" info="Assignment &apos;th=false&apos;, assigned value is 0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;RecursionCheck&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;RecursionCheck&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="1580" column="2"/>
            <symbol>RecursionCheck</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_function.cpp">
            <location file="modules/gdscript/gdscript_function.cpp" line="108" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="1529" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="1526" column="6" info="outer condition: !check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::BRACKET_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::BRACKET_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2956" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::BRACKET_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="2954" column="6" info="outer condition: !check(GDScriptTokenizer::Token::BRACKET_CLOSE)"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::BRACE_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::BRACE_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2982" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::BRACE_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="2980" column="6" info="outer condition: !check(GDScriptTokenizer::Token::BRACE_CLOSE)"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;decided_style&apos; can be reduced." verbose="The scope of the variable &apos;decided_style&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2979" column="7"/>
            <symbol>decided_style</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_node&apos; can be declared with const" verbose="Parameter &apos;p_node&apos; can be declared with const" cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="4956" column="45" info="Parameter &apos;p_node&apos; can be declared with const"/>
            <symbol>p_node</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;has_error&apos; is assigned a value that is never used." verbose="Variable &apos;has_error&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_tokenizer.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.cpp" line="849" column="13"/>
            <symbol>has_error</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;function_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;function_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_utility_callable.cpp">
            <location file="modules/gdscript/gdscript_utility_callable.cpp" line="116" column="2"/>
            <symbol>function_name</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="529" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;script&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;script&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="588" column="10" info="script is overwritten"/>
            <location file="modules/gdscript/gdscript_vm.cpp" line="505" column="10" info="script is assigned"/>
            <symbol>script</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="447" column="2"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;kind&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;kind&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="847" column="3"/>
            <symbol>kind</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;value&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;value&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="851" column="3"/>
            <symbol>value</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;kind&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;kind&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="852" column="3"/>
            <symbol>kind</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MarkupContent&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MarkupContent&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/godot_lsp.h" line="850" column="2"/>
            <symbol>MarkupContent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;file_checker&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;file_checker&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_text_document.cpp">
            <location file="modules/gdscript/language_server/gdscript_text_document.cpp" line="482" column="2"/>
            <symbol>file_checker</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;forced&apos; can be reduced." verbose="The scope of the variable &apos;forced&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/language_server/gdscript_workspace.cpp">
            <location file="modules/gdscript/language_server/gdscript_workspace.cpp" line="638" column="7"/>
            <symbol>forced</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;r_nodes&apos; can be declared with const" verbose="Parameter &apos;r_nodes&apos; can be declared with const" cwe="398" file0="modules/gltf/skin_tool.cpp">
            <location file="modules/gltf/skin_tool.cpp" line="33" column="67" info="Parameter &apos;r_nodes&apos; can be declared with const"/>
            <symbol>r_nodes</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;r_nodes&apos; can be declared with const" verbose="Parameter &apos;r_nodes&apos; can be declared with const" cwe="398" file0="modules/gltf/skin_tool.cpp">
            <location file="modules/gltf/skin_tool.cpp" line="74" column="75" info="Parameter &apos;r_nodes&apos; can be declared with const"/>
            <symbol>r_nodes</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;nodes&apos; can be declared with const" verbose="Parameter &apos;nodes&apos; can be declared with const" cwe="398" file0="modules/gltf/skin_tool.cpp">
            <location file="modules/gltf/skin_tool.cpp" line="438" column="26" info="Parameter &apos;nodes&apos; can be declared with const"/>
            <symbol>nodes</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;skeletons&apos; can be declared with const" verbose="Parameter &apos;skeletons&apos; can be declared with const" cwe="398" file0="modules/gltf/skin_tool.cpp">
            <location file="modules/gltf/skin_tool.cpp" line="486" column="30" info="Parameter &apos;skeletons&apos; can be declared with const"/>
            <symbol>skeletons</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;skeletons&apos; can be declared with const" verbose="Parameter &apos;skeletons&apos; can be declared with const" cwe="398" file0="modules/gltf/skin_tool.cpp">
            <location file="modules/gltf/skin_tool.cpp" line="622" column="30" info="Parameter &apos;skeletons&apos; can be declared with const"/>
            <symbol>skeletons</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;nodes&apos; can be declared with const" verbose="Parameter &apos;nodes&apos; can be declared with const" cwe="398" file0="modules/gltf/skin_tool.cpp">
            <location file="modules/gltf/skin_tool.cpp" line="623" column="26" info="Parameter &apos;nodes&apos; can be declared with const"/>
            <symbol>nodes</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;bake_navigation&apos; is always true" verbose="Condition &apos;bake_navigation&apos; is always true" cwe="571" file0="modules/gridmap/grid_map.cpp">
            <location file="modules/gridmap/grid_map.cpp" line="800" column="7" info="Condition &apos;bake_navigation&apos; is always true"/>
            <location file="modules/gridmap/grid_map.cpp" line="779" column="57" info="Assuming container is not empty"/>
            <location file="modules/gridmap/grid_map.cpp" line="778" column="6" info="Assuming that condition &apos;bake_navigation&apos; is not redundant"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="120" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="121" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;na&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;na&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="122" column="4"/>
            <symbol>na</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;nb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;nb&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="123" column="4"/>
            <symbol>nb</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="153" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="154" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;indices&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;indices&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="155" column="4"/>
            <symbol>indices</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;rcd!=nullptr&apos; is always false" verbose="Condition &apos;rcd!=nullptr&apos; is always false" cwe="570" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.cpp" line="1051" column="11" info="Condition &apos;rcd!=nullptr&apos; is always false"/>
            <location file="modules/lightmapper_rd/lightmapper_rd.cpp" line="1042" column="32" info="Assignment &apos;rcd=nullptr&apos;, assigned value is 0"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;stop&apos; is called from destructor &apos;~DTLSServerMbedTLS()&apos; at line 76. Dynamic binding is not used." verbose="Virtual function &apos;stop&apos; is called from destructor &apos;~DTLSServerMbedTLS()&apos; at line 76. Dynamic binding is not used." file0="modules/mbedtls/dtls_server_mbedtls.cpp">
            <location file="modules/mbedtls/dtls_server_mbedtls.h" line="49" column="15" info="stop is a virtual function"/>
            <location file="modules/mbedtls/dtls_server_mbedtls.cpp" line="76" column="2" info="Calling stop"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerMbedDTLS::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerMbedDTLS::packet_buffer&apos; is not initialized in the constructor." cwe="398" file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="245" column="21"/>
            <symbol>PacketPeerMbedDTLS::packet_buffer</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_peer&apos; is called from destructor &apos;~PacketPeerMbedDTLS()&apos; at line 250. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_peer&apos; is called from destructor &apos;~PacketPeerMbedDTLS()&apos; at line 250. Dynamic binding is not used." file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.h" line="72" column="15" info="disconnect_from_peer is a virtual function"/>
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="250" column="2" info="Calling disconnect_from_peer"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="modules/mbedtls/register_types.cpp">
            <location file="modules/mbedtls/tests/test_crypto_mbedtls.h" line="44" column="1"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_stream&apos; is called from destructor &apos;~StreamPeerMbedTLS()&apos; at line 273. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_stream&apos; is called from destructor &apos;~StreamPeerMbedTLS()&apos; at line 273. Dynamic binding is not used." file0="modules/mbedtls/stream_peer_mbedtls.cpp">
            <location file="modules/mbedtls/stream_peer_mbedtls.h" line="63" column="15" info="disconnect_from_stream is a virtual function"/>
            <location file="modules/mbedtls/stream_peer_mbedtls.cpp" line="273" column="2" info="Calling disconnect_from_stream"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 597. Dynamic binding is not used." verbose="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 597. Dynamic binding is not used." file0="modules/mobile_vr/mobile_vr_interface.cpp">
            <location file="modules/mobile_vr/mobile_vr_interface.h" line="155" column="15" info="is_initialized is a virtual function"/>
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="597" column="6" info="Calling is_initialized"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 598. Dynamic binding is not used." verbose="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 598. Dynamic binding is not used." file0="modules/mobile_vr/mobile_vr_interface.cpp">
            <location file="modules/mobile_vr/mobile_vr_interface.h" line="157" column="15" info="uninitialize is a virtual function"/>
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="598" column="3" info="Calling uninitialize"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CSharpInstance&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CSharpInstance&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.h" line="378" column="2"/>
            <symbol>CSharpInstance</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ScopeExit&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ScopeExit&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/utils/macros.h" line="56" column="2"/>
            <symbol>ScopeExit</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;extra_cond&apos; is always true" verbose="Condition &apos;extra_cond&apos; is always true" cwe="571" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.cpp" line="2311" column="6" info="Condition &apos;extra_cond&apos; is always true"/>
            <location file="modules/mono/csharp_script.cpp" line="2305" column="20" info="Assignment &apos;extra_cond=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!has_data&apos; is always true" verbose="Condition &apos;!has_data&apos; is always true" cwe="571" file0="modules/mono/godotsharp_dirs.cpp">
            <location file="modules/mono/godotsharp_dirs.cpp" line="176" column="8" info="Condition &apos;!has_data&apos; is always true"/>
            <location file="modules/mono/godotsharp_dirs.cpp" line="175" column="20" info="Assignment &apos;has_data=false&apos;, assigned value is 0"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;args&apos; can be declared with const" verbose="Variable &apos;args&apos; can be declared with const" cwe="398" file0="modules/mono/utils/string_utils.cpp">
            <location file="modules/mono/utils/string_utils.cpp" line="95" column="9" info="Variable &apos;args&apos; can be declared with const"/>
            <symbol>args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/editor/editor_network_profiler.h" line="54" column="4"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/editor/editor_network_profiler.h" line="55" column="4"/>
            <symbol>path</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;SyncInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;SyncInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/multiplayer_debugger.h" line="70" column="3"/>
            <symbol>SyncInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;NodeInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;NodeInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/editor/editor_network_profiler.cpp">
            <location file="modules/multiplayer/editor/editor_network_profiler.h" line="53" column="3"/>
            <symbol>NodeInfo</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/editor/multiplayer_editor_plugin.cpp">
            <location file="modules/multiplayer/scene_replication_config.h" line="62" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ReplicationProperty&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ReplicationProperty&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/editor/multiplayer_editor_plugin.cpp">
            <location file="modules/multiplayer/scene_replication_config.h" line="61" column="3"/>
            <symbol>ReplicationProperty</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/multiplayer/multiplayer_debugger.cpp">
            <location file="modules/multiplayer/multiplayer_debugger.cpp" line="74" column="20"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/multiplayer_spawner.cpp">
            <location file="modules/multiplayer/multiplayer_spawner.h" line="65" column="4"/>
            <symbol>args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;oid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;oid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_cache_interface.h" line="57" column="4"/>
            <symbol>oid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_cache_interface.h" line="58" column="4"/>
            <symbol>path</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_replication_interface.h" line="56" column="39"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_replication_interface.h" line="58" column="4"/>
            <symbol>id</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneCacheInterface&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneCacheInterface&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_cache_interface.h" line="90" column="2"/>
            <symbol>SceneCacheInterface</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;TrackedNode&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;TrackedNode&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/multiplayer/register_types.cpp">
            <location file="modules/multiplayer/scene_replication_interface.h" line="56" column="3"/>
            <symbol>TrackedNode</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used." cwe="563" file0="modules/multiplayer/scene_cache_interface.cpp">
            <location file="modules/multiplayer/scene_cache_interface.cpp" line="190" column="6"/>
            <symbol>ofs</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;set_multiplayer_peer&apos; is called from constructor &apos;SceneMultiplayer()&apos; at line 690. Dynamic binding is not used." verbose="Virtual function &apos;set_multiplayer_peer&apos; is called from constructor &apos;SceneMultiplayer()&apos; at line 690. Dynamic binding is not used." file0="modules/multiplayer/scene_multiplayer.cpp">
            <location file="modules/multiplayer/scene_multiplayer.h" line="153" column="15" info="set_multiplayer_peer is a virtual function"/>
            <location file="modules/multiplayer/scene_multiplayer.cpp" line="690" column="2" info="Calling set_multiplayer_peer"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used." cwe="563" file0="modules/multiplayer/scene_replication_interface.cpp">
            <location file="modules/multiplayer/scene_replication_interface.cpp" line="659" column="6"/>
            <symbol>ofs</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;NavigationPoly&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;NavigationPoly&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/navigation/2d/godot_navigation_server_2d.cpp">
            <location file="modules/navigation/nav_utils.h" line="131" column="2"/>
            <symbol>NavigationPoly</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="modules/navigation/2d/godot_navigation_server_2d.cpp">
            <location file="modules/navigation/nav_region.h" line="75" column="7" info="Function in derived class"/>
            <location file="modules/navigation/nav_base.h" line="52" column="15" info="Virtual function in base class"/>
            <symbol>set_use_edge_connections</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_use_edge_connections&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="modules/navigation/2d/godot_navigation_server_2d.cpp">
            <location file="modules/navigation/nav_region.h" line="76" column="7" info="Function in derived class"/>
            <location file="modules/navigation/nav_base.h" line="53" column="15" info="Virtual function in base class"/>
            <symbol>get_use_edge_connections</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;free_command&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;free_command&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/navigation/3d/godot_navigation_server_3d.cpp">
            <location file="modules/navigation/3d/godot_navigation_server_3d.cpp" line="1151" column="1"/>
            <symbol>free_command</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="769" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="693" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="783" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="769" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="789" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="783" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="812" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="789" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="871" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="860" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="878" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="871" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="893" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="878" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="940" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="893" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;bake_state&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/navigation/3d/nav_mesh_generator_3d.cpp">
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="947" column="13" info="bake_state is overwritten"/>
            <location file="modules/navigation/3d/nav_mesh_generator_3d.cpp" line="940" column="13" info="bake_state is assigned"/>
            <symbol>bake_state</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/navigation/nav_map.cpp">
            <location file="modules/navigation/nav_map.cpp" line="1076" column="33"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;noise&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;noise&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/noise/noise_texture_2d.cpp">
            <location file="modules/noise/noise_texture_2d.cpp" line="36" column="2"/>
            <symbol>noise</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;noise&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;noise&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/noise/noise_texture_3d.cpp">
            <location file="modules/noise/noise_texture_3d.cpp" line="36" column="2"/>
            <symbol>noise</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRActionEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRActionEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/editor/openxr_action_editor.cpp">
            <location file="modules/openxr/editor/openxr_action_editor.h" line="72" column="2"/>
            <symbol>OpenXRActionEditor</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRSelectActionDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRSelectActionDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/editor/openxr_action_map_editor.cpp">
            <location file="modules/openxr/editor/openxr_select_action_dialog.h" line="65" column="2"/>
            <symbol>OpenXRSelectActionDialog</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/openxr/editor/openxr_interaction_profile_editor.cpp">
            <location file="modules/openxr/editor/openxr_interaction_profile_editor.cpp" line="252" column="63"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;action_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;action_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_select_action_dialog.cpp">
            <location file="modules/openxr/editor/openxr_select_action_dialog.cpp" line="121" column="2"/>
            <symbol>action_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;embree_device&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;embree_device&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/raycast/lightmap_raycaster_embree.cpp">
            <location file="modules/raycast/lightmap_raycaster_embree.cpp" line="182" column="2"/>
            <symbol>embree_device</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/raycast/lightmap_raycaster_embree.cpp">
            <location file="modules/raycast/lightmap_raycaster_embree.cpp" line="54" column="35"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/regex/regex.cpp">
            <location file="modules/regex/regex.h" line="106" column="2"/>
            <symbol>RegEx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_end&apos; can be reduced." verbose="The scope of the variable &apos;last_end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/regex/regex.cpp">
            <location file="modules/regex/regex.cpp" line="276" column="6"/>
            <symbol>last_end</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;last_end&apos; is assigned a value that is never used." verbose="Variable &apos;last_end&apos; is assigned a value that is never used." cwe="563" file0="modules/regex/regex.cpp">
            <location file="modules/regex/regex.cpp" line="276" column="15"/>
            <symbol>last_end</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::header_size&apos; is never used." verbose="struct member &apos;ICU_data_header::header_size&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="36" column="11"/>
            <symbol>ICU_data_header::header_size</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::magic_1&apos; is never used." verbose="struct member &apos;ICU_data_header::magic_1&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="37" column="10"/>
            <symbol>ICU_data_header::magic_1</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::magic_2&apos; is never used." verbose="struct member &apos;ICU_data_header::magic_2&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="37" column="19"/>
            <symbol>ICU_data_header::magic_2</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::padding&apos; is never used." verbose="struct member &apos;ICU_data_header::padding&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="39" column="7"/>
            <symbol>ICU_data_header::padding</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::count&apos; is never used." verbose="struct member &apos;ICU_data_header::count&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="40" column="11"/>
            <symbol>ICU_data_header::count</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::reserved&apos; is never used." verbose="struct member &apos;ICU_data_header::reserved&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="40" column="18"/>
            <symbol>ICU_data_header::reserved</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::fake_name_and_data&apos; is never used." verbose="struct member &apos;ICU_data_header::fake_name_and_data&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="41" column="6"/>
            <symbol>ICU_data_header::fake_name_and_data</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;font_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;font_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_adv/register_types.cpp">
            <location file="modules/text_server_adv/text_server_adv.h" line="593" column="4"/>
            <symbol>font_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;antialiasing&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;antialiasing&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_adv/register_types.cpp">
            <location file="modules/text_server_adv/text_server_adv.h" line="597" column="4"/>
            <symbol>antialiasing</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p_h&lt;E.h&apos; is always true" verbose="Condition &apos;p_h&lt;E.h&apos; is always true" cwe="571" file0="modules/text_server_adv/register_types.cpp">
            <location file="modules/text_server_adv/text_server_adv.h" line="237" column="13" info="Condition &apos;p_h&lt;E.h&apos; is always true"/>
            <location file="modules/text_server_adv/text_server_adv.h" line="234" column="13" info="Assuming condition is false"/>
            <location file="modules/text_server_adv/text_server_adv.h" line="231" column="13" info="Assuming that condition &apos;p_h==E.h&apos; is not redundant"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;FT_CONFIG_OPTION_USE_BROTLI;_MSC_VER;MODULE_FREETYPE_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;FT_CONFIG_OPTION_USE_BROTLI;_MSC_VER;MODULE_FREETYPE_ENABLED&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (fdv-&gt;extra_spacing[p_spacing]!=p_value) fdv-&gt;extra_spacing[p_spacing]=p_value&apos; is logically equivalent to &apos;fdv-&gt;extra_spacing[p_spacing]=p_value&apos;." verbose="The statement &apos;if (fdv-&gt;extra_spacing[p_spacing]!=p_value) fdv-&gt;extra_spacing[p_spacing]=p_value&apos; is logically equivalent to &apos;fdv-&gt;extra_spacing[p_spacing]=p_value&apos;." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="2469" column="37" info="Condition &apos;fdv-&gt;extra_spacing[p_spacing]!=p_value&apos; is redundant"/>
            <location file="modules/text_server_adv/text_server_adv.cpp" line="2470" column="34" info="Assignment &apos;fdv-&gt;extra_spacing[p_spacing]=p_value&apos;"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (fd-&gt;extra_spacing[p_spacing]!=p_value) fd-&gt;extra_spacing[p_spacing]=p_value&apos; is logically equivalent to &apos;fd-&gt;extra_spacing[p_spacing]=p_value&apos;." verbose="The statement &apos;if (fd-&gt;extra_spacing[p_spacing]!=p_value) fd-&gt;extra_spacing[p_spacing]=p_value&apos; is logically equivalent to &apos;fd-&gt;extra_spacing[p_spacing]=p_value&apos;." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="2477" column="36" info="Condition &apos;fd-&gt;extra_spacing[p_spacing]!=p_value&apos; is redundant"/>
            <location file="modules/text_server_adv/text_server_adv.cpp" line="2478" column="33" info="Assignment &apos;fd-&gt;extra_spacing[p_spacing]=p_value&apos;"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (fdv-&gt;baseline_offset!=p_baseline_offset) fdv-&gt;baseline_offset=p_baseline_offset&apos; is logically equivalent to &apos;fdv-&gt;baseline_offset=p_baseline_offset&apos;." verbose="The statement &apos;if (fdv-&gt;baseline_offset!=p_baseline_offset) fdv-&gt;baseline_offset=p_baseline_offset&apos; is logically equivalent to &apos;fdv-&gt;baseline_offset=p_baseline_offset&apos;." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="2500" column="28" info="Condition &apos;fdv-&gt;baseline_offset!=p_baseline_offset&apos; is redundant"/>
            <location file="modules/text_server_adv/text_server_adv.cpp" line="2501" column="25" info="Assignment &apos;fdv-&gt;baseline_offset=p_baseline_offset&apos;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found_dot_char&apos; can be reduced." verbose="The scope of the variable &apos;found_dot_char&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5260" column="8"/>
            <symbol>found_dot_char</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ell_min_characters&apos; can be reduced." verbose="The scope of the variable &apos;ell_min_characters&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5300" column="6"/>
            <symbol>ell_min_characters</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_valid_cut&apos; can be reduced." verbose="The scope of the variable &apos;last_valid_cut&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5308" column="6"/>
            <symbol>last_valid_cut</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5309" column="7"/>
            <symbol>found</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;ICU_STATIC_DATA&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;ICU_STATIC_DATA&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_MSDFGEN_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_MSDFGEN_ENABLED&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_SVG_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_SVG_ENABLED&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED;_MSC_VER&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED;_MSC_VER&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_SVG_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_SVG_ENABLED&apos;." file0="modules/text_server_adv/text_server_adv.cpp">
            <location file="modules/text_server_adv/text_server_adv.cpp" line="5191" column="1"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;font_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;font_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_fb/register_types.cpp">
            <location file="modules/text_server_fb/text_server_fb.h" line="509" column="4"/>
            <symbol>font_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;antialiasing&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;antialiasing&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/text_server_fb/register_types.cpp">
            <location file="modules/text_server_fb/text_server_fb.h" line="513" column="4"/>
            <symbol>antialiasing</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p_h&lt;E.h&apos; is always true" verbose="Condition &apos;p_h&lt;E.h&apos; is always true" cwe="571" file0="modules/text_server_fb/register_types.cpp">
            <location file="modules/text_server_fb/text_server_fb.h" line="193" column="13" info="Condition &apos;p_h&lt;E.h&apos; is always true"/>
            <location file="modules/text_server_fb/text_server_fb.h" line="190" column="13" info="Assuming condition is false"/>
            <location file="modules/text_server_fb/text_server_fb.h" line="187" column="13" info="Assuming that condition &apos;p_h==E.h&apos; is not redundant"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;FT_CONFIG_OPTION_USE_BROTLI;_MSC_VER;MODULE_FREETYPE_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;FT_CONFIG_OPTION_USE_BROTLI;_MSC_VER;MODULE_FREETYPE_ENABLED&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (fdv-&gt;extra_spacing[p_spacing]!=p_value) fdv-&gt;extra_spacing[p_spacing]=p_value&apos; is logically equivalent to &apos;fdv-&gt;extra_spacing[p_spacing]=p_value&apos;." verbose="The statement &apos;if (fdv-&gt;extra_spacing[p_spacing]!=p_value) fdv-&gt;extra_spacing[p_spacing]=p_value&apos; is logically equivalent to &apos;fdv-&gt;extra_spacing[p_spacing]=p_value&apos;." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="1472" column="37" info="Condition &apos;fdv-&gt;extra_spacing[p_spacing]!=p_value&apos; is redundant"/>
            <location file="modules/text_server_fb/text_server_fb.cpp" line="1473" column="34" info="Assignment &apos;fdv-&gt;extra_spacing[p_spacing]=p_value&apos;"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (fdv-&gt;baseline_offset!=p_baseline_offset) fdv-&gt;baseline_offset=p_baseline_offset&apos; is logically equivalent to &apos;fdv-&gt;baseline_offset=p_baseline_offset&apos;." verbose="The statement &apos;if (fdv-&gt;baseline_offset!=p_baseline_offset) fdv-&gt;baseline_offset=p_baseline_offset&apos; is logically equivalent to &apos;fdv-&gt;baseline_offset=p_baseline_offset&apos;." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="1504" column="28" info="Condition &apos;fdv-&gt;baseline_offset!=p_baseline_offset&apos; is redundant"/>
            <location file="modules/text_server_fb/text_server_fb.cpp" line="1505" column="25" info="Assignment &apos;fdv-&gt;baseline_offset=p_baseline_offset&apos;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c_next&apos; can be reduced." verbose="The scope of the variable &apos;c_next&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="3787" column="13"/>
            <symbol>c_next</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found_dot_char&apos; can be reduced." verbose="The scope of the variable &apos;found_dot_char&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4075" column="8"/>
            <symbol>found_dot_char</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ell_min_characters&apos; can be reduced." verbose="The scope of the variable &apos;ell_min_characters&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4115" column="6"/>
            <symbol>ell_min_characters</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_valid_cut&apos; can be reduced." verbose="The scope of the variable &apos;last_valid_cut&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4121" column="6"/>
            <symbol>last_valid_cut</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4122" column="7"/>
            <symbol>found</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_MSDFGEN_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_MSDFGEN_ENABLED&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_SVG_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_FREETYPE_ENABLED;MODULE_SVG_ENABLED&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED;_MSC_VER&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_MSDFGEN_ENABLED;_MSC_VER&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_SVG_ENABLED&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;MODULE_SVG_ENABLED&apos;." file0="modules/text_server_fb/text_server_fb.cpp">
            <location file="modules/text_server_fb/text_server_fb.cpp" line="4006" column="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="51" column="9"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="52" column="9"/>
            <symbol>count</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;tga_header.image_width&apos; is less than zero." verbose="The unsigned expression &apos;tga_header.image_width&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="304" column="29" info="Unsigned less than zero"/>
            <symbol>tga_header.image_width</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;tga_header.image_height&apos; is less than zero." verbose="The unsigned expression &apos;tga_header.image_height&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="304" column="61" info="Unsigned less than zero"/>
            <symbol>tga_header.image_height</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used." cwe="563" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="51" column="11"/>
            <symbol>c</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;count&apos; is assigned a value that is never used." verbose="Variable &apos;count&apos; is assigned a value that is never used." cwe="563" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="52" column="15"/>
            <symbol>count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;texture&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;texture&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/theora/video_stream_theora.cpp">
            <location file="modules/theora/video_stream_theora.cpp" line="631" column="2"/>
            <symbol>texture</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_loader_tinyexr.cpp">
            <location file="modules/tinyexr/image_loader_tinyexr.cpp" line="176" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_saver_tinyexr.cpp">
            <location file="modules/tinyexr/image_saver_tinyexr.cpp" line="209" column="27"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_saver_tinyexr.cpp">
            <location file="modules/tinyexr/image_saver_tinyexr.cpp" line="210" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/vorbis/audio_stream_ogg_vorbis.cpp">
            <location file="modules/vorbis/audio_stream_ogg_vorbis.cpp" line="310" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/vorbis/audio_stream_ogg_vorbis.cpp">
            <location file="modules/vorbis/audio_stream_ogg_vorbis.cpp" line="437" column="6"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/vorbis/resource_importer_ogg_vorbis.cpp">
            <location file="modules/vorbis/resource_importer_ogg_vorbis.cpp" line="141" column="6"/>
            <symbol>err</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCDataChannelJS()&apos; at line 212. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCDataChannelJS()&apos; at line 212. Dynamic binding is not used." file0="modules/webrtc/webrtc_data_channel_js.cpp">
            <location file="modules/webrtc/webrtc_data_channel_js.h" line="78" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_data_channel_js.cpp" line="212" column="2" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;WebRTCDataChannelJS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;WebRTCDataChannelJS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/webrtc/webrtc_data_channel_js.cpp">
            <location file="modules/webrtc/webrtc_data_channel_js.h" line="88" column="2"/>
            <symbol>WebRTCDataChannelJS</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCMultiplayerPeer()&apos; at line 455. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCMultiplayerPeer()&apos; at line 455. Dynamic binding is not used." file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.h" line="121" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="455" column="2" info="Calling close"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="207" column="51" info="Integer overflow"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="295" column="51" info="Integer overflow"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;initialize&apos; is called from constructor &apos;WebRTCPeerConnectionJS()&apos; at line 144. Dynamic binding is not used." verbose="Virtual function &apos;initialize&apos; is called from constructor &apos;WebRTCPeerConnectionJS()&apos; at line 144. Dynamic binding is not used." file0="modules/webrtc/webrtc_peer_connection_js.cpp">
            <location file="modules/webrtc/webrtc_peer_connection_js.h" line="78" column="16" info="initialize is a virtual function"/>
            <location file="modules/webrtc/webrtc_peer_connection_js.cpp" line="144" column="2" info="Calling initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCPeerConnectionJS()&apos; at line 148. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCPeerConnectionJS()&apos; at line 148. Dynamic binding is not used." file0="modules/webrtc/webrtc_peer_connection_js.cpp">
            <location file="modules/webrtc/webrtc_peer_connection_js.h" line="85" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_peer_connection_js.cpp" line="148" column="2" info="Calling close"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;stop&apos; is called from destructor &apos;~EditorDebuggerServerWebSocket()&apos; at line 132. Dynamic binding is not used." verbose="Virtual function &apos;stop&apos; is called from destructor &apos;~EditorDebuggerServerWebSocket()&apos; at line 132. Dynamic binding is not used." file0="modules/websocket/editor/editor_debugger_server_websocket.cpp">
            <location file="modules/websocket/editor/editor_debugger_server_websocket.h" line="59" column="15" info="stop is a virtual function"/>
            <location file="modules/websocket/editor/editor_debugger_server_websocket.cpp" line="132" column="2" info="Calling stop"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;peer_config&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;peer_config&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/websocket/websocket_multiplayer_peer.cpp">
            <location file="modules/websocket/websocket_multiplayer_peer.cpp" line="36" column="2"/>
            <symbol>peer_config</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WSLPeer()&apos; at line 847. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WSLPeer()&apos; at line 847. Dynamic binding is not used." file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.h" line="136" column="15" info="close is a virtual function"/>
            <location file="modules/websocket/wsl_peer.cpp" line="847" column="2" info="Calling close"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.cpp" line="564" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.cpp" line="585" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.cpp" line="612" column="18"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;WebXRInterfaceJS::input_sources&apos; is not initialized in the constructor." verbose="Member variable &apos;WebXRInterfaceJS::input_sources&apos; is not initialized in the constructor." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="870" column="19"/>
            <symbol>WebXRInterfaceJS::input_sources</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;session_mode&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;session_mode&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="872" column="2"/>
            <symbol>session_mode</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;requested_reference_space_types&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;requested_reference_space_types&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="873" column="2"/>
            <symbol>requested_reference_space_types</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~WebXRInterfaceJS()&apos; at line 879. Dynamic binding is not used." verbose="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~WebXRInterfaceJS()&apos; at line 879. Dynamic binding is not used." file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.h" line="127" column="15" info="uninitialize is a virtual function"/>
            <location file="modules/webxr/webxr_interface_js.cpp" line="879" column="3" info="Calling uninitialize"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="modules/xatlas_unwrap/register_types.cpp">
            <location file="modules/xatlas_unwrap/register_types.cpp" line="100" column="11"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/api/api.cpp">
            <location file="platform/android/api/jni_singleton.h" line="84" column="18"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/api/api.cpp">
            <location file="platform/android/api/jni_singleton.h" line="234" column="3"/>
            <symbol>instance</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;res&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;res&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/audio_driver_opensl.cpp">
            <location file="platform/android/audio_driver_opensl.cpp" line="180" column="6" info="res is overwritten"/>
            <location file="platform/android/audio_driver_opensl.cpp" line="177" column="7" info="res is assigned"/>
            <symbol>res</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessJAndroid()&apos; at line 340. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessJAndroid()&apos; at line 340. Dynamic binding is not used." file0="platform/android/dir_access_jandroid.cpp">
            <location file="platform/android/dir_access_jandroid.h" line="68" column="15" info="list_dir_end is a virtual function"/>
            <location file="platform/android/dir_access_jandroid.cpp" line="340" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;DisplayServerAndroid::swap_buffers_flag&apos; is not initialized in the constructor." verbose="Member variable &apos;DisplayServerAndroid::swap_buffers_flag&apos; is not initialized in the constructor." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="586" column="23"/>
            <symbol>DisplayServerAndroid::swap_buffers_flag</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rendering_driver&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rendering_driver&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="587" column="2"/>
            <symbol>rendering_driver</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotJavaViewWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotJavaViewWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/java_godot_view_wrapper.h" line="56" column="2"/>
            <symbol>GodotJavaViewWrapper</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;rendering_context&apos; is always false" verbose="Condition &apos;rendering_context&apos; is always false" cwe="570" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="609" column="6" info="Condition &apos;rendering_context&apos; is always false"/>
            <location file="platform/android/display_server_android.cpp" line="600" column="22" info="Assignment &apos;rendering_context=nullptr&apos;, assigned value is 0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;abi&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;abi&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/export/export.cpp">
            <location file="platform/android/export/export_plugin.h" line="123" column="4"/>
            <symbol>abi</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;arch&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;arch&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/export/export.cpp">
            <location file="platform/android/export/export_plugin.h" line="124" column="4"/>
            <symbol>arch</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;found_target_sdk&apos; is always true" verbose="Condition &apos;found_target_sdk&apos; is always true" cwe="571" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2313" column="23" info="Condition &apos;found_target_sdk&apos; is always true"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2088" column="6" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="2071" column="7" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2169" column="6" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="2136" column="9" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="3507" column="7" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="3501" column="6" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;min_sdk_int&apos; is assigned a value that is never used." verbose="Variable &apos;min_sdk_int&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="1776" column="20"/>
            <symbol>min_sdk_int</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." verbose="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="1793" column="23"/>
            <symbol>target_sdk_int</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." verbose="Variable &apos;target_sdk_int&apos; is assigned a value that is never used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2613" column="21"/>
            <symbol>target_sdk_int</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 415. Dynamic binding is not used." verbose="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 415. Dynamic binding is not used." file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.h" line="66" column="15" info="is_open is a virtual function"/>
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="415" column="6" info="Calling is_open"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 416. Dynamic binding is not used." verbose="Virtual function &apos;is_open&apos; is called from destructor &apos;~FileAccessFilesystemJAndroid()&apos; at line 416. Dynamic binding is not used." file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.h" line="66" column="15" info="is_open is a virtual function"/>
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="95" column="7" info="Calling is_open"/>
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="416" column="3" info="Calling _close"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;line_buffer_size&apos; is less than zero." verbose="The unsigned expression &apos;line_buffer_size&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="223" column="24" info="Unsigned less than zero"/>
            <symbol>line_buffer_size</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;bytes_read&apos; is less than zero." verbose="The unsigned expression &apos;bytes_read&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="platform/android/file_access_filesystem_jandroid.cpp">
            <location file="platform/android/file_access_filesystem_jandroid.cpp" line="232" column="18" info="Unsigned less than zero"/>
            <symbol>bytes_read</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_class_wrapper.cpp">
            <location file="platform/android/java_class_wrapper.cpp" line="157" column="20"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;godot_io_instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;godot_io_instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_io_wrapper.cpp">
            <location file="platform/android/java_godot_io_wrapper.cpp" line="43" column="2"/>
            <symbol>godot_io_instance</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="493" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="494" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="516" column="29"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="517" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obj&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obj&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/jni_utils.h" line="44" column="14"/>
            <symbol>obj</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="531" column="29"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;godot_instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;godot_instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_wrapper.cpp">
            <location file="platform/android/java_godot_wrapper.cpp" line="41" column="2"/>
            <symbol>godot_instance</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketAndroid()&apos; at line 83. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketAndroid()&apos; at line 83. Dynamic binding is not used." file0="platform/android/net_socket_android.cpp">
            <location file="platform/android/net_socket_android.h" line="68" column="15" info="close is a virtual function"/>
            <location file="platform/android/net_socket_android.cpp" line="83" column="2" info="Calling close"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/plugin/godot_plugin_jni.cpp">
            <location file="platform/android/plugin/godot_plugin_jni.cpp" line="135" column="39"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/plugin/godot_plugin_jni.cpp">
            <location file="platform/android/plugin/godot_plugin_jni.cpp" line="136" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/android/rendering_context_driver_vulkan_android.cpp">
            <location file="platform/android/rendering_context_driver_vulkan_android.cpp" line="46" column="35"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/ios/export/export.cpp">
            <location file="platform/ios/export/export_plugin.h" line="117" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;devices&apos; shadows outer variable" verbose="Local variable &apos;devices&apos; shadows outer variable" cwe="398" file0="platform/ios/export/export_plugin.cpp">
            <location file="platform/ios/export/export_plugin.cpp" line="2838" column="12" info="Shadow variable"/>
            <location file="platform/ios/export/export_plugin.cpp" line="2820" column="11" info="Shadowed declaration"/>
            <symbol>devices</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;devices&apos; shadows outer variable" verbose="Local variable &apos;devices&apos; shadows outer variable" cwe="398" file0="platform/ios/export/export_plugin.cpp">
            <location file="platform/ios/export/export_plugin.cpp" line="2876" column="20" info="Shadow variable"/>
            <location file="platform/ios/export/export_plugin.cpp" line="2859" column="12" info="Shadowed declaration"/>
            <symbol>devices</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;devices&apos; shadows outer variable" verbose="Local variable &apos;devices&apos; shadows outer variable" cwe="398" file0="platform/ios/export/export_plugin.cpp">
            <location file="platform/ios/export/export_plugin.cpp" line="2911" column="25" info="Shadow variable"/>
            <location file="platform/ios/export/export_plugin.cpp" line="2896" column="12" info="Shadowed declaration"/>
            <symbol>devices</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;host&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;host&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="53" column="4"/>
            <symbol>host</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;port&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;port&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="54" column="4"/>
            <symbol>port</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ssh_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ssh_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="55" column="4"/>
            <symbol>ssh_args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cmd_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cmd_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/export/export.cpp">
            <location file="platform/linuxbsd/export/export_plugin.h" line="56" column="4"/>
            <symbol>cmd_args</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;unsupported&apos; is always false" verbose="Condition &apos;unsupported&apos; is always false" cwe="570" file0="platform/linuxbsd/freedesktop_portal_desktop.cpp">
            <location file="platform/linuxbsd/freedesktop_portal_desktop.cpp" line="638" column="6" info="Condition &apos;unsupported&apos; is always false"/>
            <location file="platform/linuxbsd/freedesktop_portal_desktop.cpp" line="635" column="16" info="Assignment &apos;unsupported=false&apos;, assigned value is 0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/freedesktop_portal_desktop.cpp">
            <location file="platform/linuxbsd/freedesktop_portal_desktop.cpp" line="545" column="37"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;unsupported&apos; is always false" verbose="Condition &apos;unsupported&apos; is always false" cwe="570" file0="platform/linuxbsd/freedesktop_screensaver.cpp">
            <location file="platform/linuxbsd/freedesktop_screensaver.cpp" line="145" column="6" info="Condition &apos;unsupported&apos; is always false"/>
            <location file="platform/linuxbsd/freedesktop_screensaver.cpp" line="142" column="16" info="Assignment &apos;unsupported=false&apos;, assigned value is 0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadLinux&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadLinux&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/linuxbsd/godot_linuxbsd.cpp">
            <location file="platform/linuxbsd/joypad_linux.h" line="45" column="2"/>
            <symbol>JoypadLinux</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="489" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dev&apos; can be reduced." verbose="The scope of the variable &apos;dev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="164" column="15"/>
            <symbol>dev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;joypad&apos; can be reduced." verbose="The scope of the variable &apos;joypad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="268" column="11"/>
            <symbol>joypad</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;font_config_initialized&apos; is always true" verbose="Condition &apos;font_config_initialized&apos; is always true" cwe="571" file0="platform/linuxbsd/os_linuxbsd.cpp">
            <location file="platform/linuxbsd/os_linuxbsd.cpp" line="1213" column="6" info="Condition &apos;font_config_initialized&apos; is always true"/>
            <location file="platform/linuxbsd/os_linuxbsd.cpp" line="1211" column="28" info="Assignment &apos;font_config_initialized=true&apos;, assigned value is 1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/tts_linux.cpp">
            <location file="platform/linuxbsd/tts_linux.cpp" line="39" column="19"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;context&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;context&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/linuxbsd/wayland/display_server_wayland.cpp">
            <location file="platform/linuxbsd/wayland/display_server_wayland.cpp" line="1331" column="2"/>
            <symbol>context</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerWayland(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Context p_context,Error&amp;r_error)&apos; at line 1456. Dynamic binding is not used." verbose="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerWayland(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Context p_context,Error&amp;r_error)&apos; at line 1456. Dynamic binding is not used." file0="platform/linuxbsd/wayland/display_server_wayland.cpp">
            <location file="platform/linuxbsd/wayland/display_server_wayland.h" line="273" column="15" info="cursor_set_shape is a virtual function"/>
            <location file="platform/linuxbsd/wayland/display_server_wayland.cpp" line="1456" column="2" info="Calling cursor_set_shape"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_show_window&apos; is called from constructor &apos;DisplayServerWayland(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Context p_context,Error&amp;r_error)&apos; at line 1467. Dynamic binding is not used." verbose="Virtual function &apos;_show_window&apos; is called from constructor &apos;DisplayServerWayland(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Context p_context,Error&amp;r_error)&apos; at line 1467. Dynamic binding is not used." file0="platform/linuxbsd/wayland/display_server_wayland.cpp">
            <location file="platform/linuxbsd/wayland/display_server_wayland.h" line="155" column="15" info="_show_window is a virtual function"/>
            <location file="platform/linuxbsd/wayland/display_server_wayland.cpp" line="1467" column="2" info="Calling _show_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerWayland(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Context p_context,Error&amp;r_error)&apos; at line 1491. Dynamic binding is not used." verbose="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerWayland(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Context p_context,Error&amp;r_error)&apos; at line 1491. Dynamic binding is not used." file0="platform/linuxbsd/wayland/display_server_wayland.cpp">
            <location file="platform/linuxbsd/wayland/display_server_wayland.h" line="206" column="15" info="screen_set_keep_on is a virtual function"/>
            <location file="platform/linuxbsd/wayland/display_server_wayland.cpp" line="1491" column="2" info="Calling screen_set_keep_on"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/display_server_wayland.cpp">
            <location file="platform/linuxbsd/wayland/display_server_wayland.cpp" line="89" column="3"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;wd&apos; can be declared with const" verbose="Variable &apos;wd&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/wayland/display_server_wayland.cpp">
            <location file="platform/linuxbsd/wayland/display_server_wayland.cpp" line="826" column="14" info="Variable &apos;wd&apos; can be declared with const"/>
            <symbol>wd</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/rendering_context_driver_vulkan_wayland.cpp">
            <location file="platform/linuxbsd/wayland/rendering_context_driver_vulkan_wayland.cpp" line="46" column="35"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;WaylandThread&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;WaylandThread&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.h" line="84" column="1"/>
            <symbol>WaylandThread</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1744" column="11" info="Second condition"/>
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1740" column="11" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1765" column="11" info="Second condition"/>
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1761" column="11" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!decorated&apos; is always true" verbose="Condition &apos;!decorated&apos; is always true" cwe="571" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3228" column="6" info="Condition &apos;!decorated&apos; is always true"/>
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3217" column="19" info="Assignment &apos;decorated=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;ss&apos; is always true" verbose="Condition &apos;ss&apos; is always true" cwe="571" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3644" column="6" info="Condition &apos;ss&apos; is always true"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="364" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="575" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="943" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="962" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="991" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1008" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1030" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1049" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1060" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1081" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1088" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1125" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1138" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1166" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1258" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1348" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1365" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1389" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1405" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1428" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1480" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1504" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1709" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1727" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1751" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1777" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1799" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1814" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1829" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1865" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1879" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1893" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1905" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1919" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1950" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1962" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1980" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2018" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2042" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2051" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2073" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2083" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2142" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2155" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2167" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2176" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2206" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2224" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2585" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2594" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2613" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2661" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2674" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2697" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2710" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2800" column="10"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2810" column="10"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2820" column="10"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2830" column="10"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2839" column="10"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2849" column="10"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ss-&gt;pending_data.position.x&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ss-&gt;pending_data.position.x&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1013" column="30" info="ss-&gt;pending_data.position.x is overwritten"/>
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1011" column="30" info="ss-&gt;pending_data.position.x is assigned"/>
            <symbol>ss-&gt;pending_data.position.x</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pd&apos; can be reduced." verbose="The scope of the variable &apos;pd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2089" column="15"/>
            <symbol>pd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;td&apos; can be reduced." verbose="The scope of the variable &apos;td&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2441" column="18"/>
            <symbol>td</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;wp_primary_selection_source_v1&apos; can be declared with const" verbose="Parameter &apos;wp_primary_selection_source_v1&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2205" column="115" info="Parameter &apos;wp_primary_selection_source_v1&apos; can be declared with const"/>
            <symbol>wp_primary_selection_source_v1</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;wp_primary_selection_source_v1&apos; can be declared with const" verbose="Parameter &apos;wp_primary_selection_source_v1&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="2175" column="110" info="Parameter &apos;wp_primary_selection_source_v1&apos; can be declared with const"/>
            <symbol>wp_primary_selection_source_v1</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;wl_data_source&apos; can be declared with const" verbose="Parameter &apos;wl_data_source&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1979" column="80" info="Parameter &apos;wl_data_source&apos; can be declared with const"/>
            <symbol>wl_data_source</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;decorated&apos; is assigned a value that is never used." verbose="Variable &apos;decorated&apos; is assigned a value that is never used." cwe="563" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3242" column="14"/>
            <symbol>decorated</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!decorated&apos; is always true" verbose="Condition &apos;!decorated&apos; is always true" cwe="571" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3220" column="6" info="Condition &apos;!decorated&apos; is always true"/>
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3217" column="19" info="Assignment &apos;decorated=false&apos;, assigned value is 0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1191" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="1234" column="20"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;libdecor_found&apos; is always true" verbose="Condition &apos;libdecor_found&apos; is always true" cwe="571" file0="platform/linuxbsd/wayland/wayland_thread.cpp">
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3741" column="6" info="Condition &apos;libdecor_found&apos; is always true"/>
            <location file="platform/linuxbsd/wayland/wayland_thread.cpp" line="3733" column="24" info="Assignment &apos;libdecor_found=true&apos;, assigned value is 1"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_usable_rect&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6269. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_usable_rect&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6269. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="428" column="17" info="screen_get_usable_rect is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6269" column="21" info="Calling screen_get_usable_rect"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_get_mode&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6273. Dynamic binding is not used." verbose="Virtual function &apos;window_get_mode&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6273. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="486" column="21" info="window_get_mode is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="2129" column="27" info="Calling window_get_mode"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5740" column="3" info="Calling _update_size_hints"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6273" column="25" info="Calling _create_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6280. Dynamic binding is not used." verbose="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6280. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="490" column="15" info="window_set_flag is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6280" column="4" info="Calling window_set_flag"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6283. Dynamic binding is not used." verbose="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6283. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="442" column="15" info="show_window is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6283" column="2" info="Calling show_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6435. Dynamic binding is not used." verbose="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6435. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="513" column="15" info="cursor_set_shape is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6435" column="2" info="Calling cursor_set_shape"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6450. Dynamic binding is not used." verbose="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i*p_position,const Vector2i&amp;p_resolution,int p_screen,Context p_context,Error&amp;r_error)&apos; at line 6450. Dynamic binding is not used." file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.h" line="435" column="15" info="screen_set_keep_on is a virtual function"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6450" column="2" info="Calling screen_set_keep_on"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;direct_touch&apos; is always false" verbose="Condition &apos;direct_touch&apos; is always false" cwe="570" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="260" column="7" info="Condition &apos;direct_touch&apos; is always false"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="215" column="23" info="Assignment &apos;direct_touch=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!vi_selected&apos; is always true" verbose="Condition &apos;!vi_selected&apos; is always true" cwe="571" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5483" column="6" info="Condition &apos;!vi_selected&apos; is always true"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5457" column="21" info="Assignment &apos;vi_selected=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;modifiers==nullptr&apos; is always true" verbose="Condition &apos;modifiers==nullptr&apos; is always true" cwe="571" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6050" column="16" info="Condition &apos;modifiers==nullptr&apos; is always true"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6036" column="20" info="Assignment &apos;modifiers=nullptr&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!driver_found&apos; is always true" verbose="Condition &apos;!driver_found&apos; is always true" cwe="571" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6257" column="6" info="Condition &apos;!driver_found&apos; is always true"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="6162" column="22" info="Assignment &apos;driver_found=false&apos;, assigned value is 0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1227" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="738" column="15"/>
            <symbol>result</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wd&apos; can be reduced." verbose="The scope of the variable &apos;wd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="2049" column="14"/>
            <symbol>wd</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1183" column="2" info="Shadow variable"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1180" column="53" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1460" column="2" info="Shadow variable"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1457" column="42" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_screen&apos; shadows outer argument" verbose="Local variable &apos;p_screen&apos; shadows outer argument" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1654" column="2" info="Shadow variable"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="1651" column="53" info="Shadowed declaration"/>
            <symbol>p_screen</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;wd&apos; can be declared with const" verbose="Variable &apos;wd&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="4219" column="14" info="Variable &apos;wd&apos; can be declared with const"/>
            <symbol>wd</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;xkb_loaded&apos; is always true" verbose="Condition &apos;xkb_loaded&apos; is always true" cwe="571" file0="platform/linuxbsd/x11/display_server_x11.cpp">
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5928" column="6" info="Condition &apos;xkb_loaded&apos; is always true"/>
            <location file="platform/linuxbsd/x11/display_server_x11.cpp" line="5921" column="20" info="Assignment &apos;xkb_loaded=true&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;visual_attribs&apos; can be reduced." verbose="The scope of the variable &apos;visual_attribs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/x11/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/x11/gl_manager_x11.cpp" line="108" column="13"/>
            <symbol>visual_attribs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;visual_attribs_layered&apos; can be reduced." verbose="The scope of the variable &apos;visual_attribs_layered&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/x11/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/x11/gl_manager_x11.cpp" line="119" column="13"/>
            <symbol>visual_attribs_layered</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/x11/rendering_context_driver_vulkan_x11.cpp">
            <location file="platform/linuxbsd/x11/rendering_context_driver_vulkan_x11.cpp" line="46" column="35"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;host&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;host&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="73" column="4"/>
            <symbol>host</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;port&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;port&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="74" column="4"/>
            <symbol>port</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ssh_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ssh_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="75" column="4"/>
            <symbol>ssh_args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cmd_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cmd_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/macos/export/export.cpp">
            <location file="platform/macos/export/export_plugin.h" line="76" column="4"/>
            <symbol>cmd_args</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="platform/web/audio_driver_web.cpp">
            <location file="platform/web/audio_driver_web.cpp" line="72" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/web/display_server_web.cpp">
            <location file="platform/web/display_server_web.cpp" line="480" column="25"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~HTTPClientWeb()&apos; at line 279. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~HTTPClientWeb()&apos; at line 279. Dynamic binding is not used." file0="platform/web/http_client_web.cpp">
            <location file="platform/web/http_client_web.h" line="91" column="7" info="close is a virtual function"/>
            <location file="platform/web/http_client_web.cpp" line="279" column="2" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JavaScriptObjectImpl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JavaScriptObjectImpl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/web/javascript_bridge_singleton.cpp">
            <location file="platform/web/javascript_bridge_singleton.cpp" line="88" column="2"/>
            <symbol>JavaScriptObjectImpl</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/web/javascript_bridge_singleton.cpp">
            <location file="platform/web/javascript_bridge_singleton.cpp" line="228" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/web/javascript_bridge_singleton.cpp">
            <location file="platform/web/javascript_bridge_singleton.cpp" line="250" column="36"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;get_mod_info&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;get_mod_info&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/crash_handler_windows_seh.cpp">
            <location file="platform/windows/crash_handler_windows_seh.cpp" line="94" column="2"/>
            <symbol>get_mod_info</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;skip_first&apos; is always false" verbose="Condition &apos;skip_first&apos; is always false" cwe="570" file0="platform/windows/crash_handler_windows_seh.cpp">
            <location file="platform/windows/crash_handler_windows_seh.cpp" line="200" column="7" info="Condition &apos;skip_first&apos; is always false"/>
            <location file="platform/windows/crash_handler_windows_seh.cpp" line="167" column="20" info="Assignment &apos;skip_first=false&apos;, assigned value is 0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;host&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;host&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="57" column="4"/>
            <symbol>host</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;port&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;port&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="58" column="4"/>
            <symbol>port</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ssh_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ssh_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="59" column="4"/>
            <symbol>ssh_args</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cmd_args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cmd_args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/export/export.cpp">
            <location file="platform/windows/export/export_plugin.h" line="60" column="4"/>
            <symbol>cmd_args</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &apos;id_type == 1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="platform/windows/export/export_plugin.cpp">
            <location file="platform/windows/export/export_plugin.cpp" line="650" column="15"/>
            <location file="platform/windows/export/export_plugin.cpp" line="639" column="16" info="&apos;id_type&apos; is assigned value &apos;1&apos; here."/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;GLManagerNative_Windows::get_current_display&apos;" verbose="Unused private function: &apos;GLManagerNative_Windows::get_current_display&apos;" cwe="398" file0="platform/windows/gl_manager_windows_native.cpp">
            <location file="platform/windows/gl_manager_windows_native.h" line="74" column="19"/>
            <symbol>GLManagerNative_Windows::get_current_display</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ComAutoreleaseRef&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ComAutoreleaseRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/godot_windows.cpp">
            <location file="platform/windows/os_windows.h" line="84" column="2"/>
            <symbol>ComAutoreleaseRef</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/godot_windows.cpp">
            <location file="platform/windows/os_windows.h" line="243" column="2"/>
            <symbol>OS_Windows</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;last_pad&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;last_pad&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/joypad_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="85" column="4"/>
            <symbol>last_pad</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;di_joy&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;di_joy&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/joypad_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="88" column="4"/>
            <symbol>di_joy</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;guid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;guid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/joypad_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="89" column="4"/>
            <symbol>guid</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadWindows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadWindows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/joypad_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="55" column="2"/>
            <symbol>JoypadWindows</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/windows/rendering_context_driver_vulkan_windows.cpp">
            <location file="platform/windows/rendering_context_driver_vulkan_windows.cpp" line="59" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/windows/windows_utils.cpp">
            <location file="platform/windows/windows_utils.cpp" line="128" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/windows/windows_utils.cpp">
            <location file="platform/windows/windows_utils.cpp" line="132" column="35"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!_is_editing_in_editor()&apos; is always true" verbose="Condition &apos;!_is_editing_in_editor()&apos; is always true" cwe="571" file0="scene/2d/camera_2d.cpp">
            <location file="scene/2d/camera_2d.cpp" line="138" column="35" info="Condition &apos;!_is_editing_in_editor()&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!_is_editing_in_editor()&apos; is always true" verbose="Condition &apos;!_is_editing_in_editor()&apos; is always true" cwe="571" file0="scene/2d/camera_2d.cpp">
            <location file="scene/2d/camera_2d.cpp" line="151" column="33" info="Condition &apos;!_is_editing_in_editor()&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!_is_editing_in_editor()&apos; is always true" verbose="Condition &apos;!_is_editing_in_editor()&apos; is always true" cwe="571" file0="scene/2d/camera_2d.cpp">
            <location file="scene/2d/camera_2d.cpp" line="195" column="37" info="Condition &apos;!_is_editing_in_editor()&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!_is_editing_in_editor()&apos; is always true" verbose="Condition &apos;!_is_editing_in_editor()&apos; is always true" cwe="571" file0="scene/2d/camera_2d.cpp">
            <location file="scene/2d/camera_2d.cpp" line="214" column="37" info="Condition &apos;!_is_editing_in_editor()&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!_is_editing_in_editor()&apos; is always true" verbose="Condition &apos;!_is_editing_in_editor()&apos; is always true" cwe="571" file0="scene/2d/camera_2d.cpp">
            <location file="scene/2d/camera_2d.cpp" line="338" column="8" info="Condition &apos;!_is_editing_in_editor()&apos; is always true"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_light&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_light&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_2d.cpp">
            <location file="scene/2d/light_2d.cpp" line="334" column="2"/>
            <symbol>canvas_light</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occ_polygon&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occ_polygon&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_occluder_2d.cpp">
            <location file="scene/2d/light_occluder_2d.cpp" line="147" column="2"/>
            <symbol>occ_polygon</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluder&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluder&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_occluder_2d.cpp">
            <location file="scene/2d/light_occluder_2d.cpp" line="303" column="2"/>
            <symbol>occluder</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_distance0&apos; can be reduced." verbose="The scope of the variable &apos;current_distance0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/line_builder.cpp">
            <location file="scene/2d/line_builder.cpp" line="81" column="8"/>
            <symbol>current_distance0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uvx0&apos; can be reduced." verbose="The scope of the variable &apos;uvx0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/line_builder.cpp">
            <location file="scene/2d/line_builder.cpp" line="121" column="8"/>
            <symbol>uvx0</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_agent_2d.cpp">
            <location file="scene/2d/navigation_agent_2d.cpp" line="296" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;link&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;link&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_link_2d.cpp">
            <location file="scene/2d/navigation_link_2d.cpp" line="404" column="2"/>
            <symbol>link</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obstacle&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obstacle&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_obstacle_2d.cpp">
            <location file="scene/2d/navigation_obstacle_2d.cpp" line="174" column="2"/>
            <symbol>obstacle</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;joint&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;joint&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/physics/joints/joint_2d.cpp">
            <location file="scene/2d/physics/joints/joint_2d.cpp" line="250" column="2"/>
            <symbol>joint</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/2d/physics/physics_body_2d.cpp">
            <location file="scene/2d/physics/physics_body_2d.h" line="45" column="2"/>
            <symbol>PhysicsBody2D</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/2d/physics/rigid_body_2d.cpp">
            <location file="scene/2d/physics/rigid_body_2d.cpp" line="193" column="51"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/2d/physics/rigid_body_2d.cpp">
            <location file="scene/2d/physics/rigid_body_2d.cpp" line="195" column="68"/>
            <symbol>alloca</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/2d/physics/rigid_body_2d.cpp">
            <location file="scene/2d/physics/rigid_body_2d.cpp" line="193" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/2d/physics/rigid_body_2d.cpp">
            <location file="scene/2d/physics/rigid_body_2d.cpp" line="195" column="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/polygon_2d.cpp">
            <location file="scene/2d/polygon_2d.cpp" line="690" column="2"/>
            <symbol>mesh</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;length&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;length&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="491" column="2"/>
            <symbol>length</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_angle&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_angle&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="492" column="2"/>
            <symbol>bone_angle</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;skeleton&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;skeleton&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="833" column="2"/>
            <symbol>skeleton</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!in_editor&apos; is always true" verbose="Condition &apos;!in_editor&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="176" column="52" info="Condition &apos;!in_editor&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="172" column="21" info="Assignment &apos;in_editor=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!in_editor&apos; is always true" verbose="Condition &apos;!in_editor&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="193" column="52" info="Condition &apos;!in_editor&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="188" column="21" info="Assignment &apos;in_editor=false&apos;, assigned value is 0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;coords&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;coords&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.h" line="147" column="3"/>
            <symbol>coords</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cell&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cell&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.h" line="148" column="3"/>
            <symbol>cell</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluders&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluders&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.h" line="149" column="3"/>
            <symbol>occluders</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bodies&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bodies&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.h" line="150" column="3"/>
            <symbol>bodies</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;navigation_regions&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;navigation_regions&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.h" line="151" column="3"/>
            <symbol>navigation_regions</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scene&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scene&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.h" line="152" column="3"/>
            <symbol>scene</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="473" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="578" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="775" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="1036" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="1261" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="1376" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="650" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="1140" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map_layer.cpp">
            <location file="scene/2d/tile_map_layer.cpp" line="1306" column="17"/>
            <symbol>source</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unit_rect&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unit_rect&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/touch_screen_button.cpp">
            <location file="scene/2d/touch_screen_button.cpp" line="432" column="2"/>
            <symbol>unit_rect</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rect&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rect&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/visible_on_screen_notifier_2d.cpp">
            <location file="scene/2d/visible_on_screen_notifier_2d.cpp" line="110" column="2"/>
            <symbol>rect</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;camera&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;camera&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/camera_3d.cpp">
            <location file="scene/3d/camera_3d.cpp" line="882" column="2"/>
            <symbol>camera</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;decal&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;decal&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/decal.cpp">
            <location file="scene/3d/decal.cpp" line="279" column="2"/>
            <symbol>decal</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;volume&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;volume&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/fog_volume.cpp">
            <location file="scene/3d/fog_volume.cpp" line="136" column="2"/>
            <symbol>volume</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;collision&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;collision&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.cpp" line="55" column="2"/>
            <symbol>collision</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;collision&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;collision&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.cpp" line="873" column="2"/>
            <symbol>collision</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GPUParticlesCollision3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GPUParticlesCollision3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.h" line="47" column="2"/>
            <symbol>GPUParticlesCollision3D</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GPUParticlesAttractor3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GPUParticlesAttractor3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.h" line="277" column="2"/>
            <symbol>GPUParticlesAttractor3D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/light_3d.cpp">
            <location file="scene/3d/light_3d.cpp" line="432" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Light3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Light3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/light_3d.cpp">
            <location file="scene/3d/light_3d.h" line="101" column="2"/>
            <symbol>Light3D</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::tnear</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::time&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::tfar</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::u&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::u&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::u</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::v&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::v&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::v</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::primID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::instID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="74" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="74" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="scene/3d/lightmapper.h" line="65" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="scene/3d/lightmapper.h" line="65" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_agent_3d.cpp">
            <location file="scene/3d/navigation_agent_3d.cpp" line="328" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;link&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;link&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_link_3d.cpp">
            <location file="scene/3d/navigation_link_3d.cpp" line="242" column="2"/>
            <symbol>link</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obstacle&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obstacle&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_obstacle_3d.cpp">
            <location file="scene/3d/navigation_obstacle_3d.cpp" line="187" column="2"/>
            <symbol>obstacle</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/navigation_obstacle_3d.cpp">
            <location file="scene/3d/navigation_obstacle_3d.cpp" line="393" column="11"/>
            <symbol>y</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluder&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluder&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/occluder_instance_3d.cpp">
            <location file="scene/3d/occluder_instance_3d.cpp" line="133" column="2"/>
            <symbol>occluder</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;global_pose&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;global_pose&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/physical_bone_simulator_3d.cpp">
            <location file="scene/3d/physical_bone_simulator_3d.h" line="57" column="4"/>
            <symbol>global_pose</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;audio_bus&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;audio_bus&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/physics/area_3d.cpp">
            <location file="scene/3d/physics/area_3d.cpp" line="814" column="2"/>
            <symbol>audio_bus</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;result_state.wall&apos; is always true" verbose="Condition &apos;result_state.wall&apos; is always true" cwe="571" file0="scene/3d/physics/character_body_3d.cpp">
            <location file="scene/3d/physics/character_body_3d.cpp" line="291" column="71" info="Condition &apos;result_state.wall&apos; is always true"/>
            <location file="scene/3d/physics/character_body_3d.cpp" line="205" column="20" info="Assuming that condition &apos;result_state.wall&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!r_state.floor&apos; is always true" verbose="Condition &apos;!r_state.floor&apos; is always true" cwe="571" file0="scene/3d/physics/character_body_3d.cpp">
            <location file="scene/3d/physics/character_body_3d.cpp" line="583" column="8" info="Condition &apos;!r_state.floor&apos; is always true"/>
            <location file="scene/3d/physics/character_body_3d.cpp" line="581" column="35" info="Assuming that condition &apos;!r_state.floor&apos; is not redundant"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;joint&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;joint&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.cpp" line="1275" column="2"/>
            <symbol>joint</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="69" column="21" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="58" column="21" info="Virtual function in base class"/>
            <symbol>get_joint_type</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="71" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="61" column="16" info="Virtual function in base class"/>
            <symbol>_set</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="72" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="62" column="16" info="Virtual function in base class"/>
            <symbol>_get</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="73" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="63" column="16" info="Virtual function in base class"/>
            <symbol>_get_property_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="81" column="21" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="58" column="21" info="Virtual function in base class"/>
            <symbol>get_joint_type</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="83" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="61" column="16" info="Virtual function in base class"/>
            <symbol>_set</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="84" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="62" column="16" info="Virtual function in base class"/>
            <symbol>_get</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="85" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="63" column="16" info="Virtual function in base class"/>
            <symbol>_get_property_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="95" column="21" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="58" column="21" info="Virtual function in base class"/>
            <symbol>get_joint_type</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="97" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="61" column="16" info="Virtual function in base class"/>
            <symbol>_set</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="98" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="62" column="16" info="Virtual function in base class"/>
            <symbol>_get</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="99" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="63" column="16" info="Virtual function in base class"/>
            <symbol>_get_property_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="110" column="21" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="58" column="21" info="Virtual function in base class"/>
            <symbol>get_joint_type</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="112" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="61" column="16" info="Virtual function in base class"/>
            <symbol>_set</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="113" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="62" column="16" info="Virtual function in base class"/>
            <symbol>_get</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="114" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="63" column="16" info="Virtual function in base class"/>
            <symbol>_get_property_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_joint_type&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="153" column="21" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="58" column="21" info="Virtual function in base class"/>
            <symbol>get_joint_type</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_set&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="155" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="61" column="16" info="Virtual function in base class"/>
            <symbol>_set</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="156" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="62" column="16" info="Virtual function in base class"/>
            <symbol>_get</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;_get_property_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="scene/3d/physics/physical_bone_3d.cpp">
            <location file="scene/3d/physics/physical_bone_3d.h" line="157" column="16" info="Function in derived class"/>
            <location file="scene/3d/physics/physical_bone_3d.h" line="63" column="16" info="Virtual function in base class"/>
            <symbol>_get_property_list</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PhysicsBody3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PhysicsBody3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/physics/physics_body_3d.cpp">
            <location file="scene/3d/physics/physics_body_3d.h" line="45" column="2"/>
            <symbol>PhysicsBody3D</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertices_strip_order&apos; can be declared with const" verbose="Variable &apos;vertices_strip_order&apos; can be declared with const" cwe="398" file0="scene/3d/physics/ray_cast_3d.cpp">
            <location file="scene/3d/physics/ray_cast_3d.cpp" line="414" column="7" info="Variable &apos;vertices_strip_order&apos; can be declared with const"/>
            <symbol>vertices_strip_order</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;rel_vel&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;rel_vel&apos;. The initialized value is overwritten before it is read." cwe="563" file0="scene/3d/physics/vehicle_body_3d.cpp">
            <location file="scene/3d/physics/vehicle_body_3d.cpp" line="588" column="10" info="rel_vel is overwritten"/>
            <location file="scene/3d/physics/vehicle_body_3d.cpp" line="582" column="17" info="rel_vel is initialized"/>
            <symbol>rel_vel</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;probe&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;probe&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/reflection_probe.cpp">
            <location file="scene/3d/reflection_probe.cpp" line="288" column="2"/>
            <symbol>probe</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sub_chain_size&apos; can be reduced." verbose="The scope of the variable &apos;sub_chain_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/skeleton_ik_3d.cpp">
            <location file="scene/3d/skeleton_ik_3d.cpp" line="65" column="6"/>
            <symbol>sub_chain_size</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;spatial_attachment_path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;spatial_attachment_path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/soft_body_3d.cpp">
            <location file="scene/3d/soft_body_3d.cpp" line="108" column="2"/>
            <symbol>spatial_attachment_path</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/soft_body_3d.cpp">
            <location file="scene/3d/soft_body_3d.cpp" line="110" column="2"/>
            <symbol>offset</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="scene/3d/soft_body_3d.cpp">
            <location file="scene/3d/soft_body_3d.cpp" line="85" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;point_index&apos; can be reduced." verbose="The scope of the variable &apos;point_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/soft_body_3d.cpp">
            <location file="scene/3d/soft_body_3d.cpp" line="200" column="6"/>
            <symbol>point_index</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/3d/sprite_3d.cpp">
            <location file="scene/3d/sprite_3d.cpp" line="798" column="60"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/3d/sprite_3d.cpp">
            <location file="scene/3d/sprite_3d.cpp" line="802" column="57"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_screen_enter&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 93. Dynamic binding is not used." verbose="Virtual function &apos;_screen_enter&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 93. Dynamic binding is not used." file0="scene/3d/visible_on_screen_notifier_3d.cpp">
            <location file="scene/3d/visible_on_screen_notifier_3d.h" line="49" column="15" info="_screen_enter is a virtual function"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="40" column="2" info="Calling _screen_enter"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="93" column="113" info="Calling _visibility_enter"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_screen_exit&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 93. Dynamic binding is not used." verbose="Virtual function &apos;_screen_exit&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 93. Dynamic binding is not used." file0="scene/3d/visible_on_screen_notifier_3d.cpp">
            <location file="scene/3d/visible_on_screen_notifier_3d.h" line="50" column="15" info="_screen_exit is a virtual function"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="49" column="2" info="Calling _screen_exit"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="93" column="179" info="Calling _visibility_exit"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/visual_instance_3d.cpp">
            <location file="scene/3d/visual_instance_3d.cpp" line="229" column="2"/>
            <symbol>instance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;probe&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;probe&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/voxel_gi.cpp">
            <location file="scene/3d/voxel_gi.cpp" line="258" column="2"/>
            <symbol>probe</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;voxel_gi&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;voxel_gi&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/voxel_gi.cpp">
            <location file="scene/3d/voxel_gi.cpp" line="561" column="2"/>
            <symbol>voxel_gi</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="788" column="22"/>
            <symbol>alloca</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="789" column="11"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="790" column="13"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_unbind_tracker&apos; is called from destructor &apos;~XRNode3D()&apos; at line 453. Dynamic binding is not used." verbose="Virtual function &apos;_unbind_tracker&apos; is called from destructor &apos;~XRNode3D()&apos; at line 453. Dynamic binding is not used." file0="scene/3d/xr_nodes.cpp">
            <location file="scene/3d/xr_nodes.h" line="90" column="15" info="_unbind_tracker is a virtual function"/>
            <location file="scene/3d/xr_nodes.cpp" line="453" column="2" info="Calling _unbind_tracker"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;cur_nti&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;cur_nti&apos;. The initialized value is overwritten before it is read." cwe="563" file0="scene/animation/animation_blend_tree.cpp">
            <location file="scene/animation/animation_blend_tree.cpp" line="1295" column="11" info="cur_nti is overwritten"/>
            <location file="scene/animation/animation_blend_tree.cpp" line="1204" column="23" info="cur_nti is initialized"/>
            <symbol>cur_nti</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/animation/animation_mixer.cpp">
            <location file="scene/animation/animation_mixer.cpp" line="1890" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;root_node&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;root_node&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/animation_mixer.cpp">
            <location file="scene/animation/animation_mixer.cpp" line="2345" column="2"/>
            <symbol>root_node</symbol>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always true because &apos;else if&apos; condition is opposite to previous condition at line 1842." verbose="Expression is always true because &apos;else if&apos; condition is opposite to previous condition at line 1842." cwe="398" file0="scene/animation/animation_mixer.cpp">
            <location file="scene/animation/animation_mixer.cpp" line="1846" column="29" info="else if condition is opposite to first condition"/>
            <location file="scene/animation/animation_mixer.cpp" line="1842" column="12" info="first condition"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_playback_info&apos; should be passed by const reference." verbose="Parameter &apos;p_playback_info&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="scene/animation/animation_mixer.cpp">
            <location file="scene/animation/animation_mixer.cpp" line="1908" column="91"/>
            <symbol>p_playback_info</symbol>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="610" column="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="666" column="12"/>
            <symbol>c</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_playback_info&apos; should be passed by const reference." verbose="Parameter &apos;p_playback_info&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_mixer.h" line="451" column="76"/>
            <symbol>p_playback_info</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="795" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;target&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;target&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="648" column="2"/>
            <symbol>target</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="737" column="2"/>
            <symbol>callback</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="832" column="2"/>
            <symbol>callback</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;initial_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;initial_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="833" column="2"/>
            <symbol>initial_val</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;delta_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;delta_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="834" column="2"/>
            <symbol>delta_val</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Tween&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Tween&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="186" column="2"/>
            <symbol>Tween</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;IntervalTweener&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;IntervalTweener&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="244" column="2"/>
            <symbol>IntervalTweener</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallbackTweener&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallbackTweener&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="260" column="2"/>
            <symbol>CallbackTweener</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;step_active&apos; is assigned a value that is never used." verbose="Variable &apos;step_active&apos; is assigned a value that is never used." cwe="563" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="328" column="19"/>
            <symbol>step_active</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;play_callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;play_callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/audio/audio_stream_player_internal.cpp">
            <location file="scene/audio/audio_stream_player_internal.cpp" line="345" column="2"/>
            <symbol>play_callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;stop_callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;stop_callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/audio/audio_stream_player_internal.cpp">
            <location file="scene/audio/audio_stream_player_internal.cpp" line="346" column="2"/>
            <symbol>stop_callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bus&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bus&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/audio/audio_stream_player_internal.cpp">
            <location file="scene/audio/audio_stream_player_internal.cpp" line="348" column="2"/>
            <symbol>bus</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="106" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="107" column="4"/>
            <symbol>type_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="108" column="4"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scene_file_path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scene_file_path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="110" column="4"/>
            <symbol>scene_file_path</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;live_edit_root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;live_edit_root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="160" column="3"/>
            <symbol>live_edit_root</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.cpp" line="321" column="2"/>
            <symbol>id</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneDebuggerObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneDebuggerObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="81" column="2"/>
            <symbol>SceneDebuggerObject</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneDebuggerTree&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneDebuggerTree&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="121" column="2"/>
            <symbol>SceneDebuggerTree</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeHSV&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeHSV&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="83" column="2"/>
            <symbol>ColorModeHSV</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeRGB&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeRGB&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="102" column="2"/>
            <symbol>ColorModeRGB</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeRAW&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeRAW&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="124" column="2"/>
            <symbol>ColorModeRAW</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorModeOKHSL&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorModeOKHSL&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_mode.cpp">
            <location file="scene/gui/color_mode.h" line="149" column="2"/>
            <symbol>ColorModeOKHSL</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preset_color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preset_color&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="2279" column="2"/>
            <symbol>preset_color</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="73" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="80" column="27"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;AcceptDialog()&apos; at line 452. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;AcceptDialog()&apos; at line 452. Dynamic binding is not used." file0="scene/gui/dialogs.cpp">
            <location file="scene/gui/dialogs.h" line="81" column="15" info="ok_pressed is a virtual function"/>
            <location file="scene/gui/dialogs.cpp" line="136" column="2" info="Calling ok_pressed"/>
            <location file="scene/gui/dialogs.cpp" line="452" column="80" info="Calling _ok_pressed"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GraphEditArranger&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GraphEditArranger&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/graph_edit_arranger.cpp">
            <location file="scene/gui/graph_edit_arranger.h" line="63" column="2"/>
            <symbol>GraphEditArranger</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;initial&apos; is always false" verbose="Condition &apos;initial&apos; is always false" cwe="570" file0="scene/gui/graph_edit_arranger.cpp">
            <location file="scene/gui/graph_edit_arranger.cpp" line="542" column="10" info="Condition &apos;initial&apos; is always false"/>
            <location file="scene/gui/graph_edit_arranger.cpp" line="525" column="4" info="Assuming condition is false"/>
            <location file="scene/gui/graph_edit_arranger.cpp" line="521" column="18" info="Assignment &apos;initial=false&apos;, assigned value is 0"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;resizable&apos; and inner condition is &apos;resizable&apos;)." cwe="398" file0="scene/gui/graph_frame.cpp">
            <location file="scene/gui/graph_frame.cpp" line="136" column="9" info="identical inner condition: resizable"/>
            <location file="scene/gui/graph_frame.cpp" line="133" column="8" info="outer condition: resizable"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Item&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Item&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/item_list.cpp">
            <location file="scene/gui/item_list.h" line="87" column="3"/>
            <symbol>Item</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text_rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text_rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/label.cpp">
            <location file="scene/gui/label.cpp" line="1204" column="2"/>
            <symbol>text_rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text_rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text_rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/line_edit.cpp">
            <location file="scene/gui/line_edit.cpp" line="2727" column="2"/>
            <symbol>text_rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/menu_bar.cpp">
            <location file="scene/gui/menu_bar.h" line="61" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Menu&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Menu&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/menu_bar.cpp">
            <location file="scene/gui/menu_bar.h" line="60" column="3"/>
            <symbol>Menu</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Item&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Item&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/popup_menu.cpp">
            <location file="scene/gui/popup_menu.h" line="94" column="3"/>
            <symbol>Item</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/scroll_bar.cpp">
            <location file="scene/gui/scroll_bar.cpp" line="654" column="2"/>
            <symbol>orientation</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/slider.cpp">
            <location file="scene/gui/slider.cpp" line="405" column="2"/>
            <symbol>orientation</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;gui_input&apos; is called from constructor &apos;SpinBox()&apos; at line 600. Dynamic binding is not used." verbose="Virtual function &apos;gui_input&apos; is called from constructor &apos;SpinBox()&apos; at line 600. Dynamic binding is not used." file0="scene/gui/spin_box.cpp">
            <location file="scene/gui/spin_box.h" line="138" column="15" info="gui_input is a virtual function"/>
            <location file="scene/gui/spin_box.cpp" line="600" column="37" info="Calling gui_input"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;get_minimum_size&apos; is called from constructor &apos;TabBar()&apos; at line 1882. Dynamic binding is not used." verbose="Virtual function &apos;get_minimum_size&apos; is called from constructor &apos;TabBar()&apos; at line 1882. Dynamic binding is not used." file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.h" line="282" column="8" info="get_minimum_size is a virtual function"/>
            <location file="scene/gui/tab_bar.cpp" line="1882" column="35" info="Calling get_minimum_size"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Tab&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Tab&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.h" line="85" column="3"/>
            <symbol>Tab</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.cpp" line="1318" column="51"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;gui_input&apos; is called from constructor &apos;Tree()&apos; at line 5836. Dynamic binding is not used." verbose="Virtual function &apos;gui_input&apos; is called from constructor &apos;Tree()&apos; at line 5836. Dynamic binding is not used." file0="scene/gui/tree.cpp">
            <location file="scene/gui/tree.h" line="701" column="15" info="gui_input is a virtual function"/>
            <location file="scene/gui/tree.cpp" line="5836" column="39" info="Calling gui_input"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/tree.cpp">
            <location file="scene/gui/tree.h" line="145" column="2"/>
            <symbol>TreeItem</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zoom_factor&apos; is assigned a value that is never used." verbose="Variable &apos;zoom_factor&apos; is assigned a value that is never used." cwe="563" file0="scene/gui/view_panner.cpp">
            <location file="scene/gui/view_panner.cpp" line="49" column="19"/>
            <symbol>zoom_factor</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zoom_factor&apos; is assigned a value that is never used." verbose="Variable &apos;zoom_factor&apos; is assigned a value that is never used." cwe="563" file0="scene/gui/view_panner.cpp">
            <location file="scene/gui/view_panner.cpp" line="81" column="18"/>
            <symbol>zoom_factor</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_item&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_item&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_item.cpp">
            <location file="scene/main/canvas_item.cpp" line="1570" column="2"/>
            <symbol>canvas_item</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_texture&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_texture&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_item.cpp">
            <location file="scene/main/canvas_item.cpp" line="1753" column="2"/>
            <symbol>canvas_texture</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_layer.cpp">
            <location file="scene/main/canvas_layer.cpp" line="364" column="2"/>
            <symbol>canvas</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;client&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;client&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/http_request.cpp">
            <location file="scene/main/http_request.cpp" line="664" column="2"/>
            <symbol>client</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;encode_mode&apos; can be reduced." verbose="The scope of the variable &apos;encode_mode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/main/multiplayer_api.cpp">
            <location file="scene/main/multiplayer_api.cpp" line="78" column="10"/>
            <symbol>encode_mode</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_projected_obstructions&apos; can be declared with const" verbose="Parameter &apos;p_projected_obstructions&apos; can be declared with const" cwe="398" file0="scene/resources/2d/navigation_mesh_source_geometry_data_2d.cpp">
            <location file="scene/resources/2d/navigation_mesh_source_geometry_data_2d.cpp" line="279" column="191" info="Parameter &apos;p_projected_obstructions&apos; can be declared with const"/>
            <symbol>p_projected_obstructions</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;size&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/2d/rectangle_shape_2d.cpp">
            <location file="scene/resources/2d/rectangle_shape_2d.cpp" line="105" column="2"/>
            <symbol>size</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/2d/segment_shape_2d.cpp">
            <location file="scene/resources/2d/segment_shape_2d.cpp" line="97" column="2"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;shape&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;shape&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/2d/shape_2d.cpp">
            <location file="scene/resources/2d/shape_2d.cpp" line="118" column="2"/>
            <symbol>shape</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;jiggle_data_chain&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;jiggle_data_chain&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/2d/skeleton/skeleton_modification_2d_jiggle.cpp">
            <location file="scene/resources/2d/skeleton/skeleton_modification_2d_jiggle.cpp" line="566" column="2"/>
            <symbol>jiggle_data_chain</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;gravity&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;gravity&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/2d/skeleton/skeleton_modification_2d_jiggle.cpp">
            <location file="scene/resources/2d/skeleton/skeleton_modification_2d_jiggle.cpp" line="571" column="2"/>
            <symbol>gravity</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;physical_bone_chain&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;physical_bone_chain&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/2d/skeleton/skeleton_modification_2d_physicalbones.cpp">
            <location file="scene/resources/2d/skeleton/skeleton_modification_2d_physicalbones.cpp" line="291" column="2"/>
            <symbol>physical_bone_chain</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;BoxShape3D()&apos; at line 99. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;BoxShape3D()&apos; at line 99. Dynamic binding is not used." file0="scene/resources/3d/box_shape_3d.cpp">
            <location file="scene/resources/3d/box_shape_3d.h" line="47" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/3d/box_shape_3d.cpp" line="82" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/3d/box_shape_3d.cpp" line="99" column="2" info="Calling set_size"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CapsuleShape3D()&apos; at line 124. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CapsuleShape3D()&apos; at line 124. Dynamic binding is not used." file0="scene/resources/3d/capsule_shape_3d.cpp">
            <location file="scene/resources/3d/capsule_shape_3d.h" line="44" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/3d/capsule_shape_3d.cpp" line="124" column="2" info="Calling _update_shape"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/3d/concave_polygon_shape_3d.cpp">
            <location file="scene/resources/3d/concave_polygon_shape_3d.h" line="54" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/3d/concave_polygon_shape_3d.cpp">
            <location file="scene/resources/3d/concave_polygon_shape_3d.h" line="55" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CylinderShape3D()&apos; at line 109. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CylinderShape3D()&apos; at line 109. Dynamic binding is not used." file0="scene/resources/3d/cylinder_shape_3d.cpp">
            <location file="scene/resources/3d/cylinder_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/3d/cylinder_shape_3d.cpp" line="109" column="2" info="Calling _update_shape"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;HeightMapShape3D()&apos; at line 315. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;HeightMapShape3D()&apos; at line 315. Dynamic binding is not used." file0="scene/resources/3d/height_map_shape_3d.cpp">
            <location file="scene/resources/3d/height_map_shape_3d.h" line="49" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/3d/height_map_shape_3d.cpp" line="315" column="2" info="Calling _update_shape"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" file0="scene/resources/3d/importer_mesh.cpp">
            <location file="scene/resources/3d/importer_mesh.cpp" line="359" column="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_vertex_count&apos; can be reduced." verbose="The scope of the variable &apos;current_vertex_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/resources/3d/navigation_mesh_source_geometry_data_3d.cpp">
            <location file="scene/resources/3d/navigation_mesh_source_geometry_data_3d.cpp" line="97" column="6"/>
            <symbol>current_vertex_count</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_projected_obstructions&apos; can be declared with const" verbose="Parameter &apos;p_projected_obstructions&apos; can be declared with const" cwe="398" file0="scene/resources/3d/navigation_mesh_source_geometry_data_3d.cpp">
            <location file="scene/resources/3d/navigation_mesh_source_geometry_data_3d.cpp" line="344" column="144" info="Parameter &apos;p_projected_obstructions&apos; can be declared with const"/>
            <symbol>p_projected_obstructions</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SeparationRayShape3D()&apos; at line 90. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SeparationRayShape3D()&apos; at line 90. Dynamic binding is not used." file0="scene/resources/3d/separation_ray_shape_3d.cpp">
            <location file="scene/resources/3d/separation_ray_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/3d/separation_ray_shape_3d.cpp" line="90" column="2" info="Calling _update_shape"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SphereShape3D()&apos; at line 86. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SphereShape3D()&apos; at line 86. Dynamic binding is not used." file0="scene/resources/3d/sphere_shape_3d.cpp">
            <location file="scene/resources/3d/sphere_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/3d/sphere_shape_3d.cpp" line="69" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/3d/sphere_shape_3d.cpp" line="86" column="2" info="Calling set_radius"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/3d/world_3d.cpp">
            <location file="scene/resources/3d/world_3d.cpp" line="168" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;WorldBoundaryShape3D()&apos; at line 88. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;WorldBoundaryShape3D()&apos; at line 88. Dynamic binding is not used." file0="scene/resources/3d/world_boundary_shape_3d.cpp">
            <location file="scene/resources/3d/world_boundary_shape_3d.h" line="42" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/3d/world_boundary_shape_3d.cpp" line="71" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/3d/world_boundary_shape_3d.cpp" line="88" column="2" info="Calling set_plane"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;proxy_ph&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;proxy_ph&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/animated_texture.cpp">
            <location file="scene/resources/animated_texture.cpp" line="279" column="2"/>
            <symbol>proxy_ph</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;camera_attributes&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;camera_attributes&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.cpp" line="134" column="2"/>
            <symbol>camera_attributes</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 303. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 303. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="94" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="228" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="303" column="2" info="Calling set_auto_exposure_min_sensitivity"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 304. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPractical()&apos; at line 304. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="94" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="237" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="304" column="2" info="Calling set_auto_exposure_max_sensitivity"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 495. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 495. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="145" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="422" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="495" column="2" info="Calling set_auto_exposure_min_exposure_value"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 496. Dynamic binding is not used." verbose="Virtual function &apos;_update_auto_exposure&apos; is called from constructor &apos;CameraAttributesPhysical()&apos; at line 496. Dynamic binding is not used." file0="scene/resources/camera_attributes.cpp">
            <location file="scene/resources/camera_attributes.h" line="145" column="15" info="_update_auto_exposure is a virtual function"/>
            <location file="scene/resources/camera_attributes.cpp" line="431" column="2" info="Calling _update_auto_exposure"/>
            <location file="scene/resources/camera_attributes.cpp" line="496" column="2" info="Calling set_auto_exposure_max_exposure_value"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;layered_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;layered_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="844" column="2"/>
            <symbol>layered_type</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CompressedTextureLayered&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CompressedTextureLayered&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.h" line="175" column="2"/>
            <symbol>CompressedTextureLayered</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="100" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="107" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="114" column="28"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;-&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a-b?c:d&apos;&apos; should be written as either &apos;&apos;(a-b)?c:d&apos;&apos; or &apos;&apos;a-(b?c:d)&apos;&apos;." cwe="783" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="444" column="67"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sw&apos; is assigned a value that is never used." verbose="Variable &apos;sw&apos; is assigned a value that is never used." cwe="563" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="402" column="7"/>
            <symbol>sw</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sh&apos; is assigned a value that is never used." verbose="Variable &apos;sh&apos; is assigned a value that is never used." cwe="563" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="403" column="7"/>
            <symbol>sh</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sw&apos; is assigned a value that is never used." verbose="Variable &apos;sw&apos; is assigned a value that is never used." cwe="563" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="419" column="6"/>
            <symbol>sw</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sh&apos; is assigned a value that is never used." verbose="Variable &apos;sh&apos; is assigned a value that is never used." cwe="563" file0="scene/resources/compressed_texture.cpp">
            <location file="scene/resources/compressed_texture.cpp" line="420" column="6"/>
            <symbol>sh</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;position&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;position&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="67" column="4"/>
            <symbol>position</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;left_tangent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;left_tangent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="68" column="4"/>
            <symbol>left_tangent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;right_tangent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;right_tangent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="69" column="4"/>
            <symbol>right_tangent</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Point&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Point&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="62" column="3"/>
            <symbol>Point</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="scene/resources/curve_texture.cpp">
            <location file="scene/resources/curve_texture.cpp" line="97" column="15"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="scene/resources/curve_texture.cpp">
            <location file="scene/resources/curve_texture.cpp" line="285" column="15"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="65" column="4"/>
            <symbol>text</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;jst_flags&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;jst_flags&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="68" column="4"/>
            <symbol>jst_flags</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;brk_flags&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;brk_flags&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="69" column="4"/>
            <symbol>brk_flags</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;direction&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;direction&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="70" column="4"/>
            <symbol>direction</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="71" column="4"/>
            <symbol>orientation</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;layered_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;layered_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/image_texture.cpp">
            <location file="scene/resources/image_texture.cpp" line="378" column="2"/>
            <symbol>layered_type</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ImageTextureLayered&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ImageTextureLayered&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/resources/image_texture.cpp">
            <location file="scene/resources/image_texture.h" line="125" column="2"/>
            <symbol>ImageTextureLayered</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;multimesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;multimesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/multimesh.cpp">
            <location file="scene/resources/multimesh.cpp" line="405" column="2"/>
            <symbol>multimesh</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="160" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="582" column="48"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;state&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;state&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="2221" column="2"/>
            <symbol>state</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;pending_add&apos; is always true" verbose="Condition &apos;pending_add&apos; is always true" cwe="571" file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="472" column="11" info="Condition &apos;pending_add&apos; is always true"/>
            <location file="scene/resources/packed_scene.cpp" line="448" column="26" info="Assignment &apos;pending_add=true&apos;, assigned value is 1"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_value&apos; can be declared with const" verbose="Parameter &apos;p_value&apos; can be declared with const" cwe="398" file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="610" column="50" info="Parameter &apos;p_value&apos; can be declared with const"/>
            <symbol>p_value</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/resource_format_text.cpp">
            <location file="scene/resources/resource_format_text.cpp" line="1015" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/text_line.cpp">
            <location file="scene/resources/text_line.cpp" line="474" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/text_line.cpp">
            <location file="scene/resources/text_line.cpp" line="481" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/world_2d.cpp">
            <location file="scene/resources/world_2d.cpp" line="95" column="2"/>
            <symbol>canvas</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SceneStringNames::free&apos;" verbose="Unused private function: &apos;SceneStringNames::free&apos;" cwe="398" file0="scene/scene_string_names.cpp">
            <location file="scene/scene_string_names.h" line="44" column="14"/>
            <symbol>SceneStringNames::free</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;resized&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;resized&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/scene_string_names.cpp">
            <location file="scene/scene_string_names.cpp" line="36" column="2"/>
            <symbol>resized</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;img&apos;. The initialized value is overwritten before it is read." cwe="563" file0="scene/theme/default_theme.cpp">
            <location file="scene/theme/default_theme.cpp" line="97" column="6" info="img is overwritten"/>
            <location file="scene/theme/default_theme.cpp" line="84" column="17" info="img is initialized"/>
            <symbol>img</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_themes&apos; can be declared with const" verbose="Parameter &apos;p_themes&apos; can be declared with const" cwe="398" file0="scene/theme/theme_db.cpp">
            <location file="scene/theme/theme_db.cpp" line="478" column="51" info="Parameter &apos;p_themes&apos; can be declared with const"/>
            <symbol>p_themes</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ThemeOwner&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ThemeOwner&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/theme/theme_owner.cpp">
            <location file="scene/theme/theme_owner.h" line="81" column="2"/>
            <symbol>ThemeOwner</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.cpp" line="149" column="19"/>
            <symbol>AudioDriverDummy::channels</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectAmplifyInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectAmplifyInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_amplify.cpp">
            <location file="servers/audio/effects/audio_effect_amplify.h" line="38" column="1"/>
            <symbol>AudioEffectAmplifyInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectChorusInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectChorusInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_chorus.cpp">
            <location file="servers/audio/effects/audio_effect_chorus.h" line="38" column="1"/>
            <symbol>AudioEffectChorusInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectCompressorInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectCompressorInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_compressor.cpp">
            <location file="servers/audio/effects/audio_effect_compressor.h" line="38" column="1"/>
            <symbol>AudioEffectCompressorInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectDelayInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectDelayInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_delay.cpp">
            <location file="servers/audio/effects/audio_effect_delay.h" line="38" column="1"/>
            <symbol>AudioEffectDelayInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectDistortionInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectDistortionInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_distortion.cpp">
            <location file="servers/audio/effects/audio_effect_distortion.h" line="38" column="1"/>
            <symbol>AudioEffectDistortionInstance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mode&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mode&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/audio/effects/audio_effect_filter.cpp">
            <location file="servers/audio/effects/audio_effect_filter.cpp" line="168" column="2"/>
            <symbol>mode</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectLimiterInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectLimiterInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_limiter.cpp">
            <location file="servers/audio/effects/audio_effect_limiter.h" line="38" column="1"/>
            <symbol>AudioEffectLimiterInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectPhaserInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectPhaserInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_phaser.cpp">
            <location file="servers/audio/effects/audio_effect_phaser.h" line="38" column="1"/>
            <symbol>AudioEffectPhaserInstance</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wr&apos; can be reduced." verbose="The scope of the variable &apos;wr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="8"/>
            <symbol>wr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wi&apos; can be reduced." verbose="The scope of the variable &apos;wi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="12"/>
            <symbol>wi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg&apos; can be reduced." verbose="The scope of the variable &apos;arg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="16"/>
            <symbol>arg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ur&apos; can be reduced." verbose="The scope of the variable &apos;ur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="242" column="16"/>
            <symbol>ur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ui&apos; can be reduced." verbose="The scope of the variable &apos;ui&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="242" column="20"/>
            <symbol>ui</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;le2&apos; can be reduced." verbose="The scope of the variable &apos;le2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="243" column="23"/>
            <symbol>le2</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;indata&apos; can be declared with const" verbose="Parameter &apos;indata&apos; can be declared with const" cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="77" column="130" info="Parameter &apos;indata&apos; can be declared with const"/>
            <symbol>indata</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectRecordInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectRecordInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.h" line="44" column="1"/>
            <symbol>AudioEffectRecordInstance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.cpp" line="290" column="2"/>
            <symbol>format</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectSpectrumAnalyzerInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectSpectrumAnalyzerInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.h" line="38" column="1"/>
            <symbol>AudioEffectSpectrumAnalyzerInstance</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wr&apos; can be reduced." verbose="The scope of the variable &apos;wr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="8"/>
            <symbol>wr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wi&apos; can be reduced." verbose="The scope of the variable &apos;wi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="12"/>
            <symbol>wi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg&apos; can be reduced." verbose="The scope of the variable &apos;arg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="16"/>
            <symbol>arg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ur&apos; can be reduced." verbose="The scope of the variable &apos;ur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="48" column="16"/>
            <symbol>ur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ui&apos; can be reduced." verbose="The scope of the variable &apos;ui&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="48" column="20"/>
            <symbol>ui</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;le2&apos; can be reduced." verbose="The scope of the variable &apos;le2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="49" column="23"/>
            <symbol>le2</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_src&apos; can be declared with const" verbose="Parameter &apos;p_src&apos; can be declared with const" cwe="398" file0="servers/audio/effects/reverb_filter.cpp">
            <location file="servers/audio/effects/reverb_filter.cpp" line="57" column="29" info="Parameter &apos;p_src&apos; can be declared with const"/>
            <symbol>p_src</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CameraFeed&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CameraFeed&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/camera/camera_feed.cpp">
            <location file="servers/camera/camera_feed.h" line="97" column="2"/>
            <symbol>CameraFeed</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;length&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;length&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="218" column="62"/>
            <symbol>length</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="259" column="3"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="260" column="3"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;n&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;n&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="261" column="3"/>
            <symbol>n</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_area_2d.cpp" line="36" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_area_2d.cpp" line="43" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotSeparationRayShape2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotSeparationRayShape2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="218" column="17"/>
            <symbol>GodotSeparationRayShape2D</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_body_2d.h" line="117" column="18"/>
            <symbol>AreaCMP</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="363" column="3"/>
            <symbol>margin_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="364" column="3"/>
            <symbol>margin_B</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;motion_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;motion_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="369" column="3"/>
            <symbol>motion_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;motion_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;motion_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="370" column="3"/>
            <symbol>motion_B</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;anchor_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;anchor_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="321" column="2"/>
            <symbol>anchor_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;A_groove_1&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;A_groove_1&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="478" column="2"/>
            <symbol>A_groove_1</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;anchor_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;anchor_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="588" column="2"/>
            <symbol>anchor_A</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="servers/physics_2d/godot_shape_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.cpp" line="673" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="servers/physics_2d/godot_shape_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.cpp" line="905" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;body_linear_velocity_sleep_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;body_linear_velocity_sleep_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="1219" column="2"/>
            <symbol>body_linear_velocity_sleep_threshold</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!did_collide&apos; is always true" verbose="Condition &apos;!did_collide&apos; is always true" cwe="571" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="675" column="10" info="Condition &apos;!did_collide&apos; is always true"/>
            <location file="servers/physics_2d/godot_space_2d.cpp" line="664" column="25" info="Assignment &apos;did_collide=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;did_collide&apos; is always false" verbose="Condition &apos;did_collide&apos; is always false" cwe="570" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="686" column="10" info="Condition &apos;did_collide&apos; is always false"/>
            <location file="servers/physics_2d/godot_space_2d.cpp" line="664" column="25" info="Assignment &apos;did_collide=false&apos;, assigned value is 0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="203" column="3"/>
            <symbol>GJK::m_simplices</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="203" column="3"/>
            <symbol>GJK::m_free</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="593" column="4"/>
            <symbol>EPA::m_result</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="593" column="4"/>
            <symbol>EPA::m_fc_store</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;t&lt;=0&apos; is always true" verbose="Condition &apos;t&lt;=0&apos; is always true" cwe="571" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="441" column="14" info="Condition &apos;t&lt;=0&apos; is always true"/>
            <location file="servers/physics_3d/gjk_epa.cpp" line="440" column="9" info="Assuming that condition &apos;t&gt;=1&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ns&apos; can be reduced." verbose="The scope of the variable &apos;ns&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="248" column="15"/>
            <symbol>ns</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valid&apos; can be reduced." verbose="The scope of the variable &apos;valid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="682" column="16"/>
            <symbol>valid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="38" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="45" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="52" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.h" line="234" column="17"/>
            <symbol>AreaCMP</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotSoftBodyShape3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotSoftBodyShape3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.h" line="272" column="2"/>
            <symbol>GodotSoftBodyShape3D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="761" column="3"/>
            <symbol>margin_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="762" column="3"/>
            <symbol>margin_B</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;edges_start_A&apos; can be declared with const" verbose="Variable &apos;edges_start_A&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1339" column="6" info="Variable &apos;edges_start_A&apos; can be declared with const"/>
            <symbol>edges_start_A</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;edges_end_A&apos; can be declared with const" verbose="Variable &apos;edges_end_A&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1340" column="6" info="Variable &apos;edges_end_A&apos; can be declared with const"/>
            <symbol>edges_end_A</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="2178" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1022" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1505" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1763" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;vertex[3]&apos; accessed at index -1, which is out of bounds." verbose="Array &apos;vertex[3]&apos; accessed at index -1, which is out of bounds." cwe="786" file0="servers/physics_3d/godot_shape_3d.cpp">
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1200" column="15" info="Negative array index"/>
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1194" column="14" info="Assuming condition is false"/>
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1188" column="26" info="Assignment &apos;vert_support_idx=-1&apos;, assigned value is -1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="594" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="594" column="14"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lr&apos; can be reduced." verbose="The scope of the variable &apos;lr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="725" column="8"/>
            <symbol>lr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ar&apos; can be reduced." verbose="The scope of the variable &apos;ar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="726" column="6"/>
            <symbol>ar</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;br&apos; can be reduced." verbose="The scope of the variable &apos;br&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="726" column="10"/>
            <symbol>br</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;link_num&apos; can be reduced." verbose="The scope of the variable &apos;link_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="730" column="40"/>
            <symbol>link_num</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;body_linear_velocity_sleep_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;body_linear_velocity_sleep_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_space_3d.cpp">
            <location file="servers/physics_3d/godot_space_3d.cpp" line="1257" column="2"/>
            <symbol>body_linear_velocity_sleep_threshold</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;profile_begtime&apos; is assigned a value that is never used." verbose="Variable &apos;profile_begtime&apos; is assigned a value that is never used." cwe="563" file0="servers/physics_3d/godot_step_3d.cpp">
            <location file="servers/physics_3d/godot_step_3d.cpp" line="402" column="19"/>
            <symbol>profile_begtime</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbAFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbAFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp" line="59" column="2"/>
            <symbol>m_rbAFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbBFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbBFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp" line="60" column="2"/>
            <symbol>m_rbBFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbAFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbAFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_hinge_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_hinge_joint_3d.cpp" line="57" column="2"/>
            <symbol>m_rbAFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbBFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbBFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_hinge_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_hinge_joint_3d.cpp" line="58" column="2"/>
            <symbol>m_rbBFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_pivotInA&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_pivotInA&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_pin_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_pin_joint_3d.cpp" line="173" column="2"/>
            <symbol>m_pivotInA</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_pivotInB&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_pivotInB&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_pin_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_pin_joint_3d.cpp" line="174" column="2"/>
            <symbol>m_pivotInB</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::radius_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::radius_cache&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="100" column="3"/>
            <symbol>Light::radius_cache</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandNinePatch::margin&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandNinePatch::margin&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="228" column="4"/>
            <symbol>CommandNinePatch::margin</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandPrimitive::point_count&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandPrimitive::point_count&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="253" column="4"/>
            <symbol>CommandPrimitive::point_count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;color&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="105" column="4"/>
            <symbol>color</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;final_modulate&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;final_modulate&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="473" column="4"/>
            <symbol>final_modulate</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cull_cache&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cull_cache&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="527" column="4"/>
            <symbol>cull_cache</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;state_uniform&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;state_uniform&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/cluster_builder_rd.cpp">
            <location file="servers/rendering/renderer_rd/cluster_builder_rd.cpp" line="567" column="2"/>
            <symbol>state_uniform</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.cpp" line="110" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.cpp" line="315" column="2"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BokehDOF&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BokehDOF&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.h" line="116" column="2"/>
            <symbol>BokehDOF</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CopyEffects&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CopyEffects&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.h" line="324" column="2"/>
            <symbol>CopyEffects</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="62" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="93" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="345" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="394" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="429" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="466" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="505" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="542" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="614" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="650" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="678" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="719" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="752" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="806" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="875" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="911" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="941" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="977" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="1187" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="1230" column="2"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;indices&apos; can be declared with const" verbose="Variable &apos;indices&apos; can be declared with const" cwe="398" file0="servers/rendering/renderer_rd/effects/debug_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/debug_effects.cpp" line="88" column="12" info="Variable &apos;indices&apos; can be declared with const"/>
            <symbol>indices</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;indices&apos; can be declared with const" verbose="Variable &apos;indices&apos; can be declared with const" cwe="398" file0="servers/rendering/renderer_rd/effects/debug_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/debug_effects.cpp" line="126" column="12" info="Variable &apos;indices&apos; can be declared with const"/>
            <symbol>indices</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/effects/fsr.cpp" line="83" column="2"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="187" column="4"/>
            <symbol>format</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format_srgb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format_srgb&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="188" column="4"/>
            <symbol>format_srgb</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_r&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_r&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="189" column="4"/>
            <symbol>swizzle_r</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_g&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_g&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="190" column="4"/>
            <symbol>swizzle_g</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="191" column="4"/>
            <symbol>swizzle_b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="192" column="4"/>
            <symbol>swizzle_a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;image_format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;image_format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="208" column="4"/>
            <symbol>image_format</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rd_format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rd_format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="209" column="4"/>
            <symbol>rd_format</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rd_format_srgb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rd_format_srgb&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="210" column="4"/>
            <symbol>rd_format_srgb</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_r&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_r&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="211" column="4"/>
            <symbol>swizzle_r</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_g&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_g&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="212" column="4"/>
            <symbol>swizzle_g</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="213" column="4"/>
            <symbol>swizzle_b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="214" column="4"/>
            <symbol>swizzle_a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="401" column="6"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;context&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;context&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.h" line="110" column="4"/>
            <symbol>context</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;buffer_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;buffer_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.h" line="111" column="4"/>
            <symbol>buffer_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;texture_view&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;texture_view&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/effects/fsr.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.h" line="145" column="4"/>
            <symbol>texture_view</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;dst_desc&apos; can be declared with const" verbose="Variable &apos;dst_desc&apos; can be declared with const" cwe="398" file0="servers/rendering/renderer_rd/effects/fsr2.cpp">
            <location file="servers/rendering/renderer_rd/effects/fsr2.cpp" line="374" column="26" info="Variable &apos;dst_desc&apos; can be declared with const"/>
            <symbol>dst_desc</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.cpp" line="167" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.cpp" line="202" column="3"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;LuminanceBuffers&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;LuminanceBuffers&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.h" line="94" column="2"/>
            <symbol>LuminanceBuffers</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Luminance&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Luminance&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/luminance.cpp">
            <location file="servers/rendering/renderer_rd/effects/luminance.h" line="114" column="2"/>
            <symbol>Luminance</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RoughnessLimiter::push_constant&apos; is not initialized in the constructor." verbose="Member variable &apos;RoughnessLimiter::push_constant&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/effects/roughness_limiter.cpp">
            <location file="servers/rendering/renderer_rd/effects/roughness_limiter.cpp" line="37" column="19"/>
            <symbol>RoughnessLimiter::push_constant</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/ss_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="669" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/ss_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="1066" column="2"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;spmap&apos; can be declared with const" verbose="Variable &apos;spmap&apos; can be declared with const" cwe="398" file0="servers/rendering/renderer_rd/effects/ss_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/ss_effects.cpp" line="81" column="9" info="Variable &apos;spmap&apos; can be declared with const"/>
            <symbol>spmap</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/taa.cpp">
            <location file="servers/rendering/renderer_rd/effects/taa.cpp" line="62" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/tone_mapper.cpp">
            <location file="servers/rendering/renderer_rd/effects/tone_mapper.cpp" line="90" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/tone_mapper.cpp">
            <location file="servers/rendering/renderer_rd/effects/tone_mapper.cpp" line="187" column="2"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;sdfgi_ray_count&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;sdfgi_ray_count&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="3354" column="2"/>
            <symbol>sdfgi_ray_count</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;half_size&apos; is always true" verbose="Condition &apos;half_size&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="2161" column="7" info="Condition &apos;half_size&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="2158" column="20" info="Assignment &apos;half_size=true&apos;, assigned value is 1"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;probe_half_size&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;probe_half_size&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="1196" column="19" info="probe_half_size is overwritten"/>
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="1195" column="27" info="probe_half_size is initialized"/>
            <symbol>probe_half_size</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="2466" column="19"/>
            <symbol>cc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/environment/gi.cpp">
            <location file="servers/rendering/renderer_rd/environment/gi.cpp" line="2495" column="19"/>
            <symbol>cc</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/environment/sky.cpp">
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="216" column="2"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyRD::sky_scene_state&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyRD::sky_scene_state&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/environment/sky.cpp">
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="719" column="8"/>
            <symbol>SkyRD::sky_scene_state</symbol>
        </error>
        <error id="duplicateAssignExpression" severity="style" msg="Same expression used in consecutive assignments of &apos;w&apos; and &apos;h&apos;." verbose="Finding variables &apos;w&apos; and &apos;h&apos; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="servers/rendering/renderer_rd/environment/sky.cpp">
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="1594" column="13"/>
            <location file="servers/rendering/renderer_rd/environment/sky.cpp" line="1594" column="37"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GeometryInstanceForwardClustered::lightmap_slice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;GeometryInstanceForwardClustered::lightmap_slice_index&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="482" column="3"/>
            <symbol>GeometryInstanceForwardClustered::lightmap_slice_index</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;render_pass_uniform_set&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;render_pass_uniform_set&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="226" column="4"/>
            <symbol>render_pass_uniform_set</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;uv_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;uv_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="228" column="4"/>
            <symbol>uv_offset</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardClustered()&apos; at line 4351. Dynamic binding is not used." verbose="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardClustered()&apos; at line 4351. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="574" column="15" info="_update_shader_quality_settings is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp" line="4351" column="2" info="Calling _update_shader_quality_settings"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderForwardClustered::valid_color_pass_pipelines&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderForwardClustered::valid_color_pass_pipelines&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp" line="476" column="30"/>
            <symbol>SceneShaderForwardClustered::valid_color_pass_pipelines</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GeometryInstanceForwardMobile::lightmap_slice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;GeometryInstanceForwardMobile::lightmap_slice_index&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="492" column="3"/>
            <symbol>GeometryInstanceForwardMobile::lightmap_slice_index</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;render_pass_uniform_set&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;render_pass_uniform_set&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="170" column="4"/>
            <symbol>render_pass_uniform_set</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;uv_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;uv_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="172" column="4"/>
            <symbol>uv_offset</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_render_buffers_get_color_format&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2804. Dynamic binding is not used." verbose="Virtual function &apos;_render_buffers_get_color_format&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2804. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="363" column="25" info="_render_buffers_get_color_format is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="2804" column="25" info="Calling _render_buffers_get_color_format"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2840. Dynamic binding is not used." verbose="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardMobile()&apos; at line 2840. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="360" column="15" info="_update_shader_quality_settings is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="2840" column="2" info="Calling _update_shader_quality_settings"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!force_alpha&apos; is always true" verbose="Condition &apos;!force_alpha&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1949" column="9" info="Condition &apos;!force_alpha&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1947" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;force_alpha&apos; is always false" verbose="Condition &apos;force_alpha&apos; is always false" cwe="570" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1952" column="9" info="Condition &apos;force_alpha&apos; is always false"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1947" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ofs&apos; can be reduced." verbose="The scope of the variable &apos;ofs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="81" column="12"/>
            <symbol>ofs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ofs&apos; can be reduced." verbose="The scope of the variable &apos;ofs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="97" column="12"/>
            <symbol>ofs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ofs&apos; can be reduced." verbose="The scope of the variable &apos;ofs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="112" column="12"/>
            <symbol>ofs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ofs&apos; can be reduced." verbose="The scope of the variable &apos;ofs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="127" column="12"/>
            <symbol>ofs</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp" line="382" column="39"/>
            <symbol>ShaderData::depth_draw</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp" line="382" column="39"/>
            <symbol>ShaderData::depth_test</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererCanvasRenderRD::items&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererCanvasRenderRD::items&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="2432" column="25"/>
            <symbol>RendererCanvasRenderRD::items</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="137" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="2022" column="19"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.h" line="94" column="21" info="Shift"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.h" line="94" column="21" info="Integer overflow"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererCompositorRD::blit&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererCompositorRD::blit&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_compositor_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_compositor_rd.cpp" line="261" column="23"/>
            <symbol>RendererCompositorRD::blit</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_dynamic_gi_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1544. Dynamic binding is not used." verbose="Virtual function &apos;is_dynamic_gi_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1544. Dynamic binding is not used." file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="336" column="15" info="is_dynamic_gi_supported is a virtual function"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="1544" column="6" info="Calling is_dynamic_gi_supported"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_volumetric_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1548. Dynamic binding is not used." verbose="Virtual function &apos;is_volumetric_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 1548. Dynamic binding is not used." file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="337" column="15" info="is_volumetric_supported is a virtual function"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="1548" column="6" info="Calling is_volumetric_supported"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_glow_level&apos; can be reduced." verbose="The scope of the variable &apos;max_glow_level&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="515" column="6"/>
            <symbol>max_glow_level</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/shader_rd.cpp">
            <location file="servers/rendering/renderer_rd/shader_rd.h" line="53" column="4"/>
            <symbol>text</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightStorage::max_lights&apos; is not initialized in the constructor." verbose="Member variable &apos;LightStorage::max_lights&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="44" column="15"/>
            <symbol>LightStorage::max_lights</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightStorage::max_directional_lights&apos; is not initialized in the constructor." verbose="Member variable &apos;LightStorage::max_directional_lights&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="44" column="15"/>
            <symbol>LightStorage::max_directional_lights</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightStorage::max_reflections&apos; is not initialized in the constructor." verbose="Member variable &apos;LightStorage::max_reflections&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="44" column="15"/>
            <symbol>LightStorage::max_reflections</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;using_lightmap_array&apos; is always true" verbose="Condition &apos;using_lightmap_array&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="53" column="6" info="Condition &apos;using_lightmap_array&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="52" column="25" info="Assignment &apos;using_lightmap_array=true&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_begin&apos; can be reduced." verbose="The scope of the variable &apos;fade_begin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="809" column="9"/>
            <symbol>fade_begin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_shadow&apos; can be reduced." verbose="The scope of the variable &apos;fade_shadow&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="810" column="9"/>
            <symbol>fade_shadow</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_length&apos; can be reduced." verbose="The scope of the variable &apos;fade_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="811" column="9"/>
            <symbol>fade_length</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;should_realloc&apos; can be reduced." verbose="The scope of the variable &apos;should_realloc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="2285" column="7"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;should_realloc&apos; is assigned a value that is never used." verbose="Variable &apos;should_realloc&apos; is assigned a value that is never used." cwe="563" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="2285" column="22"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="208" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="219" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="231" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="244" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="258" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="299" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="331" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="429" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="434" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="442" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="450" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="457" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="470" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="486" column="17"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: gv.buffer_elements" verbose="Uninitialized struct member: gv.buffer_elements" cwe="457" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1487" column="45"/>
            <symbol>gv.buffer_elements</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: gv.buffer_elements" verbose="Uninitialized variable: gv.buffer_elements" cwe="457" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1487" column="45"/>
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1459" column="13" info="Assuming condition is true"/>
            <symbol>gv</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp" line="124" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp" line="1537" column="24"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/storage_rd/render_scene_data_rd.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/render_scene_data_rd.cpp" line="77" column="2"/>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The struct &apos;ShaderReflection&apos; defines member variable with name &apos;stages&apos; also defined in its parent struct &apos;ShaderDescription&apos;." verbose="The struct &apos;ShaderReflection&apos; defines member variable with name &apos;stages&apos; also defined in its parent struct &apos;ShaderDescription&apos;." cwe="398" file0="servers/rendering/rendering_device_commons.cpp">
            <location file="servers/rendering/rendering_device_commons.h" line="973" column="25" info="Derived variable &apos;ShaderReflection::stages&apos;"/>
            <location file="servers/rendering/rendering_device_commons.h" line="968" column="23" info="Parent variable &apos;ShaderDescription::stages&apos;"/>
            <symbol>ShaderReflection</symbol>
            <symbol>stages</symbol>
            <symbol>ShaderDescription</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ID&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ID&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="125" column="19"/>
            <symbol>ID</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; VertexAttribute &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; VertexAttribute &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; VertexAttribute &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; VertexAttribute &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; VertexAttribute &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; VertexAttribute &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; VertexAttribute &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; VertexAttribute &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; VertexAttribute &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; MemoryBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; MemoryBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; MemoryBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; BufferBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; BufferBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; BufferBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; TextureBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; TextureBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; TextureBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SemaphoreID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SemaphoreID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; SemaphoreID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SemaphoreID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SemaphoreID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; SemaphoreID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SemaphoreID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SemaphoreID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; SemaphoreID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; CommandBufferID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; CommandBufferID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; CommandBufferID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; CommandBufferID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; CommandBufferID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; CommandBufferID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; CommandBufferID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; CommandBufferID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; CommandBufferID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SwapChainID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SwapChainID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; SwapChainID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SwapChainID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SwapChainID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; SwapChainID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SwapChainID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SwapChainID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; SwapChainID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; TextureID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; TextureID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; TextureID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ShaderStageSPIRVData &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ShaderStageSPIRVData &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; ShaderStageSPIRVData &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ShaderStageSPIRVData &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ShaderStageSPIRVData &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; ShaderStageSPIRVData &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ShaderStageSPIRVData &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ShaderStageSPIRVData &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; ShaderStageSPIRVData &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BoundUniform &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BoundUniform &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; BoundUniform &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BoundUniform &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BoundUniform &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; BoundUniform &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BoundUniform &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BoundUniform &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; BoundUniform &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; BufferCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; BufferCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; BufferCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; TextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; TextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; TextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; BufferTextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; BufferTextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; BufferTextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; uint32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; uint32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; uint32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; uint32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; uint32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; uint32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; uint32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; uint32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; uint32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Attachment &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Attachment &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; Attachment &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Attachment &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Attachment &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; Attachment &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Attachment &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Attachment &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; Attachment &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Subpass &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Subpass &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; Subpass &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Subpass &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Subpass &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; Subpass &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Subpass &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Subpass &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; Subpass &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SubpassDependency &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SubpassDependency &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; SubpassDependency &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SubpassDependency &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SubpassDependency &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; SubpassDependency &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; SubpassDependency &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; SubpassDependency &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; SubpassDependency &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderPassClearValue &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderPassClearValue &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderPassClearValue &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Rect2i &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Rect2i &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; Rect2i &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Rect2i &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Rect2i &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; Rect2i &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; Rect2i &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; Rect2i &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; Rect2i &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; AttachmentClear &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; AttachmentClear &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; AttachmentClear &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; int32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; int32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; int32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; PipelineSpecializationConstant &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; PipelineSpecializationConstant &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; PipelineSpecializationConstant &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; PipelineSpecializationConstant &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; PipelineSpecializationConstant &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; PipelineSpecializationConstant &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; PipelineSpecializationConstant &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; PipelineSpecializationConstant &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; PipelineSpecializationConstant &gt;</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="116" column="20"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;p_index&apos; is less than zero." verbose="The unsigned expression &apos;p_index&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="servers/rendering/rendering_device_driver.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="66" column="22" info="Unsigned less than zero"/>
            <symbol>p_index</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderingDeviceGraph::draw_instruction_list&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderingDeviceGraph::draw_instruction_list&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="38" column="23"/>
            <symbol>RenderingDeviceGraph::draw_instruction_list</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderingDeviceGraph::compute_instruction_list&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderingDeviceGraph::compute_instruction_list&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="38" column="23"/>
            <symbol>RenderingDeviceGraph::compute_instruction_list</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RecordedBufferCopy &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RecordedBufferCopy &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RecordedBufferCopy &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RecordedBufferCopy &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RecordedBufferCopy &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RecordedBufferCopy &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RecordedBufferCopy &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RecordedBufferCopy &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RecordedBufferCopy &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ResourceTracker * &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ResourceTracker * &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; ResourceTracker * &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ResourceTracker * &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ResourceTracker * &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; ResourceTracker * &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ResourceTracker * &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ResourceTracker * &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; ResourceTracker * &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ResourceUsage &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ResourceUsage &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; ResourceUsage &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ResourceUsage &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ResourceUsage &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; ResourceUsage &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; ResourceUsage &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; ResourceUsage &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; ResourceUsage &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: RenderPassClearValue &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferID &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferID &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferID &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; uint64_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; uint64_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; uint64_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; uint64_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; uint64_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; uint64_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; uint64_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; uint64_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; uint64_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: AttachmentClear &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: TextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferTextureCopyRegion &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RecordedBufferToTextureCopy &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RecordedBufferToTextureCopy &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RecordedBufferToTextureCopy &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RecordedBufferToTextureCopy &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RecordedBufferToTextureCopy &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RecordedBufferToTextureCopy &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RecordedBufferToTextureCopy &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RecordedBufferToTextureCopy &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RecordedBufferToTextureCopy &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: MemoryBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: TextureBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="74" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="80" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_driver.h" line="82" column="2"/>
            <symbol>VectorView &lt; RenderingDeviceDriver :: BufferBarrier &gt;</symbol>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (resource_tracker-&gt;texture_slice_command_index!=p_command_index) resource_tracker-&gt;texture_slice_command_index=p_command_index&apos; is logically equivalent to &apos;resource_tracker-&gt;texture_slice_command_index=p_command_index&apos;." verbose="The statement &apos;if (resource_tracker-&gt;texture_slice_command_index!=p_command_index) resource_tracker-&gt;texture_slice_command_index=p_command_index&apos; is logically equivalent to &apos;resource_tracker-&gt;texture_slice_command_index=p_command_index&apos;." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="269" column="54" info="Condition &apos;resource_tracker-&gt;texture_slice_command_index!=p_command_index&apos; is redundant"/>
            <location file="servers/rendering/rendering_device_graph.cpp" line="271" column="51" info="Assignment &apos;resource_tracker-&gt;texture_slice_command_index=p_command_index&apos;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;command_index&apos; can be reduced." verbose="The scope of the variable &apos;command_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="1909" column="11"/>
            <symbol>command_index</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_region&apos; should be passed by const reference." verbose="Parameter &apos;p_region&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="1349" column="172"/>
            <symbol>p_region</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_region&apos; should be passed by const reference." verbose="Parameter &apos;p_region&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="1366" column="144"/>
            <symbol>p_region</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_resource_trackers&apos; can be declared with const" verbose="Parameter &apos;p_resource_trackers&apos; can be declared with const" cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="214" column="68" info="Parameter &apos;p_resource_trackers&apos; can be declared with const"/>
            <symbol>p_resource_trackers</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_resource_usages&apos; can be declared with const" verbose="Parameter &apos;p_resource_usages&apos; can be declared with const" cwe="398" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="214" column="104" info="Parameter &apos;p_resource_usages&apos; can be declared with const"/>
            <symbol>p_resource_usages</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;adjacency_list_index&apos; is assigned a value that is never used." verbose="Variable &apos;adjacency_list_index&apos; is assigned a value that is never used." cwe="563" file0="servers/rendering/rendering_device_graph.cpp">
            <location file="servers/rendering/rendering_device_graph.cpp" line="1908" column="32"/>
            <symbol>adjacency_list_index</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::completion_type&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::completion_type&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="11006" column="17"/>
            <symbol>ShaderLanguage::completion_type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::completion_base&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::completion_base&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="11006" column="17"/>
            <symbol>ShaderLanguage::completion_base</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Varying::tkpos&apos; is not initialized in the constructor." verbose="Member variable &apos;Varying::tkpos&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="621" column="4"/>
            <symbol>Varying::tkpos</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderLanguage::_lookup_next&apos;" verbose="Unused private function: &apos;ShaderLanguage::_lookup_next&apos;" cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="1055" column="7"/>
            <symbol>ShaderLanguage::_lookup_next</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;fragment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;fragment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="352" column="4"/>
            <symbol>fragment</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vertex&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vertex&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="353" column="4"/>
            <symbol>vertex</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;light&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;light&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="354" column="4"/>
            <symbol>light</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="839" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Node&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Node&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="383" column="3"/>
            <symbol>Node</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;BuiltInInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;BuiltInInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="828" column="3"/>
            <symbol>BuiltInInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ModeInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ModeInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="854" column="3"/>
            <symbol>ModeInfo</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;vn&apos; is always true" verbose="Condition &apos;vn&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4940" column="10" info="Condition &apos;vn&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;((int)tk.constant)&gt;0&apos; is always true" verbose="Condition &apos;((int)tk.constant)&gt;0&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4969" column="33" info="Condition &apos;((int)tk.constant)&gt;0&apos; is always true"/>
            <location file="servers/rendering/shader_language.cpp" line="4934" column="55" info="Assuming that condition &apos;((int)tk.constant)&lt;=0&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cnode&apos; is always true" verbose="Condition &apos;cnode&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="5875" column="12" info="Condition &apos;cnode&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cnode&apos; is always true" verbose="Condition &apos;cnode&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="6340" column="12" info="Condition &apos;cnode&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;const_node&apos; is always true" verbose="Condition &apos;const_node&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="7557" column="11" info="Condition &apos;const_node&apos; is always true"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;tk&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;tk&apos; is reassigned a value before the old one has been used." cwe="563" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="10118" column="6" info="tk is overwritten"/>
            <location file="servers/rendering/shader_language.cpp" line="9351" column="10" info="tk is assigned"/>
            <symbol>tk</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;full_def&apos; can be reduced." verbose="The scope of the variable &apos;full_def&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="7346" column="11"/>
            <symbol>full_def</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: tk.constant" verbose="Uninitialized struct member: tk.constant" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="256" column="9"/>
            <symbol>tk.constant</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: var.value" verbose="Uninitialized struct member: var.value" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="7576" column="32"/>
            <symbol>var.value</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tk.constant" verbose="Uninitialized variable: tk.constant" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="256" column="9"/>
            <symbol>tk</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;type&apos; is assigned a value that is never used." verbose="Variable &apos;type&apos; is assigned a value that is never used." cwe="563" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="5081" column="16"/>
            <symbol>type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::keyword_completion_context&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::keyword_completion_context&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="11006" column="17"/>
            <symbol>ShaderLanguage::keyword_completion_context</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderLanguage::_add_global_warning&apos;" verbose="Unused private function: &apos;ShaderLanguage::_add_global_warning&apos;" cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="984" column="7"/>
            <symbol>ShaderLanguage::_add_global_warning</symbol>
        </error>
        <error id="danglingLifetime" severity="error" msg="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." verbose="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." cwe="562" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="1230" column="2"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1305" column="8" info="Variable created here."/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1310" column="25" info="Calling function &apos;preprocess&apos;, 1st argument &apos;&amp;pp_state&apos; value is lifetime=pp_state"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1310" column="25" info="Address of variable taken here."/>
        </error>
        <error id="danglingLifetime" severity="error" msg="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." verbose="Non-local variable &apos;state&apos; will use pointer to local variable &apos;pp_state&apos;." cwe="562" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="1242" column="2"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1305" column="8" info="Variable created here."/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1235" column="6" info="Assuming condition is false"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1310" column="25" info="Calling function &apos;preprocess&apos;, 1st argument &apos;&amp;pp_state&apos; value is lifetime=pp_state"/>
            <location file="servers/rendering/shader_preprocessor.cpp" line="1310" column="25" info="Address of variable taken here."/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderPreprocessor::create_define&apos;" verbose="Unused private function: &apos;ShaderPreprocessor::create_define&apos;" cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.h" line="215" column="17"/>
            <symbol>ShaderPreprocessor::create_define</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;code&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;code&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="213" column="2"/>
            <symbol>code</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;code&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;code&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.cpp" line="315" column="2"/>
            <symbol>code</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Tokenizer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Tokenizer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.h" line="108" column="3"/>
            <symbol>Tokenizer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CommentRemover&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CommentRemover&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_preprocessor.cpp">
            <location file="servers/rendering/shader_preprocessor.h" line="129" column="3"/>
            <symbol>CommentRemover</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1419" column="25"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1475" column="26"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1553" column="24"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1577" column="24"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1622" column="25"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="2087" column="26"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="2088" column="20"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="2094" column="26"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="2095" column="20"/>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;Thread&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;Thread&apos;" cwe="758">
            <location file="core/os/thread.h" line="132" column="1"/>
            <location file="core/os/thread.h" line="58" column="1"/>
            <symbol>Thread</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;ProjectConverter3To4&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;ProjectConverter3To4&apos;" cwe="758">
            <location file="editor/project_converter_3_to_4.h" line="42" column="1"/>
            <location file="editor/project_converter_3_to_4.h" line="68" column="1"/>
            <symbol>ProjectConverter3To4</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;AudioDriverWorklet&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;AudioDriverWorklet&apos;" cwe="758">
            <location file="platform/web/audio_driver_web.h" line="148" column="1"/>
            <location file="platform/web/audio_driver_web.h" line="116" column="1"/>
            <symbol>AudioDriverWorklet</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;CrashHandler&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;CrashHandler&apos;" cwe="758">
            <location file="platform/linuxbsd/crash_handler_linuxbsd.h" line="34" column="1"/>
            <location file="platform/windows/crash_handler_windows.h" line="47" column="1"/>
            <symbol>CrashHandler</symbol>
        </error>
        <error id="ctuuninitvar" severity="error" msg="Using argument rt that points at uninitialized variable render_target" verbose="Using argument rt that points at uninitialized variable render_target" cwe="457">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.cpp" line="3056" column="6" info="Using argument rt"/>
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.cpp" line="3213" column="23" info="Calling function _update_render_target, 1st argument is uninitialized"/>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
