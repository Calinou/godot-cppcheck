<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.7"/>
    <errors>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;d&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;d&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/core_bind.cpp">
            <location file="core/core_bind.cpp" line="1665" column="2"/>
            <symbol>d</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;CoreStringNames::free&apos;" verbose="Unused private function: &apos;CoreStringNames::free&apos;" cwe="398" file0="core/core_string_names.cpp">
            <location file="core/core_string_names.h" line="41" column="14"/>
            <symbol>CoreStringNames::free</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;peer&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;peer&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/debugger/remote_debugger.cpp">
            <location file="core/debugger/remote_debugger.cpp" line="640" column="2"/>
            <symbol>peer</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;BandwidthFrame::timestamp&apos; is never used." verbose="struct member &apos;BandwidthFrame::timestamp&apos; is never used." cwe="563" file0="core/debugger/remote_debugger.cpp">
            <location file="core/debugger/remote_debugger.cpp" line="44" column="12"/>
            <symbol>BandwidthFrame::timestamp</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;BandwidthFrame::packet_size&apos; is never used." verbose="struct member &apos;BandwidthFrame::packet_size&apos; is never used." cwe="563" file0="core/debugger/remote_debugger.cpp">
            <location file="core/debugger/remote_debugger.cpp" line="45" column="7"/>
            <symbol>BandwidthFrame::packet_size</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~RemoteDebuggerPeerTCP()&apos; at line 92. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~RemoteDebuggerPeerTCP()&apos; at line 92. Dynamic binding is not used." file0="core/debugger/remote_debugger_peer.cpp">
            <location file="core/debugger/remote_debugger_peer.h" line="90" column="7" info="close is a virtual function"/>
            <location file="core/debugger/remote_debugger_peer.cpp" line="92" column="2" info="Calling close"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TOOLS_ENABLED;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TOOLS_ENABLED;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/extension/extension_api_dump.cpp" line="76" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;VERSION_PATCH&apos; since the value of &apos;VERSION_PATCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/extension/gdnative_interface.cpp" line="908" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;call_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;call_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/native_extension.cpp">
            <location file="core/extension/native_extension.cpp" line="97" column="3"/>
            <symbol>call_func</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ptrcall_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ptrcall_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/native_extension.cpp">
            <location file="core/extension/native_extension.cpp" line="98" column="3"/>
            <symbol>ptrcall_func</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;get_argument_type_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;get_argument_type_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/native_extension.cpp">
            <location file="core/extension/native_extension.cpp" line="99" column="3"/>
            <symbol>get_argument_type_func</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;get_argument_info_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;get_argument_info_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/native_extension.cpp">
            <location file="core/extension/native_extension.cpp" line="100" column="3"/>
            <symbol>get_argument_info_func</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;get_argument_metadata_func&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;get_argument_metadata_func&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/extension/native_extension.cpp">
            <location file="core/extension/native_extension.cpp" line="101" column="3"/>
            <symbol>get_argument_metadata_func</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CharBuffer::stack_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;CharBuffer::stack_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/file_access.cpp">
            <location file="core/io/file_access.cpp" line="279" column="17"/>
            <symbol>CharBuffer::stack_buffer</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/io/file_access_compressed.cpp">
            <location file="core/io/file_access_compressed.cpp" line="125" column="31" info="err is overwritten"/>
            <location file="core/io/file_access_compressed.cpp" line="124" column="7" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_open&apos; is called from constructor &apos;FileAccessZip(const String&amp;p_path,const PackedData::PackedFile&amp;p_file)&apos; at line 340. Dynamic binding is not used." verbose="Virtual function &apos;_open&apos; is called from constructor &apos;FileAccessZip(const String&amp;p_path,const PackedData::PackedFile&amp;p_file)&apos; at line 340. Dynamic binding is not used." file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.h" line="88" column="16" info="_open is a virtual function"/>
            <location file="core/io/file_access_zip.cpp" line="340" column="2" info="Calling _open"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="59" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="69" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="74" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="93" column="16"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="core/io/file_access_zip.cpp">
            <location file="core/io/file_access_zip.cpp" line="99" column="16"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;IPAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;IPAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/io/ip_address.cpp">
            <location file="core/io/ip_address.h" line="94" column="2"/>
            <symbol>IPAddress</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDP::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDP::recv_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/packet_peer_udp.cpp">
            <location file="core/io/packet_peer_udp.cpp" line="361" column="16"/>
            <symbol>PacketPeerUDP::recv_buffer</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDP::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDP::packet_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/packet_peer_udp.cpp">
            <location file="core/io/packet_peer_udp.cpp" line="361" column="16"/>
            <symbol>PacketPeerUDP::packet_buffer</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.h" line="120" column="1"/>
            <symbol>ResourceFormatSaverBinaryInstance</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;dst&apos; shadows outer argument" verbose="Local variable &apos;dst&apos; shadows outer argument" cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="112" column="15" info="Shadow variable"/>
            <location file="core/io/resource_format_binary.cpp" line="105" column="33" info="Shadowed declaration"/>
            <symbol>dst</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;dst&apos; shadows outer argument" verbose="Local variable &apos;dst&apos; shadows outer argument" cwe="398" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="132" column="15" info="Shadow variable"/>
            <location file="core/io/resource_format_binary.cpp" line="105" column="33" info="Shadowed declaration"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dst" verbose="Uninitialized variable: dst" cwe="457" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="112" column="33"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dst" verbose="Uninitialized variable: dst" cwe="457" file0="core/io/resource_format_binary.cpp">
            <location file="core/io/resource_format_binary.cpp" line="132" column="33"/>
            <symbol>dst</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;UDPServer::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;UDPServer::recv_buffer&apos; is not initialized in the constructor." cwe="398" file0="core/io/udp_server.cpp">
            <location file="core/io/udp_server.cpp" line="199" column="12"/>
            <symbol>UDPServer::recv_buffer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Basis&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Basis&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/basis.cpp">
            <location file="core/math/basis.h" line="237" column="2"/>
            <symbol>Basis</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;CameraMatrix&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;CameraMatrix&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/camera_matrix.cpp">
            <location file="core/math/camera_matrix.h" line="122" column="2"/>
            <symbol>CameraMatrix</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Color&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Color&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/color.cpp">
            <location file="core/math/color.h" line="250" column="2"/>
            <symbol>Color</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;x&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;x&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="395" column="4"/>
            <symbol>x</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;y&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;y&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="396" column="4"/>
            <symbol>y</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;z&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;z&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="397" column="4"/>
            <symbol>z</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;denominator&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;denominator&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="398" column="4"/>
            <symbol>denominator</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="185" column="3"/>
            <symbol>Int128</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Int128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="190" column="3"/>
            <symbol>Int128</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Rational128&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Rational128&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="343" column="3"/>
            <symbol>Rational128</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;++low==0&apos; is always false" verbose="Condition &apos;++low==0&apos; is always false" cwe="570" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="255" column="14" info="Condition &apos;++low==0&apos; is always false"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v00" verbose="Possible null pointer dereference: v00" cwe="476" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="963" column="2" info="Null pointer dereference"/>
            <location file="core/math/convex_hull.cpp" line="950" column="12" info="Assuming condition is false"/>
            <location file="core/math/convex_hull.cpp" line="866" column="16" info="Assignment &apos;v00=nullptr&apos;, assigned value is 0"/>
            <symbol>v00</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v10" verbose="Possible null pointer dereference: v10" cwe="476" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="964" column="2" info="Null pointer dereference"/>
            <location file="core/math/convex_hull.cpp" line="950" column="12" info="Assuming condition is false"/>
            <location file="core/math/convex_hull.cpp" line="867" column="16" info="Assignment &apos;v10=nullptr&apos;, assigned value is 0"/>
            <symbol>v10</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 1) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 1) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1811" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 2) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 2) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1811" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1811" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 4) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 4) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1811" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1829" column="4"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." verbose="%lld in format string (no. 3) requires &apos;long long&apos; but the argument type is &apos;signed long&apos;." cwe="686" file0="core/math/convex_hull.cpp">
            <location file="core/math/convex_hull.cpp" line="1859" column="4"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="331" column="38"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="387" column="38"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/dynamic_bvh.cpp">
            <location file="core/math/dynamic_bvh.h" line="439" column="38"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.h" line="561" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="906" column="22"/>
            <symbol>alloca</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="907" column="11"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="core/math/geometry_3d.cpp">
            <location file="core/math/geometry_3d.cpp" line="908" column="13"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Plane&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Plane&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/plane.cpp">
            <location file="core/math/plane.h" line="87" column="17"/>
            <symbol>Plane</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Quaternion&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Quaternion&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/quaternion.cpp">
            <location file="core/math/quaternion.h" line="129" column="2"/>
            <symbol>Quaternion</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::tnear</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::time&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::tfar</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::u&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::u&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::u</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::v&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::v&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::v</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::primID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="57" column="18"/>
            <symbol>Ray::instID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="62" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="core/math/static_raycaster.cpp">
            <location file="core/math/static_raycaster.h" line="62" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/math/static_raycaster.h" line="53" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="core/math/static_raycaster.h" line="53" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;basis&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;basis&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/math/transform_3d.cpp">
            <location file="core/math/transform_3d.cpp" line="216" column="2"/>
            <symbol>basis</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Transform3D&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Transform3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/math/transform_3d.cpp">
            <location file="core/math/transform_3d.h" line="122" column="2"/>
            <symbol>Transform3D</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="182" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="268" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="370" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="470" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/math/triangle_mesh.cpp">
            <location file="core/math/triangle_mesh.cpp" line="584" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;CallableCustomMethodPointerBase&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;CallableCustomMethodPointerBase&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="40" column="1"/>
            <symbol>CallableCustomMethodPointerBase</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="107" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="107" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="162" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="162" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::comp_size&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="217" column="2"/>
            <symbol>CallableCustomMethodPointerBase::comp_size</symbol>
        </error>
        <error id="uninitDerivedMemberVar" severity="warning" msg="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" verbose="Member variable &apos;CallableCustomMethodPointerBase::h&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class CallableCustomMethodPointerBase?" cwe="398" file0="core/object/callable_method_pointer.cpp">
            <location file="core/object/callable_method_pointer.h" line="217" column="2"/>
            <symbol>CallableCustomMethodPointerBase::h</symbol>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;return&apos; condition is always true." verbose="Identical inner &apos;return&apos; condition is always true (outer condition is &apos;*method&apos; and inner condition is &apos;*method&apos;)." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.cpp" line="532" column="11" info="identical inner condition: *method"/>
            <location file="core/object/class_db.cpp" line="531" column="17" info="outer condition: *method"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.h" line="51" column="2"/>
            <symbol>MethodDefinition</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodDefinition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/class_db.cpp">
            <location file="core/object/class_db.h" line="53" column="2"/>
            <symbol>MethodDefinition</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/object/message_queue.cpp">
            <location file="core/object/message_queue.cpp" line="221" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;MethodBindVarArgT::_gen_return_type_info_impl&apos;" verbose="Unused private function: &apos;MethodBindVarArgT::_gen_return_type_info_impl&apos;" cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="240" column="22"/>
            <symbol>MethodBindVarArgT::_gen_return_type_info_impl</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;MethodBindVarArgTR::_gen_return_type_info_impl&apos;" verbose="Unused private function: &apos;MethodBindVarArgTR::_gen_return_type_info_impl&apos;" cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="270" column="22"/>
            <symbol>MethodBindVarArgTR::_gen_return_type_info_impl</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindT&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="347" column="2"/>
            <symbol>MethodBindT</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTC&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTC&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="422" column="2"/>
            <symbol>MethodBindTC</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTR&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTR&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="508" column="2"/>
            <symbol>MethodBindTR</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTRC&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTRC&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="595" column="2"/>
            <symbol>MethodBindTRC</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="665" column="2"/>
            <symbol>MethodBindTS</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MethodBindTRS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MethodBindTRS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/method_bind.cpp">
            <location file="core/object/method_bind.h" line="735" column="2"/>
            <symbol>MethodBindTRS</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: operator" verbose="syntax error: operator" file0="core/object/object.cpp">
            <location file="core/object/object.cpp" line="953" column="61"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="181" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="193" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref &lt; RefCounted &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/object/ref_counted.cpp">
            <location file="core/object/ref_counted.h" line="199" column="2"/>
            <symbol>Ref &lt; RefCounted &gt;</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;display&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;display&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/script_language.cpp">
            <location file="core/object/script_language.h" line="334" column="4"/>
            <symbol>display</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;insert_text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;insert_text&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/object/script_language.cpp">
            <location file="core/object/script_language.h" line="335" column="4"/>
            <symbol>insert_text</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" cwe="401" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="129" column="4"/>
            <symbol>mem</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;mem&apos; nulled but not freed upon failure" cwe="401" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="139" column="3"/>
            <symbol>mem</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="75" column="32" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="70" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="81" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="70" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="110" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="105" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prepad&apos; is always true" verbose="Condition &apos;prepad&apos; is always true" cwe="571" file0="core/os/memory.cpp">
            <location file="core/os/memory.cpp" line="160" column="6" info="Condition &apos;prepad&apos; is always true"/>
            <location file="core/os/memory.cpp" line="153" column="16" info="Assignment &apos;prepad=true&apos;, assigned value is 1"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PoolAllocator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PoolAllocator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/os/pool_allocator.cpp">
            <location file="core/os/pool_allocator.h" line="141" column="2"/>
            <symbol>PoolAllocator</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/node_path.cpp">
            <location file="core/string/node_path.h" line="92" column="2"/>
            <symbol>NodePath</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="97" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="174" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="176" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/string_name.cpp">
            <location file="core/string/string_name.h" line="177" column="2"/>
            <symbol>StringName</symbol>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer that will be invalid when returning." verbose="Returning pointer that will be invalid when returning." cwe="562" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="123" column="10"/>
            <location file="core/string/ustring.cpp" line="123" column="10" info="Address of variable taken here."/>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer that will be invalid when returning." verbose="Returning pointer that will be invalid when returning." cwe="562" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="181" column="10"/>
            <location file="core/string/ustring.cpp" line="181" column="10" info="Address of variable taken here."/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Char16String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Char16String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="113" column="17"/>
            <symbol>Char16String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CharString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CharString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="154" column="17"/>
            <symbol>CharString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="453" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="454" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="455" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.h" line="459" column="2"/>
            <symbol>String</symbol>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%hhX in format string (no. 1) requires &apos;unsigned char&apos; but the argument type is &apos;signed char&apos;." verbose="%hhX in format string (no. 1) requires &apos;unsigned char&apos; but the argument type is &apos;signed char&apos;." cwe="686" file0="core/string/ustring.cpp">
            <location file="core/string/ustring.cpp" line="3723" column="4"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CommandQueueMT&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CommandQueueMT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/templates/command_queue_mt.cpp">
            <location file="core/templates/command_queue_mt.h" line="417" column="2"/>
            <symbol>CommandQueueMT</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;object&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;object&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="429" column="2"/>
            <symbol>object</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.cpp" line="430" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Callable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Callable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/callable.cpp">
            <location file="core/variant/callable.h" line="108" column="2"/>
            <symbol>Callable</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="91" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="103" column="2"/>
            <symbol>callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;binds&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;binds&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="104" column="2"/>
            <symbol>binds</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/callable_bind.cpp">
            <location file="core/variant/callable_bind.cpp" line="178" column="2"/>
            <symbol>callable</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: operator" verbose="syntax error: operator" file0="core/variant/dictionary.cpp">
            <location file="core/variant/dictionary.cpp" line="86" column="58"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;array&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;array&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="193" column="4"/>
            <symbol>array</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="290" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="291" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="385" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="386" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="387" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="392" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="393" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="394" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="395" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="396" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="397" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="398" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="399" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="400" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="401" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="402" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="403" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="404" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="405" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="406" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="407" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="408" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="409" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="410" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="411" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="412" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="413" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="414" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="415" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="416" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="417" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="418" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="419" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="420" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="421" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="422" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="423" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="425" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="426" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="427" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="428" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="429" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="430" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="431" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="432" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="433" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="434" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="435" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="437" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="438" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="439" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="440" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="442" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="451" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="452" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="453" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="454" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="455" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; uint8_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; uint8_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; uint8_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; int32_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; int32_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; int64_t &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; int64_t &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; int64_t &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; float &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; float &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; float &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; double &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; double &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; double &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; String &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; String &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; String &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Vector2 &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Vector2 &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; Vector2 &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Vector3 &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Vector3 &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; Vector3 &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef &lt; Color &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef &lt; Color &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef &lt; Color &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="389" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant.cpp">
            <location file="core/variant/variant.h" line="390" column="2"/>
            <symbol>Variant</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PackedArrayRef&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PackedArrayRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="core/variant/variant_call.cpp">
            <location file="core/variant/variant.h" line="192" column="18"/>
            <symbol>PackedArrayRef</symbol>
        </error>
        <error id="templateRecursion" severity="information" msg="TemplateSimplifier: max template recursion (100) reached for template &apos;add_constructor&lt;String&gt;&apos;. You might want to limit Cppcheck recursion." verbose="TemplateSimplifier: max template recursion (100) reached for template &apos;add_constructor&lt;String&gt;&apos;. You might want to limit Cppcheck recursion." file0="core/variant/variant_construct.cpp">
            <location file="core/variant/variant_construct.cpp" line="192" column="44"/>
        </error>
        <error id="templateRecursion" severity="information" msg="TemplateSimplifier: max template recursion (100) reached for template &apos;register_op&lt;Variant :: OP_DIVIDE , Variant :: VECTOR2 , Variant :: VECTOR2 ) ; register_op &lt; OperatorEvaluatorDiv &lt; Vector2 , Vector2 , double &gt; &gt; ( Variant :: OP_DIVIDE , Variant :: VECTOR2 , Variant :: FLOAT ) ; register_op &lt; OperatorEvaluatorDiv &lt; Vector2 , Vector2 , int64_t &gt; &gt; ( Variant :: OP_DIVIDE , Variant :: VECTOR2 , Variant :: INT ) ; register_op &lt; OperatorEvaluatorDiv &lt; Vector3 , Vector3 , Vector3&gt;&apos;. You might want to limit Cppcheck recursion." verbose="TemplateSimplifier: max template recursion (100) reached for template &apos;register_op&lt;Variant :: OP_DIVIDE , Variant :: VECTOR2 , Variant :: VECTOR2 ) ; register_op &lt; OperatorEvaluatorDiv &lt; Vector2 , Vector2 , double &gt; &gt; ( Variant :: OP_DIVIDE , Variant :: VECTOR2 , Variant :: FLOAT ) ; register_op &lt; OperatorEvaluatorDiv &lt; Vector2 , Vector2 , int64_t &gt; &gt; ( Variant :: OP_DIVIDE , Variant :: VECTOR2 , Variant :: INT ) ; register_op &lt; OperatorEvaluatorDiv &lt; Vector3 , Vector3 , Vector3&gt;&apos;. You might want to limit Cppcheck recursion." file0="core/variant/variant_op.cpp">
            <location file="core/variant/variant_op.cpp" line="300" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="755" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="762" column="9"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="755" column="2" info="p_func is overwritten"/>
            <location file="core/variant/variant_utility.cpp" line="755" column="2" info="p_func is assigned"/>
            <symbol>p_func</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;p_func&apos; is reassigned a value before the old one has been used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="762" column="7" info="p_func is overwritten"/>
            <location file="core/variant/variant_utility.cpp" line="762" column="7" info="p_func is assigned"/>
            <symbol>p_func</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p_func&apos; is assigned a value that is never used." verbose="Variable &apos;p_func&apos; is assigned a value that is never used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="755" column="2"/>
            <symbol>p_func</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p_func&apos; is assigned a value that is never used." verbose="Variable &apos;p_func&apos; is assigned a value that is never used." cwe="563" file0="core/variant/variant_utility.cpp">
            <location file="core/variant/variant_utility.cpp" line="762" column="7"/>
            <symbol>p_func</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 200. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 200. Dynamic binding is not used." file0="drivers/alsamidi/midi_driver_alsamidi.cpp">
            <location file="drivers/alsamidi/midi_driver_alsamidi.h" line="59" column="15" info="close is a virtual function"/>
            <location file="drivers/alsamidi/midi_driver_alsamidi.cpp" line="200" column="2" info="Calling close"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverCoreMidi()&apos; at line 114. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverCoreMidi()&apos; at line 114. Dynamic binding is not used." file0="drivers/coremidi/midi_driver_coremidi.cpp">
            <location file="drivers/coremidi/midi_driver_coremidi.h" line="52" column="15" info="close is a virtual function"/>
            <location file="drivers/coremidi/midi_driver_coremidi.cpp" line="114" column="2" info="Calling close"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Info::snap&apos; is not initialized in the constructor." verbose="Member variable &apos;Info::snap&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_storage_gles3.h" line="140" column="3"/>
            <symbol>Info::snap</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerCanvasGLES3::items&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerCanvasGLES3::items&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="1218" column="24"/>
            <symbol>RasterizerCanvasGLES3::items</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="99" column="5"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vert_id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vert_id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="100" column="5"/>
            <symbol>vert_id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;frag_id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;frag_id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/shader_gles3.h" line="101" column="5"/>
            <symbol>frag_id</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RasterizerSceneGLES3&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RasterizerSceneGLES3&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.h" line="988" column="2"/>
            <symbol>RasterizerSceneGLES3</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RasterizerCanvasGLES3&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RasterizerCanvasGLES3&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.h" line="282" column="2"/>
            <symbol>RasterizerCanvasGLES3</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="178" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_default_texture_param&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_default_texture_param&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="179" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="70" column="15" info="Virtual function in base class"/>
            <symbol>set_default_texture_param</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="180" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="71" column="15" info="Virtual function in base class"/>
            <symbol>get_param_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_instance_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_instance_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="181" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="73" column="15" info="Virtual function in base class"/>
            <symbol>get_instance_param_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_param_texture&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_param_texture&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="183" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="74" column="15" info="Virtual function in base class"/>
            <symbol>is_param_texture</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="184" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="75" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="185" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="76" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_default_parameter&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_default_parameter&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="186" column="18" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="77" column="18" info="Virtual function in base class"/>
            <symbol>get_default_parameter</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="187" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="78" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="198" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="101" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="199" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="102" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="200" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="103" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="201" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="104" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="229" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_default_texture_param&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_default_texture_param&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="230" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="70" column="15" info="Virtual function in base class"/>
            <symbol>set_default_texture_param</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="231" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="71" column="15" info="Virtual function in base class"/>
            <symbol>get_param_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_instance_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_instance_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="232" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="73" column="15" info="Virtual function in base class"/>
            <symbol>get_instance_param_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_param_texture&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_param_texture&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="233" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="74" column="15" info="Virtual function in base class"/>
            <symbol>is_param_texture</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="234" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="75" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="235" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="76" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_default_parameter&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_default_parameter&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="236" column="18" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="77" column="18" info="Virtual function in base class"/>
            <symbol>get_default_parameter</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="237" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="78" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="248" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="101" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="249" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="102" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="250" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="103" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="251" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="104" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="349" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="69" column="15" info="Virtual function in base class"/>
            <symbol>set_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_default_texture_param&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_default_texture_param&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="350" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="70" column="15" info="Virtual function in base class"/>
            <symbol>set_default_texture_param</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="351" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="71" column="15" info="Virtual function in base class"/>
            <symbol>get_param_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_instance_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_instance_param_list&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="352" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="73" column="15" info="Virtual function in base class"/>
            <symbol>get_instance_param_list</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_param_texture&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_param_texture&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="354" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="74" column="15" info="Virtual function in base class"/>
            <symbol>is_param_texture</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;is_animated&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="355" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="75" column="15" info="Virtual function in base class"/>
            <symbol>is_animated</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;casts_shadows&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="356" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="76" column="15" info="Virtual function in base class"/>
            <symbol>casts_shadows</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_default_parameter&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_default_parameter&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="357" column="18" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="77" column="18" info="Virtual function in base class"/>
            <symbol>get_default_parameter</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;get_native_source_code&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="358" column="37" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="78" column="37" info="Virtual function in base class"/>
            <symbol>get_native_source_code</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_render_priority&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="372" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="101" column="15" info="Virtual function in base class"/>
            <symbol>set_render_priority</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;set_next_pass&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="373" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="102" column="15" info="Virtual function in base class"/>
            <symbol>set_next_pass</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;update_parameters&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="374" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="103" column="15" info="Virtual function in base class"/>
            <symbol>update_parameters</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;bind_uniforms&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/storage/material_storage.h" line="375" column="15" info="Function in derived class"/>
            <location file="drivers/gles3/storage/material_storage.h" line="104" column="15" info="Virtual function in base class"/>
            <symbol>bind_uniforms</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;skipping&apos; is always false" verbose="Condition &apos;skipping&apos; is always false" cwe="570" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="299" column="7" info="Condition &apos;skipping&apos; is always false"/>
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="295" column="18" info="Assignment &apos;skipping=false&apos;, assigned value is 0"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_canvas_gles3.cpp" line="1051" column="17"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/config.h" line="44" column="0"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/gles3/rasterizer_canvas_gles3.cpp">
            <location file="drivers/gles3/rasterizer_storage_gles3.h" line="335" column="35"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerSceneGLES3::time&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerSceneGLES3::time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="2727" column="23"/>
            <symbol>RasterizerSceneGLES3::time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerSceneGLES3::canvas&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerSceneGLES3::canvas&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="2727" column="23"/>
            <symbol>RasterizerSceneGLES3::canvas</symbol>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: env. &apos;!env || (env &amp;&amp; !env-&gt;fog_enabled)&apos; is equivalent to &apos;!env || !env-&gt;fog_enabled&apos;" verbose="The condition &apos;!env || env &amp;&amp; !env-&gt;fog_enabled&apos; is equivalent to &apos;!env || !env-&gt;fog_enabled&apos;." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="2162" column="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_begin&apos; can be reduced." verbose="The scope of the variable &apos;fade_begin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1866" column="9"/>
            <symbol>fade_begin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_length&apos; can be reduced." verbose="The scope of the variable &apos;fade_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1867" column="9"/>
            <symbol>fade_length</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!force_alpha&apos; is always true" verbose="Condition &apos;!force_alpha&apos; is always true" cwe="571" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1582" column="9" info="Condition &apos;!force_alpha&apos; is always true"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1580" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;force_alpha&apos; is always false" verbose="Condition &apos;force_alpha&apos; is always false" cwe="570" file0="drivers/gles3/rasterizer_scene_gles3.cpp">
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1585" column="9" info="Condition &apos;force_alpha&apos; is always false"/>
            <location file="drivers/gles3/rasterizer_scene_gles3.cpp" line="1580" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/shader_gles3.h" line="50" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/light_storage.h" line="47" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2892" column="19"/>
            <symbol>CanvasShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3115" column="16"/>
            <symbol>SkyShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3115" column="16"/>
            <symbol>SkyShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_position&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_position&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3115" column="16"/>
            <symbol>SkyShaderData::uses_position</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_half_res&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_half_res&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3115" column="16"/>
            <symbol>SkyShaderData::uses_half_res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_quarter_res&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_quarter_res&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3115" column="16"/>
            <symbol>SkyShaderData::uses_quarter_res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkyShaderData::uses_light&apos; is not initialized in the constructor." verbose="Member variable &apos;SkyShaderData::uses_light&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3115" column="16"/>
            <symbol>SkyShaderData::uses_light</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::ubo_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::ubo_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::ubo_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::blend_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::blend_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::blend_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::alpha_antialiasing_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::alpha_antialiasing_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::alpha_antialiasing_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::depth_draw&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::depth_draw&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::depth_draw</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::depth_test&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::depth_test</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::cull_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::cull_mode&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::cull_mode</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_point_size&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_point_size&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_point_size</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_blend_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_blend_alpha&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_blend_alpha</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_alpha_clip&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_alpha_clip&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_alpha_clip</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_depth_pre_pass&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_depth_pre_pass&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_depth_pre_pass</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_discard&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_discard&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_discard</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_roughness&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_roughness&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_roughness</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_normal&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_normal&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_normal</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_particle_trails&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_particle_trails&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_particle_trails</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::wireframe&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::wireframe&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::wireframe</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::unshaded&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::unshaded&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::unshaded</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_vertex&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_vertex&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_vertex</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_position&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_position&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_position</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_sss&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_sss&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_sss</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_transmittance&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_transmittance&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_transmittance</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_depth_texture&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_depth_texture&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_depth_texture</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_normal_texture&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_normal_texture&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_normal_texture</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_time&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::writes_modelview_or_projection&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::writes_modelview_or_projection&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::writes_modelview_or_projection</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_world_coordinates&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_world_coordinates&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_world_coordinates</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_tangent&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_tangent&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_tangent</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_color&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_color&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_color</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_uv&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_uv&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_uv</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_uv2&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_uv2&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_uv2</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom0&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom0&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_custom0</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom1&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom1&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_custom1</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom2&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom2&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_custom2</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_custom3&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_custom3&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_custom3</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_bones&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_bones&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_bones</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneShaderData::uses_weights&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneShaderData::uses_weights&apos; is not initialized in the constructor." cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="3425" column="18"/>
            <symbol>SceneShaderData::uses_weights</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="346" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="368" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="392" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="445" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="518" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="559" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="614" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="775" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="780" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="788" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="796" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="803" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="816" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="832" column="17"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;gv&apos; can be declared with const" verbose="Variable &apos;gv&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2057" column="29" info="Variable &apos;gv&apos; can be declared with const"/>
            <symbol>gv</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;datatype_from_value&apos; can be declared with const" verbose="Variable &apos;datatype_from_value&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2281" column="27" info="Variable &apos;datatype_from_value&apos; can be declared with const"/>
            <symbol>datatype_from_value</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: gv.buffer_elements" verbose="Uninitialized struct member: gv.buffer_elements" cwe="457" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2050" column="39"/>
            <symbol>gv.buffer_elements</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: gv.buffer_elements" verbose="Uninitialized variable: gv.buffer_elements" cwe="457" file0="drivers/gles3/storage/material_storage.cpp">
            <location file="drivers/gles3/storage/material_storage.cpp" line="2050" column="39"/>
            <location file="drivers/gles3/storage/material_storage.cpp" line="2022" column="13" info="Assuming condition is true"/>
            <symbol>gv</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmt_shift&apos; can be declared with const" verbose="Variable &apos;fmt_shift&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="147" column="16" info="Variable &apos;fmt_shift&apos; can be declared with const"/>
            <symbol>fmt_shift</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmtsize&apos; can be declared with const" verbose="Variable &apos;fmtsize&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="149" column="16" info="Variable &apos;fmtsize&apos; can be declared with const"/>
            <symbol>fmtsize</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmt_shift&apos; can be declared with const" verbose="Variable &apos;fmt_shift&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="692" column="14" info="Variable &apos;fmt_shift&apos; can be declared with const"/>
            <symbol>fmt_shift</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;gl_type&apos; can be declared with const" verbose="Variable &apos;gl_type&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="695" column="12" info="Variable &apos;gl_type&apos; can be declared with const"/>
            <symbol>gl_type</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;norm&apos; can be declared with const" verbose="Variable &apos;norm&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="696" column="15" info="Variable &apos;norm&apos; can be declared with const"/>
            <symbol>norm</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;fmtsize&apos; can be declared with const" verbose="Variable &apos;fmtsize&apos; can be declared with const" cwe="398" file0="drivers/gles3/storage/mesh_storage.cpp">
            <location file="drivers/gles3/storage/mesh_storage.cpp" line="694" column="14" info="Variable &apos;fmtsize&apos; can be declared with const"/>
            <symbol>fmtsize</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="drivers/gles3/storage/mesh_storage.h" line="45" column="0"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 69. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 69. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="69" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 70. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 70. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="453" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="70" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 75. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 75. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="75" column="61" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 76. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 76. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="454" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="76" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 82. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 82. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="82" column="55" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 83. Dynamic binding is not used." verbose="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 83. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="455" column="15" info="texture_3d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="83" column="4" info="Calling texture_3d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 89. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 89. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="89" column="60" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 90. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 90. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="454" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="90" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 100. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 100. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="100" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 101. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 101. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="453" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="101" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 109. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 109. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="109" column="55" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 110. Dynamic binding is not used." verbose="Virtual function &apos;texture_3d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 110. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="455" column="15" info="texture_3d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="110" column="4" info="Calling texture_3d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 115. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 115. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="115" column="60" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 116. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_layered_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 116. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="454" column="15" info="texture_2d_layered_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="116" column="4" info="Calling texture_2d_layered_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 126. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 126. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="126" column="53" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 127. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 127. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="453" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="127" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 137. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 137. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="137" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 138. Dynamic binding is not used." verbose="Virtual function &apos;texture_2d_initialize&apos; is called from constructor &apos;TextureStorage()&apos; at line 138. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="453" column="15" info="texture_2d_initialize is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="138" column="4" info="Calling texture_2d_initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 150. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 150. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="150" column="54" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 171. Dynamic binding is not used." verbose="Virtual function &apos;texture_allocate&apos; is called from constructor &apos;TextureStorage()&apos; at line 171. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="450" column="14" info="texture_allocate is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="171" column="52" info="Calling texture_allocate"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;texture_free&apos; is called from destructor &apos;~TextureStorage()&apos; at line 192. Dynamic binding is not used." verbose="Virtual function &apos;texture_free&apos; is called from destructor &apos;~TextureStorage()&apos; at line 192. Dynamic binding is not used." file0="drivers/gles3/storage/texture_storage.cpp">
            <location file="drivers/gles3/storage/texture_storage.h" line="451" column="15" info="texture_free is a virtual function"/>
            <location file="drivers/gles3/storage/texture_storage.cpp" line="192" column="3" info="Calling texture_free"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessUnix()&apos; at line 507. Dynamic binding is not used." verbose="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessUnix()&apos; at line 507. Dynamic binding is not used." file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.h" line="69" column="16" info="change_dir is a virtual function"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="507" column="2" info="Calling change_dir"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessUnix()&apos; at line 511. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessUnix()&apos; at line 511. Dynamic binding is not used." file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.h" line="62" column="15" info="list_dir_end is a virtual function"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="511" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_dir&apos; shadows outer argument" verbose="Local variable &apos;p_dir&apos; shadows outer argument" cwe="398" file0="drivers/unix/dir_access_unix.cpp">
            <location file="drivers/unix/dir_access_unix.cpp" line="335" column="2" info="Shadow variable"/>
            <location file="drivers/unix/dir_access_unix.cpp" line="332" column="40" info="Shadowed declaration"/>
            <symbol>p_dir</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketPosix()&apos; at line 181. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketPosix()&apos; at line 181. Dynamic binding is not used." file0="drivers/unix/net_socket_posix.cpp">
            <location file="drivers/unix/net_socket_posix.h" line="79" column="15" info="close is a virtual function"/>
            <location file="drivers/unix/net_socket_posix.cpp" line="181" column="2" info="Calling close"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IPV6_ADD_MEMBERSHIP;IPV6_JOIN_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_ADD_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IPV6_ADD_MEMBERSHIP;IPV6_JOIN_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_ADD_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="291" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IPV6_DROP_MEMBERSHIP;IPV6_LEAVE_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_DROP_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IPV6_DROP_MEMBERSHIP;IPV6_LEAVE_GROUP;UNIX_ENABLED&apos; since the value of &apos;IPV6_DROP_MEMBERSHIP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="291" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;MSG_NOSIGNAL&apos; since the value of &apos;MSG_NOSIGNAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;MSG_NOSIGNAL&apos; since the value of &apos;MSG_NOSIGNAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="606" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIO_UDP_NETRESET;__MINGW32__;WINDOWS_ENABLED&apos; since the value of &apos;SIO_UDP_NETRESET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIO_UDP_NETRESET;__MINGW32__;WINDOWS_ENABLED&apos; since the value of &apos;SIO_UDP_NETRESET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="373" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SO_NOSIGPIPE&apos; since the value of &apos;SO_NOSIGPIPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SO_NOSIGPIPE&apos; since the value of &apos;SO_NOSIGPIPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/unix/net_socket_posix.cpp" line="382" column="0"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7782" column="57"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7856" column="44"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8030" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8347" column="44"/>
            <symbol>alloca</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8957" column="7" info="Second condition"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8945" column="7" info="First condition"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: draw_list" verbose="Possible null pointer dereference: draw_list" cwe="476" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7771" column="4" info="Null pointer dereference"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7767" column="17" info="Assignment &apos;draw_list=nullptr&apos;, assigned value is 0"/>
            <symbol>draw_list</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: draw_list" verbose="Possible null pointer dereference: draw_list" cwe="476" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7772" column="4" info="Null pointer dereference"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7767" column="17" info="Assignment &apos;draw_list=nullptr&apos;, assigned value is 0"/>
            <symbol>draw_list</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: image_barriers" verbose="Possible null pointer dereference: image_barriers" cwe="476" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8353" column="48" info="Null pointer dereference"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8352" column="39" info="Assuming container is not empty"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8346" column="6" info="Assuming condition is false"/>
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8342" column="41" info="Assignment &apos;image_barriers=nullptr&apos;, assigned value is 0"/>
            <symbol>image_barriers</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fb_format.view_count" verbose="Uninitialized variable: fb_format.view_count" cwe="457" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="3933" column="28"/>
            <symbol>fb_format</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;barrier_flags&apos; is assigned a value that is never used." verbose="Variable &apos;barrier_flags&apos; is assigned a value that is never used." cwe="563" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7846" column="17"/>
            <symbol>barrier_flags</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;src_stage&apos; is assigned a value that is never used." verbose="Variable &apos;src_stage&apos; is assigned a value that is never used." cwe="563" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7859" column="21"/>
            <symbol>src_stage</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;src_stage&apos; is assigned a value that is never used." verbose="Variable &apos;src_stage&apos; is assigned a value that is never used." cwe="563" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="7863" column="13"/>
            <symbol>src_stage</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;barrier_flags&apos; is assigned a value that is never used." verbose="Variable &apos;barrier_flags&apos; is assigned a value that is never used." cwe="563" file0="drivers/vulkan/rendering_device_vulkan.cpp">
            <location file="drivers/vulkan/rendering_device_vulkan.cpp" line="8339" column="17"/>
            <symbol>barrier_flags</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2011" column="54"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2012" column="67"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2051" column="51"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2083" column="50"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2084" column="40"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::subgroup_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::subgroup_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2395" column="16"/>
            <symbol>VulkanContext::subgroup_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::multiview_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::multiview_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2395" column="16"/>
            <symbol>VulkanContext::multiview_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::shader_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::shader_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2395" column="16"/>
            <symbol>VulkanContext::shader_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::storage_buffer_capabilities&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::storage_buffer_capabilities&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2395" column="16"/>
            <symbol>VulkanContext::storage_buffer_capabilities</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VulkanContext::extension_names&apos; is not initialized in the constructor." verbose="Member variable &apos;VulkanContext::extension_names&apos; is not initialized in the constructor." cwe="398" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2395" column="16"/>
            <symbol>VulkanContext::extension_names</symbol>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &apos;presentModes&apos; is freed twice." verbose="Memory pointed to by &apos;presentModes&apos; is freed twice." cwe="415" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="1532" column="3"/>
            <location file="drivers/vulkan/vulkan_context.cpp" line="1500" column="3"/>
            <symbol>presentModes</symbol>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &apos;cmdbufptr&apos; used instead of size of its data." verbose="Size of pointer &apos;cmdbufptr&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*cmdbufptr)&apos;." cwe="467" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2051" column="20"/>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &apos;pSwapchains&apos; used instead of size of its data." verbose="Size of pointer &apos;pSwapchains&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*pSwapchains)&apos;." cwe="467" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2083" column="18"/>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &apos;pImageIndices&apos; used instead of size of its data." verbose="Size of pointer &apos;pImageIndices&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*pImageIndices)&apos;." cwe="467" file0="drivers/vulkan/vulkan_context.cpp">
            <location file="drivers/vulkan/vulkan_context.cpp" line="2084" column="12"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessWindows()&apos; at line 386. Dynamic binding is not used." verbose="Virtual function &apos;change_dir&apos; is called from constructor &apos;DirAccessWindows()&apos; at line 386. Dynamic binding is not used." file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.h" line="66" column="16" info="change_dir is a virtual function"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="386" column="2" info="Calling change_dir"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_dir&apos; shadows outer argument" verbose="Local variable &apos;p_dir&apos; shadows outer argument" cwe="398" file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.cpp" line="126" column="2" info="Shadow variable"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="123" column="43" info="Shadowed declaration"/>
            <symbol>p_dir</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p_dir&apos; shadows outer argument" verbose="Local variable &apos;p_dir&apos; shadows outer argument" cwe="398" file0="drivers/windows/dir_access_windows.cpp">
            <location file="drivers/windows/dir_access_windows.cpp" line="158" column="2" info="Shadow variable"/>
            <location file="drivers/windows/dir_access_windows.cpp" line="155" column="41" info="Shadowed declaration"/>
            <symbol>p_dir</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverWinMidi()&apos; at line 99. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverWinMidi()&apos; at line 99. Dynamic binding is not used." file0="drivers/winmidi/midi_driver_winmidi.cpp">
            <location file="drivers/winmidi/midi_driver_winmidi.h" line="52" column="15" info="close is a virtual function"/>
            <location file="drivers/winmidi/midi_driver_winmidi.cpp" line="99" column="2" info="Calling close"/>
        </error>
        <error id="oppositeExpression" severity="style" msg="Opposite expression on both sides of &apos;||&apos;." verbose="Finding the opposite expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="editor/animation_bezier_editor.cpp">
            <location file="editor/animation_bezier_editor.cpp" line="934" column="43"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preview&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preview&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="78" column="4"/>
            <symbol>preview</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base_stream&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base_stream&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="79" column="4"/>
            <symbol>base_stream</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;playback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;playback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/audio_stream_preview.cpp">
            <location file="editor/audio_stream_preview.h" line="80" column="4"/>
            <symbol>playback</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_code_complete_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1960. Dynamic binding is not used." verbose="Virtual function &apos;_code_complete_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1960. Dynamic binding is not used." file0="editor/code_editor.cpp">
            <location file="editor/code_editor.h" line="206" column="15" info="_code_complete_script is a virtual function"/>
            <location file="editor/code_editor.cpp" line="909" column="2" info="Calling _code_complete_script"/>
            <location file="editor/code_editor.cpp" line="1960" column="87" info="Calling _complete_request"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_validate_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1971. Dynamic binding is not used." verbose="Virtual function &apos;_validate_script&apos; is called from constructor &apos;CodeTextEditor()&apos; at line 1971. Dynamic binding is not used." file0="editor/code_editor.cpp">
            <location file="editor/code_editor.h" line="205" column="15" info="_validate_script is a virtual function"/>
            <location file="editor/code_editor.cpp" line="1671" column="2" info="Calling _validate_script"/>
            <location file="editor/code_editor.cpp" line="1971" column="62" info="Calling _text_changed_idle_timeout"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/create_dialog.cpp">
            <location file="editor/create_dialog.cpp" line="713" column="2"/>
            <symbol>base_type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preferred_search_result_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preferred_search_result_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/create_dialog.cpp">
            <location file="editor/create_dialog.cpp" line="714" column="2"/>
            <symbol>preferred_search_result_type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;source&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;source&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_debugger_node.cpp">
            <location file="editor/debugger/editor_debugger_node.h" line="92" column="4"/>
            <symbol>source</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="41" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="44" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/debugger/editor_performance_profiler.cpp">
            <location file="editor/debugger/editor_performance_profiler.cpp" line="45" column="2"/>
            <symbol>base</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;notch_color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;notch_color&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/editor_audio_buses.cpp">
            <location file="editor/editor_audio_buses.cpp" line="1443" column="2"/>
            <symbol>notch_color</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AudioBusesEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AudioBusesEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_audio_buses.cpp">
            <location file="editor/editor_audio_buses.h" line="274" column="2"/>
            <symbol>AudioBusesEditorPlugin</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectSettingsEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectSettingsEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_autoload_settings.cpp">
            <location file="editor/project_settings_editor.h" line="122" column="2"/>
            <symbol>ProjectSettingsEditor</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="editor/editor_command_palette.cpp">
            <location file="editor/editor_command_palette.cpp" line="196" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorFeatureProfile::features_disabled&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorFeatureProfile::features_disabled&apos; is not initialized in the constructor." cwe="398" file0="editor/editor_feature_profile.cpp">
            <location file="editor/editor_feature_profile.cpp" line="307" column="23"/>
            <symbol>EditorFeatureProfile::features_disabled</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;matches[class_doc.name]&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;matches[class_doc.name]&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/editor_help_search.cpp">
            <location file="editor/editor_help_search.cpp" line="406" column="27" info="matches[class_doc.name] is overwritten"/>
            <location file="editor/editor_help_search.cpp" line="404" column="28" info="matches[class_doc.name] is assigned"/>
            <symbol>matches[class_doc.name]</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;LogFilter&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;LogFilter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_log.cpp">
            <location file="editor/editor_log.h" line="111" column="3"/>
            <symbol>LogFilter</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;save_each&apos; is always true" verbose="Condition &apos;save_each&apos; is always true" cwe="571" file0="editor/editor_node.cpp">
            <location file="editor/editor_node.cpp" line="2824" column="10" info="Condition &apos;save_each&apos; is always true"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorPath&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorPath&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/editor_path.cpp">
            <location file="editor/editor_path.h" line="68" column="2"/>
            <symbol>EditorPath</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 393. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 393. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="173" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="348" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="393" column="77" info="Calling _locale_selected"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 394. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocale()&apos; at line 394. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="173" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="348" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="382" column="2" info="Calling _locale_selected"/>
            <location file="editor/editor_properties.cpp" line="394" column="75" info="Calling _locale_focus_exited"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 490. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 490. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="153" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="414" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="490" column="73" info="Calling _path_selected"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 491. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyPath()&apos; at line 491. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="153" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="414" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="478" column="2" info="Calling _path_selected"/>
            <location file="editor/editor_properties.cpp" line="491" column="71" info="Calling _path_focus_exited"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyClassName()&apos; at line 543. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyClassName()&apos; at line 543. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="194" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="528" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="543" column="72" info="Calling _dialog_created"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyNodePath()&apos; at line 2962. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyNodePath()&apos; at line 2962. Dynamic binding is not used." file0="editor/editor_properties.cpp">
            <location file="editor/editor_properties.h" line="701" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties.cpp" line="2862" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties.cpp" line="2962" column="71" info="Calling _node_clear"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyArray()&apos; at line 684. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyArray()&apos; at line 684. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="134" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="525" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="684" column="67" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyArray()&apos; at line 698. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyArray()&apos; at line 698. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="134" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="202" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="698" column="77" info="Calling _change_type_menu"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1188. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1188. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="169" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1167" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1188" column="72" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1198. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyDictionary()&apos; at line 1198. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="169" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="786" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1198" column="82" info="Calling _change_type_menu"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1411. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1411. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="204" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1390" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1411" column="79" info="Calling _edit_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1422. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyLocalizableString()&apos; at line 1422. Dynamic binding is not used." file0="editor/editor_properties_array_dict.cpp">
            <location file="editor/editor_properties_array_dict.h" line="204" column="15" info="update_property is a virtual function"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1233" column="2" info="Calling update_property"/>
            <location file="editor/editor_properties_array_dict.cpp" line="1422" column="96" info="Calling _add_locale"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;running_scene&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;running_scene&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/editor_run.cpp">
            <location file="editor/editor_run.cpp" line="297" column="2"/>
            <symbol>running_scene</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;in_dev&apos; is always false" verbose="Condition &apos;in_dev&apos; is always false" cwe="570" file0="editor/editor_toaster.cpp">
            <location file="editor/editor_toaster.cpp" line="159" column="51" info="Condition &apos;in_dev&apos; is always false"/>
            <location file="editor/editor_toaster.cpp" line="154" column="16" info="Assignment &apos;in_dev=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;in_dev&apos; is always true" verbose="Condition &apos;in_dev&apos; is always true" cwe="571" file0="editor/editor_toaster.cpp">
            <location file="editor/editor_toaster.cpp" line="159" column="51" info="Condition &apos;in_dev&apos; is always true"/>
            <location file="editor/editor_toaster.cpp" line="152" column="16" info="Assignment &apos;in_dev=true&apos;, assigned value is 1"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used." cwe="563" file0="editor/export_template_manager.cpp">
            <location file="editor/export_template_manager.cpp" line="520" column="7" info="ret is overwritten"/>
            <location file="editor/export_template_manager.cpp" line="509" column="8" info="ret is assigned"/>
            <symbol>ret</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;InspectorDock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;InspectorDock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/inspector_dock.cpp">
            <location file="editor/inspector_dock.h" line="152" column="2"/>
            <symbol>InspectorDock</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="editor/node_dock.cpp">
            <location file="editor/connections_dialog.h" line="96" column="49"/>
            <symbol>alloca</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ConnectionData&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ConnectionData&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/node_dock.cpp">
            <location file="editor/connections_dialog.h" line="67" column="3"/>
            <symbol>ConnectionData</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/abstract_polygon_2d_editor.h" line="49" column="3"/>
            <symbol>Vertex</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CanvasItemEditorViewport&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CanvasItemEditorViewport&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/abstract_polygon_2d_editor.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.h" line="632" column="2"/>
            <symbol>CanvasItemEditorViewport</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/animation_player_editor_plugin.cpp">
            <location file="editor/plugins/animation_player_editor_plugin.h" line="239" column="2"/>
            <symbol>AnimationPlayerEditor</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;player&apos; is always true" verbose="Condition &apos;player&apos; is always true" cwe="571" file0="editor/plugins/animation_player_editor_plugin.cpp">
            <location file="editor/plugins/animation_player_editor_plugin.cpp" line="751" column="6" info="Condition &apos;player&apos; is always true"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;x_rot&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;x_rot&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="336" column="4"/>
            <symbol>x_rot</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;y_rot&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;y_rot&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="337" column="4"/>
            <symbol>y_rot</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;distance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;distance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="338" column="4"/>
            <symbol>distance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;fov_scale&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;fov_scale&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/camera_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="339" column="4"/>
            <symbol>fov_scale</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;zoom&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;zoom&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/canvas_item_editor_plugin.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="4883" column="2"/>
            <symbol>zoom</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;default_texture_node_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;default_texture_node_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/canvas_item_editor_plugin.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="5794" column="2"/>
            <symbol>default_texture_node_type</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="editor/plugins/canvas_item_editor_plugin.cpp">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="2979" column="7" info="Second condition"/>
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="2974" column="7" info="First condition"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;DebuggerEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;DebuggerEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/debugger_editor_plugin.cpp">
            <location file="editor/plugins/debugger_editor_plugin.h" line="66" column="2"/>
            <symbol>DebuggerEditorPlugin</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="348" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scenario&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scenario&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="758" column="2"/>
            <symbol>scenario</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;viewport&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;viewport&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/editor_preview_plugins.cpp">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="889" column="2"/>
            <symbol>viewport</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_2d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_2d_editor_plugin.cpp" line="293" column="16"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_2d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_2d_editor_plugin.cpp" line="337" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_3d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_3d_editor_plugin.cpp" line="357" column="15"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="editor/plugins/gpu_particles_3d_editor_plugin.cpp">
            <location file="editor/plugins/gpu_particles_3d_editor_plugin.cpp" line="386" column="16"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;viewport_environment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;viewport_environment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="7488" column="2"/>
            <symbol>viewport_environment</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;snapped_to_floor&apos; can be reduced." verbose="The scope of the variable &apos;snapped_to_floor&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="editor/plugins/node_3d_editor_plugin.cpp">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="6791" column="7"/>
            <symbol>snapped_to_floor</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;snap_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;snap_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1232" column="2"/>
            <symbol>snap_offset</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1473. Dynamic binding is not used." verbose="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1473. Dynamic binding is not used." file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.h" line="159" column="18" info="_get_node is a virtual function"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="961" column="33" info="Calling _get_node"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1473" column="68" info="Calling _uv_draw"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1474. Dynamic binding is not used." verbose="Virtual function &apos;_get_node&apos; is called from constructor &apos;Polygon2DEditor()&apos; at line 1474. Dynamic binding is not used." file0="editor/plugins/polygon_2d_editor_plugin.cpp">
            <location file="editor/plugins/polygon_2d_editor_plugin.h" line="159" column="18" info="_get_node is a virtual function"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="448" column="7" info="Calling _get_node"/>
            <location file="editor/plugins/polygon_2d_editor_plugin.cpp" line="1474" column="73" info="Calling _uv_input"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RayCast2DEditor::node&apos; is not initialized in the constructor." verbose="Member variable &apos;RayCast2DEditor::node&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/ray_cast_2d_editor_plugin.cpp">
            <location file="editor/plugins/ray_cast_2d_editor_plugin.cpp" line="128" column="18"/>
            <symbol>RayCast2DEditor::node</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 258. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 258. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="57" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="195" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="258" column="73" info="Calling _node_clear"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 264. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 264. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="57" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="43" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="264" column="83" info="Calling _confirmed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 270. Dynamic binding is not used." verbose="Virtual function &apos;update_property&apos; is called from constructor &apos;EditorPropertyRootMotion()&apos; at line 270. Dynamic binding is not used." file0="editor/plugins/root_motion_editor_plugin.cpp">
            <location file="editor/plugins/root_motion_editor_plugin.h" line="57" column="15" info="update_property is a virtual function"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="43" column="2" info="Calling update_property"/>
            <location file="editor/plugins/root_motion_editor_plugin.cpp" line="270" column="82" info="Calling _confirmed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;make_visible&apos; is called from constructor &apos;Skeleton2DEditorPlugin()&apos; at line 134. Dynamic binding is not used." verbose="Virtual function &apos;make_visible&apos; is called from constructor &apos;Skeleton2DEditorPlugin()&apos; at line 134. Dynamic binding is not used." file0="editor/plugins/skeleton_2d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_2d_editor_plugin.h" line="75" column="15" info="make_visible is a virtual function"/>
            <location file="editor/plugins/skeleton_2d_editor_plugin.cpp" line="134" column="2" info="Calling make_visible"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;handle_material&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;handle_material&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.cpp" line="817" column="2"/>
            <symbol>handle_material</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unselected_mat&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unselected_mat&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.cpp" line="1106" column="2"/>
            <symbol>unselected_mat</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoneTransformEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoneTransformEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/skeleton_3d_editor_plugin.cpp">
            <location file="editor/plugins/skeleton_3d_editor_plugin.h" line="83" column="2"/>
            <symbol>BoneTransformEditor</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;make_visible&apos; is called from constructor &apos;Sprite2DEditorPlugin()&apos; at line 602. Dynamic binding is not used." verbose="Virtual function &apos;make_visible&apos; is called from constructor &apos;Sprite2DEditorPlugin()&apos; at line 602. Dynamic binding is not used." file0="editor/plugins/sprite_2d_editor_plugin.cpp">
            <location file="editor/plugins/sprite_2d_editor_plugin.h" line="108" column="15" info="make_visible is a virtual function"/>
            <location file="editor/plugins/sprite_2d_editor_plugin.cpp" line="602" column="2" info="Calling make_visible"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obj_styleBox&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obj_styleBox&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/texture_region_editor_plugin.cpp">
            <location file="editor/plugins/texture_region_editor_plugin.cpp" line="983" column="2"/>
            <symbol>obj_styleBox</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;atlas_tex&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;atlas_tex&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/texture_region_editor_plugin.cpp">
            <location file="editor/plugins/texture_region_editor_plugin.cpp" line="984" column="2"/>
            <symbol>atlas_tex</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ThemeItemEditorDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ThemeItemEditorDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/theme_editor_plugin.cpp">
            <location file="editor/plugins/theme_editor_plugin.h" line="280" column="2"/>
            <symbol>ThemeItemEditorDialog</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneTileProxyObject::source_id&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneTileProxyObject::source_id&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="90" column="3"/>
            <symbol>SceneTileProxyObject::source_id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SceneTileProxyObject::scene_id&apos; is not initialized in the constructor." verbose="Member variable &apos;SceneTileProxyObject::scene_id&apos; is not initialized in the constructor." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="90" column="3"/>
            <symbol>SceneTileProxyObject::scene_id</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;TileDataOcclusionShapeEditor&apos; defines member variable with name &apos;undo_redo&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." verbose="The class &apos;TileDataOcclusionShapeEditor&apos; defines member variable with name &apos;undo_redo&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.h" line="282" column="12" info="Derived variable &apos;TileDataOcclusionShapeEditor::undo_redo&apos;"/>
            <location file="editor/plugins/tiles/tile_data_editors.h" line="217" column="12" info="Parent variable &apos;TileDataDefaultEditor::undo_redo&apos;"/>
            <symbol>TileDataOcclusionShapeEditor</symbol>
            <symbol>undo_redo</symbol>
            <symbol>TileDataDefaultEditor</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;dummy_object&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." verbose="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;dummy_object&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.h" line="303" column="15" info="Derived variable &apos;TileDataCollisionEditor::dummy_object&apos;"/>
            <location file="editor/plugins/tiles/tile_data_editors.h" line="215" column="15" info="Parent variable &apos;TileDataDefaultEditor::dummy_object&apos;"/>
            <symbol>TileDataCollisionEditor</symbol>
            <symbol>dummy_object</symbol>
            <symbol>TileDataDefaultEditor</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;undo_redo&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." verbose="The class &apos;TileDataCollisionEditor&apos; defines member variable with name &apos;undo_redo&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.h" line="317" column="12" info="Derived variable &apos;TileDataCollisionEditor::undo_redo&apos;"/>
            <location file="editor/plugins/tiles/tile_data_editors.h" line="217" column="12" info="Parent variable &apos;TileDataDefaultEditor::undo_redo&apos;"/>
            <symbol>TileDataCollisionEditor</symbol>
            <symbol>undo_redo</symbol>
            <symbol>TileDataDefaultEditor</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;TileDataNavigationEditor&apos; defines member variable with name &apos;undo_redo&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." verbose="The class &apos;TileDataNavigationEditor&apos; defines member variable with name &apos;undo_redo&apos; also defined in its parent class &apos;TileDataDefaultEditor&apos;." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_data_editors.h" line="402" column="12" info="Derived variable &apos;TileDataNavigationEditor::undo_redo&apos;"/>
            <location file="editor/plugins/tiles/tile_data_editors.h" line="217" column="12" info="Parent variable &apos;TileDataDefaultEditor::undo_redo&apos;"/>
            <symbol>TileDataNavigationEditor</symbol>
            <symbol>undo_redo</symbol>
            <symbol>TileDataDefaultEditor</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AtlasTileProxyObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AtlasTileProxyObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_atlas_source_editor.h" line="107" column="3"/>
            <symbol>AtlasTileProxyObject</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneTileProxyObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneTileProxyObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="editor/plugins/tiles/tile_data_editors.cpp">
            <location file="editor/plugins/tiles/tile_set_scenes_collection_source_editor.h" line="90" column="3"/>
            <symbol>SceneTileProxyObject</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_editor.cpp" line="3581" column="61"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_editor.cpp" line="3598" column="61"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="editor/plugins/tiles/tile_map_editor.cpp">
            <location file="editor/plugins/tiles/tile_map_editor.cpp" line="3605" column="61"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="283" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="284" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;category&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;category&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="285" column="4"/>
            <symbol>category</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;description&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;description&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="286" column="4"/>
            <symbol>description</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ops&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ops&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="287" column="4"/>
            <symbol>ops</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;op&apos; is assigned a value that is never used." verbose="Variable &apos;op&apos; is assigned a value that is never used." cwe="563" file0="editor/plugins/visual_shader_editor_plugin.cpp">
            <location file="editor/plugins/visual_shader_editor_plugin.cpp" line="4457" column="16"/>
            <symbol>op</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;POTGenerator::_print_all_translation_strings&apos;" verbose="Unused private function: &apos;POTGenerator::_print_all_translation_strings&apos;" cwe="398" file0="editor/pot_generator.cpp">
            <location file="editor/pot_generator.h" line="56" column="7"/>
            <symbol>POTGenerator::_print_all_translation_strings</symbol>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="123" column="19"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;no_updates&apos; is always true" verbose="Condition &apos;no_updates&apos; is always true" cwe="571" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="117" column="6" info="Condition &apos;no_updates&apos; is always true"/>
            <location file="editor/progress_dialog.cpp" line="111" column="20" info="Assignment &apos;no_updates=true&apos;, assigned value is 1"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;no_updates&apos; shadows outer variable" verbose="Local variable &apos;no_updates&apos; shadows outer variable" cwe="398" file0="editor/progress_dialog.cpp">
            <location file="editor/progress_dialog.cpp" line="114" column="3" info="Shadow variable"/>
            <location file="editor/progress_dialog.cpp" line="111" column="7" info="Shadowed declaration"/>
            <symbol>no_updates</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;project_key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;project_key&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/project_manager.cpp">
            <location file="editor/project_manager.cpp" line="1029" column="4"/>
            <symbol>project_key</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;project_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;project_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/project_manager.cpp">
            <location file="editor/project_manager.cpp" line="1030" column="4"/>
            <symbol>project_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;description&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;description&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/project_manager.cpp">
            <location file="editor/project_manager.cpp" line="1031" column="4"/>
            <symbol>description</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/project_manager.cpp">
            <location file="editor/project_manager.cpp" line="1032" column="4"/>
            <symbol>path</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;icon&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;icon&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/project_manager.cpp">
            <location file="editor/project_manager.cpp" line="1033" column="4"/>
            <symbol>icon</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;main_scene&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;main_scene&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/project_manager.cpp">
            <location file="editor/project_manager.cpp" line="1034" column="4"/>
            <symbol>main_scene</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unsupported_features&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unsupported_features&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="editor/project_manager.cpp">
            <location file="editor/project_manager.cpp" line="1035" column="4"/>
            <symbol>unsupported_features</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 995. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 995. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="794" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="320" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="458" column="2" info="Calling _parent_name_changed"/>
            <location file="editor/script_create_dialog.cpp" line="995" column="81" info="Calling _language_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1004. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1004. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="794" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="320" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1004" column="78" info="Calling _parent_name_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1019. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1019. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="794" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="315" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1019" column="77" info="Calling _class_name_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1031. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1031. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="794" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="475" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1031" column="75" info="Calling _use_template_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1047. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1047. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="794" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="470" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1047" column="70" info="Calling _built_in_pressed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1056. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1056. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="794" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="558" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="1056" column="76" info="Calling _path_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1072. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1072. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="1072" column="82" info="Calling _path_submitted"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1084. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ScriptCreateDialog()&apos; at line 1084. Dynamic binding is not used." file0="editor/script_create_dialog.cpp">
            <location file="editor/script_create_dialog.h" line="114" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/script_create_dialog.cpp" line="562" column="2" info="Calling ok_pressed"/>
            <location file="editor/script_create_dialog.cpp" line="794" column="65" info="Calling _path_submitted"/>
            <location file="editor/script_create_dialog.cpp" line="320" column="2" info="Calling _update_dialog"/>
            <location file="editor/script_create_dialog.cpp" line="524" column="2" info="Calling _parent_name_changed"/>
            <location file="editor/script_create_dialog.cpp" line="1084" column="73" info="Calling _create"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_language_info&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 511. Dynamic binding is not used." verbose="Virtual function &apos;_update_language_info&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 511. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="87" column="15" info="_update_language_info is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="511" column="2" info="Calling _update_language_info"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 586. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 586. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="99" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="328" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="494" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="324" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="239" column="2" info="Calling _path_changed"/>
            <location file="editor/shader_create_dialog.cpp" line="586" column="81" info="Calling _language_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 609. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 609. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="99" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="328" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="494" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="268" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="609" column="70" info="Calling _built_in_toggled"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 619. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 619. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="99" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="328" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="494" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="324" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="619" column="76" info="Calling _path_changed"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 631. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;ShaderCreateDialog()&apos; at line 631. Dynamic binding is not used." file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.h" line="99" column="15" info="ok_pressed is a virtual function"/>
            <location file="editor/shader_create_dialog.cpp" line="328" column="2" info="Calling ok_pressed"/>
            <location file="editor/shader_create_dialog.cpp" line="494" column="65" info="Calling _path_submitted"/>
            <location file="editor/shader_create_dialog.cpp" line="324" column="2" info="Calling _update_dialog"/>
            <location file="editor/shader_create_dialog.cpp" line="292" column="2" info="Calling _path_changed"/>
            <location file="editor/shader_create_dialog.cpp" line="631" column="79" info="Calling _file_selected"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;data&apos; is assigned a value that is never used." verbose="Variable &apos;data&apos; is assigned a value that is never used." cwe="563" file0="editor/shader_create_dialog.cpp">
            <location file="editor/shader_create_dialog.cpp" line="395" column="22"/>
            <symbol>data</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="1265" column="6" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="1287" column="16" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="1397" column="16" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2001" column="6" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2315" column="51" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2322" column="7" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2395" column="18" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2505" column="32" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!project_manager&apos; is always true" verbose="Condition &apos;!project_manager&apos; is always true" cwe="571" file0="main/main.cpp">
            <location file="main/main.cpp" line="2554" column="7" info="Condition &apos;!project_manager&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;project_manager&apos; is always false" verbose="Condition &apos;project_manager&apos; is always false" cwe="570" file0="main/main.cpp">
            <location file="main/main.cpp" line="2780" column="18" info="Condition &apos;project_manager&apos; is always false"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: ret.interpolation_fraction" verbose="Uninitialized struct member: ret.interpolation_fraction" cwe="457" file0="main/main_timer_sync.cpp">
            <location file="main/main_timer_sync.cpp" line="155" column="9"/>
            <symbol>ret.interpolation_fraction</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ret.interpolation_fraction" verbose="Uninitialized variable: ret.interpolation_fraction" cwe="457" file0="main/main_timer_sync.cpp">
            <location file="main/main_timer_sync.cpp" line="155" column="9"/>
            <location file="main/main_timer_sync.cpp" line="94" column="55" info="Assuming condition is false"/>
            <symbol>ret</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_callable&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_callable&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="main/performance.cpp">
            <location file="main/performance.cpp" line="269" column="2"/>
            <symbol>_callable</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_arguments&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_arguments&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="main/performance.cpp">
            <location file="main/performance.cpp" line="270" column="2"/>
            <symbol>_arguments</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/csg/csg.cpp">
            <location file="modules/csg/csg.cpp" line="552" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;num_job_threads&gt;0&apos; is always false" verbose="Condition &apos;num_job_threads&gt;0&apos; is always false" cwe="570" file0="modules/cvtt/image_compress_cvtt.cpp">
            <location file="modules/cvtt/image_compress_cvtt.cpp" line="232" column="24" info="Condition &apos;num_job_threads&gt;0&apos; is always false"/>
            <location file="modules/cvtt/image_compress_cvtt.cpp" line="205" column="24" info="Assignment &apos;num_job_threads=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &apos;num_job_threads &gt; 0&apos; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="modules/cvtt/image_compress_cvtt.cpp">
            <location file="modules/cvtt/image_compress_cvtt.cpp" line="246" column="22"/>
            <location file="modules/cvtt/image_compress_cvtt.cpp" line="205" column="24" info="&apos;num_job_threads&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%i in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="modules/dds/texture_loader_dds.cpp">
            <location file="modules/dds/texture_loader_dds.cpp" line="206" column="3"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ENetPacketPeer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ENetPacketPeer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_packet_peer.h" line="124" column="2"/>
            <symbol>ENetPacketPeer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Compressor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Compressor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.h" line="95" column="3"/>
            <symbol>Compressor</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.h" line="100" column="14"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="127" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="134" column="50"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="146" column="50"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/enet/enet_connection.cpp">
            <location file="modules/enet/enet_connection.cpp" line="147" column="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bind_ip&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bind_ip&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="662" column="2"/>
            <symbol>bind_ip</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;set_refuse_new_connections&apos; is called from destructor &apos;~ENetMultiplayerPeer()&apos; at line 667. Dynamic binding is not used." verbose="Virtual function &apos;set_refuse_new_connections&apos; is called from destructor &apos;~ENetMultiplayerPeer()&apos; at line 667. Dynamic binding is not used." file0="modules/enet/enet_multiplayer_peer.cpp">
            <location file="modules/enet/enet_multiplayer_peer.h" line="107" column="15" info="set_refuse_new_connections is a virtual function"/>
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="410" column="2" info="Calling set_refuse_new_connections"/>
            <location file="modules/enet/enet_multiplayer_peer.cpp" line="667" column="3" info="Calling close_connection"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDScriptNativeClass&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDScriptNativeClass&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_highlighter.cpp">
            <location file="modules/gdscript/gdscript.h" line="57" column="2"/>
            <symbol>GDScriptNativeClass</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Token&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Token&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/editor/gdscript_highlighter.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.h" line="178" column="3"/>
            <symbol>Token</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;comment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;comment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/editor/gdscript_highlighter.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.h" line="192" column="4"/>
            <symbol>comment</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;enum_value&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;enum_value&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="623" column="5"/>
            <symbol>enum_value</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="983" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="996" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1009" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="1022" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="60" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="65" column="4"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="60" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="597" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="601" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="605" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="609" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="613" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="617" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Member&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="621" column="4"/>
            <symbol>Member</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDScriptAnalyzer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDScriptAnalyzer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_analyzer.h" line="131" column="2"/>
            <symbol>GDScriptAnalyzer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Address&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Address&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_codegen.h" line="58" column="3"/>
            <symbol>Address</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;type&apos; shadows outer variable" verbose="Local variable &apos;type&apos; shadows outer variable" cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="575" column="16" info="Shadow variable"/>
            <location file="modules/gdscript/gdscript_parser.h" line="505" column="9" info="Shadowed declaration"/>
            <symbol>type</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;type&apos; shadows outer variable" verbose="Local variable &apos;type&apos; shadows outer variable" cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_parser.h" line="582" column="16" info="Shadow variable"/>
            <location file="modules/gdscript/gdscript_parser.h" line="505" column="9" info="Shadowed declaration"/>
            <symbol>type</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;script&apos; shadows outer variable" verbose="Local variable &apos;script&apos; shadows outer variable" cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript_compiler.h" line="84" column="18" info="Shadow variable"/>
            <location file="modules/gdscript/gdscript_compiler.h" line="47" column="13" info="Shadowed declaration"/>
            <symbol>script</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_sc&apos; can be declared with const" verbose="Parameter &apos;p_sc&apos; can be declared with const" cwe="398" file0="modules/gdscript/gdscript.cpp">
            <location file="modules/gdscript/gdscript.cpp" line="805" column="50" info="Parameter &apos;p_sc&apos; can be declared with const"/>
            <symbol>p_sc</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_base&apos; can be declared with const" verbose="Parameter &apos;p_base&apos; can be declared with const" cwe="398" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="2681" column="124" info="Parameter &apos;p_base&apos; can be declared with const"/>
            <symbol>p_base</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;found&apos; is assigned a value that is never used." verbose="Variable &apos;found&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="512" column="11"/>
            <symbol>found</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;return_type.type_source&apos; is assigned a value that is never used." verbose="Variable &apos;return_type.type_source&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_analyzer.cpp">
            <location file="modules/gdscript/gdscript_analyzer.cpp" line="1236" column="27"/>
            <symbol>return_type.type_source</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;StackSlot&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;StackSlot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/gdscript_byte_codegen.cpp">
            <location file="modules/gdscript/gdscript_byte_codegen.h" line="45" column="3"/>
            <symbol>StackSlot</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!is_validated&apos; is always true" verbose="Condition &apos;!is_validated&apos; is always true" cwe="571" file0="modules/gdscript/gdscript_byte_codegen.cpp">
            <location file="modules/gdscript/gdscript_byte_codegen.cpp" line="1086" column="6" info="Condition &apos;!is_validated&apos; is always true"/>
            <location file="modules/gdscript/gdscript_byte_codegen.cpp" line="1082" column="22" info="Assignment &apos;is_validated=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;field_type.has_container_element_type()&apos; is always true" verbose="Condition &apos;field_type.has_container_element_type()&apos; is always true" cwe="571" file0="modules/gdscript/gdscript_compiler.cpp">
            <location file="modules/gdscript/gdscript_compiler.cpp" line="2034" column="47" info="Condition &apos;field_type.has_container_element_type()&apos; is always true"/>
            <location file="modules/gdscript/gdscript_compiler.cpp" line="2033" column="120" info="Assuming that condition &apos;field_type.has_container_element_type()&apos; is not redundant"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: nc" verbose="Possible null pointer dereference: nc" cwe="476" file0="modules/gdscript/gdscript_compiler.cpp">
            <location file="modules/gdscript/gdscript_compiler.cpp" line="65" column="31" info="Null pointer dereference"/>
            <location file="modules/gdscript/gdscript_compiler.cpp" line="56" column="9" info="Assuming condition is false"/>
            <location file="modules/gdscript/gdscript_compiler.cpp" line="55" column="28" info="Assignment &apos;nc=nullptr&apos;, assigned value is 0"/>
            <symbol>nc</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_owner&apos; can be declared with const" verbose="Parameter &apos;p_owner&apos; can be declared with const" cwe="398" file0="modules/gdscript/gdscript_compiler.cpp">
            <location file="modules/gdscript/gdscript_compiler.cpp" line="83" column="112" info="Parameter &apos;p_owner&apos; can be declared with const"/>
            <symbol>p_owner</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;result.has_type&apos; is assigned a value that is never used." verbose="Variable &apos;result.has_type&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_compiler.cpp">
            <location file="modules/gdscript/gdscript_compiler.cpp" line="132" column="24"/>
            <symbol>result.has_type</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!type_hints&apos; is always true" verbose="Condition &apos;!type_hints&apos; is always true" cwe="571" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="71" column="6" info="Condition &apos;!type_hints&apos; is always true"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="67" column="20" info="Assignment &apos;type_hints=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;th&apos; is always false" verbose="Condition &apos;th&apos; is always false" cwe="570" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="462" column="8" info="Condition &apos;th&apos; is always false"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="452" column="12" info="Assignment &apos;th=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;th&apos; is always false" verbose="Condition &apos;th&apos; is always false" cwe="570" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="470" column="22" info="Condition &apos;th&apos; is always false"/>
            <location file="modules/gdscript/gdscript_editor.cpp" line="452" column="12" info="Assignment &apos;th=false&apos;, assigned value is 0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c2.current_line&apos; is assigned a value that is never used." verbose="Variable &apos;c2.current_line&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="1507" column="25"/>
            <symbol>c2.current_line</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c.base&apos; is assigned a value that is never used." verbose="Variable &apos;c.base&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="2748" column="11"/>
            <symbol>c.base</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c.current_class&apos; is assigned a value that is never used." verbose="Variable &apos;c.current_class&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_editor.cpp">
            <location file="modules/gdscript/gdscript_editor.cpp" line="2750" column="21"/>
            <symbol>c.current_class</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_function.cpp">
            <location file="modules/gdscript/gdscript_function.cpp" line="142" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;script&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;script&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="90" column="2"/>
            <symbol>script</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;captures&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;captures&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="92" column="2"/>
            <symbol>captures</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;reference&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;reference&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="159" column="2"/>
            <symbol>reference</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;captures&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;captures&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_lambda_callable.cpp">
            <location file="modules/gdscript/gdscript_lambda_callable.cpp" line="170" column="2"/>
            <symbol>captures</symbol>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="1276" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="1273" column="6" info="outer condition: !check(GDScriptTokenizer::Token::PARENTHESIS_CLOSE)"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::BRACKET_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::BRACKET_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2555" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::BRACKET_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="2553" column="6" info="outer condition: !check(GDScriptTokenizer::Token::BRACKET_CLOSE)"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;!check(GDScriptTokenizer::Token::BRACE_CLOSE)&apos; and inner condition is &apos;check(GDScriptTokenizer::Token::BRACE_CLOSE)&apos;)." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2580" column="13" info="opposite inner condition: check(GDScriptTokenizer::Token::BRACE_CLOSE)"/>
            <location file="modules/gdscript/gdscript_parser.cpp" line="2578" column="6" info="outer condition: !check(GDScriptTokenizer::Token::BRACE_CLOSE)"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;decided_style&apos; can be reduced." verbose="The scope of the variable &apos;decided_style&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/gdscript_parser.cpp">
            <location file="modules/gdscript/gdscript_parser.cpp" line="2577" column="7"/>
            <symbol>decided_style</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;method&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;method&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/gdscript_rpc_callable.cpp">
            <location file="modules/gdscript/gdscript_rpc_callable.cpp" line="72" column="2"/>
            <symbol>method</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;has_error&apos; is assigned a value that is never used." verbose="Variable &apos;has_error&apos; is assigned a value that is never used." cwe="563" file0="modules/gdscript/gdscript_tokenizer.cpp">
            <location file="modules/gdscript/gdscript_tokenizer.cpp" line="721" column="13"/>
            <symbol>has_error</symbol>
        </error>
        <error id="zerodivcond" severity="warning" msg="Either the condition &apos;incr&lt;0&apos; is redundant or there is division by zero at line 216." verbose="Either the condition &apos;incr&lt;0&apos; is redundant or there is division by zero at line 216." cwe="369" file0="modules/gdscript/gdscript_utility_functions.cpp">
            <location file="modules/gdscript/gdscript_utility_functions.cpp" line="216" column="31" info="Division by zero"/>
            <location file="modules/gdscript/gdscript_utility_functions.cpp" line="206" column="28" info="Assuming that condition &apos;incr&lt;0&apos; is not redundant"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="517" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="561" column="34"/>
            <symbol>alloca</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;script&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;script&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="568" column="10" info="script is overwritten"/>
            <location file="modules/gdscript/gdscript_vm.cpp" line="494" column="10" info="script is assigned"/>
            <symbol>script</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="modules/gdscript/gdscript_vm.cpp">
            <location file="modules/gdscript/gdscript_vm.cpp" line="462" column="2"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;kind&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;kind&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/lsp.hpp" line="817" column="3"/>
            <symbol>kind</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;value&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;value&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/lsp.hpp" line="821" column="3"/>
            <symbol>value</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;kind&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;kind&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/lsp.hpp" line="822" column="3"/>
            <symbol>kind</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MarkupContent&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MarkupContent&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/gdscript/language_server/gdscript_extend_parser.cpp">
            <location file="modules/gdscript/language_server/lsp.hpp" line="820" column="2"/>
            <symbol>MarkupContent</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sent&apos; can be reduced." verbose="The scope of the variable &apos;sent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/language_server/gdscript_language_protocol.cpp">
            <location file="modules/gdscript/language_server/gdscript_language_protocol.cpp" line="105" column="6"/>
            <symbol>sent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;file_checker&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;file_checker&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/gdscript/language_server/gdscript_text_document.cpp">
            <location file="modules/gdscript/language_server/gdscript_text_document.cpp" line="416" column="2"/>
            <symbol>file_checker</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;forced&apos; can be reduced." verbose="The scope of the variable &apos;forced&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/gdscript/language_server/gdscript_workspace.cpp">
            <location file="modules/gdscript/language_server/gdscript_workspace.cpp" line="577" column="7"/>
            <symbol>forced</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="98" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="99" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;na&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;na&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="100" column="4"/>
            <symbol>na</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;nb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;nb&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="101" column="4"/>
            <symbol>nb</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="131" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="132" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;indices&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;indices&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/lightmapper_rd/lightmapper_rd.cpp">
            <location file="modules/lightmapper_rd/lightmapper_rd.h" line="133" column="4"/>
            <symbol>indices</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;stop&apos; is called from destructor &apos;~DTLSServerMbedTLS()&apos; at line 75. Dynamic binding is not used." verbose="Virtual function &apos;stop&apos; is called from destructor &apos;~DTLSServerMbedTLS()&apos; at line 75. Dynamic binding is not used." file0="modules/mbedtls/dtls_server_mbedtls.cpp">
            <location file="modules/mbedtls/dtls_server_mbedtls.h" line="50" column="15" info="stop is a virtual function"/>
            <location file="modules/mbedtls/dtls_server_mbedtls.cpp" line="75" column="2" info="Calling stop"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerMbedDTLS::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerMbedDTLS::packet_buffer&apos; is not initialized in the constructor." cwe="398" file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="247" column="21"/>
            <symbol>PacketPeerMbedDTLS::packet_buffer</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_peer&apos; is called from destructor &apos;~PacketPeerMbedDTLS()&apos; at line 252. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_peer&apos; is called from destructor &apos;~PacketPeerMbedDTLS()&apos; at line 252. Dynamic binding is not used." file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.h" line="71" column="15" info="disconnect_from_peer is a virtual function"/>
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="252" column="2" info="Calling disconnect_from_peer"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563" file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="133" column="11"/>
            <symbol>ret</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563" file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="161" column="11"/>
            <symbol>ret</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563" file0="modules/mbedtls/packet_peer_mbed_dtls.cpp">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="178" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="modules/mbedtls/register_types.cpp">
            <location file="modules/mbedtls/tests/test_crypto_mbedtls.h" line="42" column="1"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_stream&apos; is called from destructor &apos;~StreamPeerMbedTLS()&apos; at line 280. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_stream&apos; is called from destructor &apos;~StreamPeerMbedTLS()&apos; at line 280. Dynamic binding is not used." file0="modules/mbedtls/stream_peer_mbedtls.cpp">
            <location file="modules/mbedtls/stream_peer_mbedtls.h" line="61" column="15" info="disconnect_from_stream is a virtual function"/>
            <location file="modules/mbedtls/stream_peer_mbedtls.cpp" line="280" column="2" info="Calling disconnect_from_stream"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 526. Dynamic binding is not used." verbose="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 526. Dynamic binding is not used." file0="modules/mobile_vr/mobile_vr_interface.cpp">
            <location file="modules/mobile_vr/mobile_vr_interface.h" line="141" column="15" info="is_initialized is a virtual function"/>
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="526" column="6" info="Calling is_initialized"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 527. Dynamic binding is not used." verbose="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~MobileVRInterface()&apos; at line 527. Dynamic binding is not used." file0="modules/mobile_vr/mobile_vr_interface.cpp">
            <location file="modules/mobile_vr/mobile_vr_interface.h" line="143" column="15" info="uninitialize is a virtual function"/>
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="527" column="3" info="Calling uninitialize"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;namespace_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;namespace_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gd/gd_mono_assembly.h" line="62" column="4"/>
            <symbol>namespace_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;class_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;class_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gd/gd_mono_assembly.h" line="63" column="4"/>
            <symbol>class_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_signal_callback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_signal_callback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.cpp" line="3676" column="2"/>
            <symbol>_signal_callback</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MonoGCHandleRef&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MonoGCHandleRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gc_handle.h" line="101" column="2"/>
            <symbol>MonoGCHandleRef</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ScopeExit&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ScopeExit&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/utils/macros.h" line="56" column="2"/>
            <symbol>ScopeExit</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScopeDomain&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScopeDomain&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gd/gd_mono.h" line="256" column="2"/>
            <symbol>ScopeDomain</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScopeExitDomainUnload&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScopeExitDomainUnload&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gd/gd_mono.h" line="276" column="2"/>
            <symbol>ScopeExitDomainUnload</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CSharpInstance&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CSharpInstance&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.h" line="325" column="2"/>
            <symbol>CSharpInstance</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ManagedCallable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ManagedCallable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/managed_callable.h" line="73" column="2"/>
            <symbol>ManagedCallable</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;extra_cond&apos; is always true" verbose="Condition &apos;extra_cond&apos; is always true" cwe="571" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/csharp_script.cpp" line="3099" column="6" info="Condition &apos;extra_cond&apos; is always true"/>
            <location file="modules/mono/csharp_script.cpp" line="3093" column="20" info="Assignment &apos;extra_cond=true&apos;, assigned value is 1"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ConstantInterface::const_doc&apos; is not initialized in the constructor." verbose="Member variable &apos;ConstantInterface::const_doc&apos; is not initialized in the constructor." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="53" column="3"/>
            <symbol>ConstantInterface::const_doc</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="54" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;proxy_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;proxy_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="55" column="4"/>
            <symbol>proxy_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cname&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cname&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="71" column="4"/>
            <symbol>cname</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="513" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;im_type_out&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;im_type_out&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="514" column="4"/>
            <symbol>im_type_out</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;im_sig&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;im_sig&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="515" column="4"/>
            <symbol>im_sig</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unique_sig&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unique_sig&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="516" column="4"/>
            <symbol>unique_sig</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="521" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;im_type_out&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;im_type_out&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="522" column="4"/>
            <symbol>im_type_out</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;im_sig&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;im_sig&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="523" column="4"/>
            <symbol>im_sig</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unique_sig&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unique_sig&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="524" column="4"/>
            <symbol>unique_sig</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;EnumInterface&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;EnumInterface&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="70" column="3"/>
            <symbol>EnumInterface</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;TypeReference&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;TypeReference&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/editor/bindings_generator.h" line="92" column="3"/>
            <symbol>TypeReference</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between double * and float * which have an incompatible binary data representation." verbose="Casting between double * and float * which have an incompatible binary data representation." cwe="704" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gd/gd_mono_wasm_m2n.h" line="177" column="11"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;func&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;func&apos;. The initialized value is overwritten before it is read." cwe="563" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gd/gd_mono_wasm_m2n.h" line="196" column="8" info="func is overwritten"/>
            <location file="modules/mono/mono_gd/gd_mono_wasm_m2n.h" line="196" column="8" info="func is initialized"/>
            <symbol>func</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;func&apos; is assigned a value that is never used." verbose="Variable &apos;func&apos; is assigned a value that is never used." cwe="563" file0="modules/mono/csharp_script.cpp">
            <location file="modules/mono/mono_gd/gd_mono_wasm_m2n.h" line="196" column="8"/>
            <symbol>func</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_ptr&apos; can be declared with const" verbose="Parameter &apos;p_ptr&apos; can be declared with const" cwe="398" file0="modules/mono/glue/string_name_glue.cpp">
            <location file="modules/mono/glue/string_name_glue.cpp" line="51" column="57" info="Parameter &apos;p_ptr&apos; can be declared with const"/>
            <symbol>p_ptr</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;domain_assemblies&apos; can be declared with const" verbose="Variable &apos;domain_assemblies&apos; can be declared with const" cwe="398" file0="modules/mono/mono_gd/gd_mono.cpp">
            <location file="modules/mono/mono_gd/gd_mono.cpp" line="1168" column="37" info="Variable &apos;domain_assemblies&apos; can be declared with const"/>
            <symbol>domain_assemblies</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;domain_assemblies&apos; can be declared with const" verbose="Variable &apos;domain_assemblies&apos; can be declared with const" cwe="398" file0="modules/mono/mono_gd/gd_mono.cpp">
            <location file="modules/mono/mono_gd/gd_mono.cpp" line="1190" column="37" info="Variable &apos;domain_assemblies&apos; can be declared with const"/>
            <symbol>domain_assemblies</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;domain_assemblies&apos; can be declared with const" verbose="Variable &apos;domain_assemblies&apos; can be declared with const" cwe="398" file0="modules/mono/mono_gd/gd_mono.cpp">
            <location file="modules/mono/mono_gd/gd_mono.cpp" line="1204" column="37" info="Variable &apos;domain_assemblies&apos; can be declared with const"/>
            <symbol>domain_assemblies</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;GDMono::add_mono_shared_libs_dir_to_path&apos;" verbose="Unused private function: &apos;GDMono::add_mono_shared_libs_dir_to_path&apos;" cwe="398" file0="modules/mono/mono_gd/gd_mono.cpp">
            <location file="modules/mono/mono_gd/gd_mono.h" line="159" column="7"/>
            <symbol>GDMono::add_mono_shared_libs_dir_to_path</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;GDMono::determine_mono_dirs&apos;" verbose="Unused private function: &apos;GDMono::determine_mono_dirs&apos;" cwe="398" file0="modules/mono/mono_gd/gd_mono.cpp">
            <location file="modules/mono/mono_gd/gd_mono.h" line="160" column="7"/>
            <symbol>GDMono::determine_mono_dirs</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;namespace_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;namespace_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/mono_gd/gd_mono_class.cpp">
            <location file="modules/mono/mono_gd/gd_mono_class.cpp" line="512" column="2"/>
            <symbol>namespace_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;class_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;class_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/mono/mono_gd/gd_mono_class.cpp">
            <location file="modules/mono/mono_gd/gd_mono_class.cpp" line="513" column="2"/>
            <symbol>class_name</symbol>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561" file0="modules/mono/mono_gd/gd_mono_internals.cpp">
            <location file="modules/mono/mono_gd/gd_mono_internals.cpp" line="125" column="3"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/mono/mono_gd/gd_mono_marshal.cpp">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1624" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/mono/mono_gd/gd_mono_marshal.cpp">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1646" column="13"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/mono/mono_gd/gd_mono_marshal.cpp">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1664" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/mono/mono_gd/gd_mono_marshal.cpp">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1686" column="13"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/mono/mono_gd/gd_mono_marshal.cpp">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1704" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/mono/mono_gd/gd_mono_marshal.cpp">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1726" column="13"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/mono/mono_gd/gd_mono_method.cpp">
            <location file="modules/mono/mono_gd/gd_mono_method.cpp" line="114" column="28"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/mono/mono_gd/gd_mono_method.cpp">
            <location file="modules/mono/mono_gd/gd_mono_method.cpp" line="115" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="modules/mono/mono_gd/gd_mono_property.cpp">
            <location file="modules/mono/mono_gd/gd_mono_property.cpp" line="153" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" file0="modules/mono/mono_gd/support/android_support.cpp">
            <location file="modules/mono/mono_gd/support/android_support.cpp" line="146" column="37"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;NavigationPoly&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;NavigationPoly&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/navigation/godot_navigation_server.cpp">
            <location file="modules/navigation/nav_utils.h" line="127" column="2"/>
            <symbol>NavigationPoly</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;free_command&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;free_command&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/navigation/godot_navigation_server.cpp">
            <location file="modules/navigation/godot_navigation_server.cpp" line="485" column="1"/>
            <symbol>free_command</symbol>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="522" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="573" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="575" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="586" column="2"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="588" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_vertex_count&apos; can be reduced." verbose="The scope of the variable &apos;current_vertex_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/navigation/navigation_mesh_generator.cpp">
            <location file="modules/navigation/navigation_mesh_generator.cpp" line="72" column="6"/>
            <symbol>current_vertex_count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;noise&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;noise&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/noise/noise_texture.cpp">
            <location file="modules/noise/noise_texture.cpp" line="37" column="2"/>
            <symbol>noise</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;use_thread&apos; is always false" verbose="Condition &apos;use_thread&apos; is always false" cwe="570" file0="modules/noise/noise_texture.cpp">
            <location file="modules/noise/noise_texture.cpp" line="203" column="6" info="Condition &apos;use_thread&apos; is always false"/>
            <location file="modules/noise/noise_texture.cpp" line="201" column="15" info="Assignment &apos;use_thread=false&apos;, assigned value is 0"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;use_thread&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;use_thread&apos; is reassigned a value before the old one has been used." cwe="563" file0="modules/noise/noise_texture.cpp">
            <location file="modules/noise/noise_texture.cpp" line="201" column="13" info="use_thread is overwritten"/>
            <location file="modules/noise/noise_texture.cpp" line="197" column="14" info="use_thread is assigned"/>
            <symbol>use_thread</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;action&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;action&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_action_editor.cpp">
            <location file="modules/openxr/editor/openxr_action_editor.cpp" line="77" column="2"/>
            <symbol>action</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRActionEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRActionEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/editor/openxr_action_editor.cpp">
            <location file="modules/openxr/editor/openxr_action_editor.h" line="64" column="2"/>
            <symbol>OpenXRActionEditor</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRSelectActionDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRSelectActionDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/editor/openxr_action_map_editor.cpp">
            <location file="modules/openxr/editor/openxr_select_action_dialog.h" line="64" column="2"/>
            <symbol>OpenXRSelectActionDialog</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;action_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;action_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_action_set_editor.cpp">
            <location file="modules/openxr/editor/openxr_action_set_editor.cpp" line="155" column="2"/>
            <symbol>action_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;action_set&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;action_set&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_action_set_editor.cpp">
            <location file="modules/openxr/editor/openxr_action_set_editor.cpp" line="156" column="2"/>
            <symbol>action_set</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;action_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;action_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_interaction_profile_editor.cpp">
            <location file="modules/openxr/editor/openxr_interaction_profile_editor.cpp" line="107" column="2"/>
            <symbol>action_map</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;interaction_profile&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;interaction_profile&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_interaction_profile_editor.cpp">
            <location file="modules/openxr/editor/openxr_interaction_profile_editor.cpp" line="108" column="2"/>
            <symbol>interaction_profile</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_interaction_profile&apos; is called from constructor &apos;OpenXRInteractionProfileEditor(Ref&lt;OpenXRActionMap&gt;p_action_map,Ref&lt;OpenXRInteractionProfile&gt;p_interaction_profile)&apos; at line 273. Dynamic binding is not used." verbose="Virtual function &apos;_update_interaction_profile&apos; is called from constructor &apos;OpenXRInteractionProfileEditor(Ref&lt;OpenXRActionMap&gt;p_action_map,Ref&lt;OpenXRInteractionProfile&gt;p_interaction_profile)&apos; at line 273. Dynamic binding is not used." file0="modules/openxr/editor/openxr_interaction_profile_editor.cpp">
            <location file="modules/openxr/editor/openxr_interaction_profile_editor.h" line="78" column="15" info="_update_interaction_profile is a virtual function"/>
            <location file="modules/openxr/editor/openxr_interaction_profile_editor.cpp" line="273" column="2" info="Calling _update_interaction_profile"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/openxr/editor/openxr_interaction_profile_editor.cpp">
            <location file="modules/openxr/editor/openxr_interaction_profile_editor.cpp" line="204" column="48"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;action_map&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;action_map&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/openxr/editor/openxr_select_action_dialog.cpp">
            <location file="modules/openxr/editor/openxr_select_action_dialog.cpp" line="124" column="2"/>
            <symbol>action_map</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRExtensionWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRExtensionWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/extensions/openxr_android_extension.cpp">
            <location file="modules/openxr/extensions/openxr_extension_wrapper.h" line="90" column="2"/>
            <symbol>OpenXRExtensionWrapper</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRAndroidExtension&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRAndroidExtension&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/extensions/openxr_android_extension.cpp">
            <location file="modules/openxr/extensions/openxr_android_extension.h" line="40" column="2"/>
            <symbol>OpenXRAndroidExtension</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OpenXRVulkanExtension&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OpenXRVulkanExtension&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/openxr/extensions/openxr_vulkan_extension.cpp">
            <location file="modules/openxr/extensions/openxr_vulkan_extension.h" line="52" column="2"/>
            <symbol>OpenXRVulkanExtension</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/openxr/extensions/openxr_vulkan_extension.cpp">
            <location file="modules/openxr/extensions/openxr_vulkan_extension.cpp" line="439" column="32"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (view_pose_valid!=pose_valid) view_pose_valid=pose_valid&apos; is logically equivalent to &apos;view_pose_valid=pose_valid&apos;." verbose="The statement &apos;if (view_pose_valid!=pose_valid) view_pose_valid=pose_valid&apos; is logically equivalent to &apos;view_pose_valid=pose_valid&apos;." cwe="398" file0="modules/openxr/openxr_api.cpp">
            <location file="modules/openxr/openxr_api.cpp" line="1447" column="22" info="Condition &apos;view_pose_valid!=pose_valid&apos; is redundant"/>
            <location file="modules/openxr/openxr_api.cpp" line="1448" column="19" info="Assignment &apos;view_pose_valid=pose_valid&apos;"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~OpenXRInterface()&apos; at line 763. Dynamic binding is not used." verbose="Virtual function &apos;is_initialized&apos; is called from destructor &apos;~OpenXRInterface()&apos; at line 763. Dynamic binding is not used." file0="modules/openxr/openxr_interface.cpp">
            <location file="modules/openxr/openxr_interface.h" line="110" column="15" info="is_initialized is a virtual function"/>
            <location file="modules/openxr/openxr_interface.cpp" line="763" column="6" info="Calling is_initialized"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~OpenXRInterface()&apos; at line 764. Dynamic binding is not used." verbose="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~OpenXRInterface()&apos; at line 764. Dynamic binding is not used." file0="modules/openxr/openxr_interface.cpp">
            <location file="modules/openxr/openxr_interface.h" line="112" column="15" info="uninitialize is a virtual function"/>
            <location file="modules/openxr/openxr_interface.cpp" line="764" column="3" info="Calling uninitialize"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;embree_device&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;embree_device&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/raycast/lightmap_raycaster.cpp">
            <location file="modules/raycast/lightmap_raycaster.cpp" line="181" column="2"/>
            <symbol>embree_device</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="modules/raycast/lightmap_raycaster.cpp">
            <location file="modules/raycast/lightmap_raycaster.cpp" line="54" column="35"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/regex/regex.cpp">
            <location file="modules/regex/regex.h" line="97" column="2"/>
            <symbol>RegEx</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::header_size&apos; is never used." verbose="struct member &apos;ICU_data_header::header_size&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="36" column="11"/>
            <symbol>ICU_data_header::header_size</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::magic_1&apos; is never used." verbose="struct member &apos;ICU_data_header::magic_1&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="37" column="10"/>
            <symbol>ICU_data_header::magic_1</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::magic_2&apos; is never used." verbose="struct member &apos;ICU_data_header::magic_2&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="37" column="19"/>
            <symbol>ICU_data_header::magic_2</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::padding&apos; is never used." verbose="struct member &apos;ICU_data_header::padding&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="39" column="7"/>
            <symbol>ICU_data_header::padding</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::count&apos; is never used." verbose="struct member &apos;ICU_data_header::count&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="40" column="11"/>
            <symbol>ICU_data_header::count</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::reserved&apos; is never used." verbose="struct member &apos;ICU_data_header::reserved&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="40" column="18"/>
            <symbol>ICU_data_header::reserved</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ICU_data_header::fake_name_and_data&apos; is never used." verbose="struct member &apos;ICU_data_header::fake_name_and_data&apos; is never used." cwe="563" file0="modules/text_server_adv/icu_data/icudata_stub.cpp">
            <location file="modules/text_server_adv/icu_data/icudata_stub.cpp" line="41" column="6"/>
            <symbol>ICU_data_header::fake_name_and_data</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="51" column="9"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="52" column="9"/>
            <symbol>count</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;tga_header.image_width&apos; is less than zero." verbose="The unsigned expression &apos;tga_header.image_width&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="276" column="29" info="Unsigned less than zero"/>
            <symbol>tga_header.image_width</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;tga_header.image_height&apos; is less than zero." verbose="The unsigned expression &apos;tga_header.image_height&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="276" column="61" info="Unsigned less than zero"/>
            <symbol>tga_header.image_height</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used." cwe="563" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="51" column="11"/>
            <symbol>c</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;count&apos; is assigned a value that is never used." verbose="Variable &apos;count&apos; is assigned a value that is never used." cwe="563" file0="modules/tga/image_loader_tga.cpp">
            <location file="modules/tga/image_loader_tga.cpp" line="52" column="15"/>
            <symbol>count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;texture&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;texture&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/theora/video_stream_theora.cpp">
            <location file="modules/theora/video_stream_theora.cpp" line="644" column="2"/>
            <symbol>texture</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_loader_tinyexr.cpp">
            <location file="modules/tinyexr/image_loader_tinyexr.cpp" line="174" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_saver_tinyexr.cpp">
            <location file="modules/tinyexr/image_saver_tinyexr.cpp" line="207" column="27"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="modules/tinyexr/image_saver_tinyexr.cpp">
            <location file="modules/tinyexr/image_saver_tinyexr.cpp" line="208" column="21"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VisualScriptBuiltinFunc&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VisualScriptBuiltinFunc&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/visual_script/visual_script_builtin_funcs.cpp">
            <location file="modules/visual_script/visual_script_builtin_funcs.h" line="145" column="2"/>
            <symbol>VisualScriptBuiltinFunc</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/visual_script/visual_script_flow_control.cpp">
            <location file="modules/visual_script/visual_script_flow_control.h" line="190" column="12"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/visual_script/visual_script_flow_control.cpp">
            <location file="modules/visual_script/visual_script_flow_control.cpp" line="151" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;base_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;base_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/visual_script/visual_script_flow_control.cpp">
            <location file="modules/visual_script/visual_script_flow_control.cpp" line="867" column="2"/>
            <symbol>base_type</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="modules/vorbis/audio_stream_ogg_vorbis.cpp">
            <location file="modules/vorbis/audio_stream_ogg_vorbis.cpp" line="365" column="9" info="Second condition"/>
            <location file="modules/vorbis/audio_stream_ogg_vorbis.cpp" line="361" column="9" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="modules/vorbis/audio_stream_ogg_vorbis.cpp">
            <location file="modules/vorbis/audio_stream_ogg_vorbis.cpp" line="348" column="6"/>
            <symbol>err</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCDataChannelJS()&apos; at line 212. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCDataChannelJS()&apos; at line 212. Dynamic binding is not used." file0="modules/webrtc/webrtc_data_channel_js.cpp">
            <location file="modules/webrtc/webrtc_data_channel_js.h" line="78" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_data_channel_js.cpp" line="212" column="2" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;WebRTCDataChannelJS&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;WebRTCDataChannelJS&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="modules/webrtc/webrtc_data_channel_js.cpp">
            <location file="modules/webrtc/webrtc_data_channel_js.h" line="88" column="2"/>
            <symbol>WebRTCDataChannelJS</symbol>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="188" column="51" info="Integer overflow"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." verbose="Signed integer overflow for expression &apos;1&lt;&lt;31&apos;." cwe="190" file0="modules/webrtc/webrtc_multiplayer_peer.cpp">
            <location file="modules/webrtc/webrtc_multiplayer_peer.cpp" line="264" column="51" info="Integer overflow"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;initialize&apos; is called from constructor &apos;WebRTCPeerConnectionJS()&apos; at line 129. Dynamic binding is not used." verbose="Virtual function &apos;initialize&apos; is called from constructor &apos;WebRTCPeerConnectionJS()&apos; at line 129. Dynamic binding is not used." file0="modules/webrtc/webrtc_peer_connection_js.cpp">
            <location file="modules/webrtc/webrtc_peer_connection_js.h" line="68" column="16" info="initialize is a virtual function"/>
            <location file="modules/webrtc/webrtc_peer_connection_js.cpp" line="129" column="2" info="Calling initialize"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCPeerConnectionJS()&apos; at line 133. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WebRTCPeerConnectionJS()&apos; at line 133. Dynamic binding is not used." file0="modules/webrtc/webrtc_peer_connection_js.cpp">
            <location file="modules/webrtc/webrtc_peer_connection_js.h" line="75" column="15" info="close is a virtual function"/>
            <location file="modules/webrtc/webrtc_peer_connection_js.cpp" line="133" column="2" info="Calling close"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;server&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;server&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/websocket/editor/editor_debugger_server_websocket.cpp">
            <location file="modules/websocket/editor/editor_debugger_server_websocket.cpp" line="119" column="2"/>
            <symbol>server</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;stop&apos; is called from destructor &apos;~EditorDebuggerServerWebSocket()&apos; at line 127. Dynamic binding is not used." verbose="Virtual function &apos;stop&apos; is called from destructor &apos;~EditorDebuggerServerWebSocket()&apos; at line 127. Dynamic binding is not used." file0="modules/websocket/editor/editor_debugger_server_websocket.cpp">
            <location file="modules/websocket/editor/editor_debugger_server_websocket.h" line="56" column="15" info="stop is a virtual function"/>
            <location file="modules/websocket/editor/editor_debugger_server_websocket.cpp" line="127" column="2" info="Calling stop"/>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;WSLClient&apos; defines member variable with name &apos;_peer&apos; also defined in its parent class &apos;WebSocketClient&apos;." verbose="The class &apos;WSLClient&apos; defines member variable with name &apos;_peer&apos; also defined in its parent class &apos;WebSocketClient&apos;." cwe="398" file0="modules/websocket/editor/editor_debugger_server_websocket.cpp">
            <location file="modules/websocket/wsl_client.h" line="52" column="15" info="Derived variable &apos;WSLClient::_peer&apos;"/>
            <location file="modules/websocket/websocket_client.h" line="44" column="21" info="Parent variable &apos;WebSocketClient::_peer&apos;"/>
            <symbol>WSLClient</symbol>
            <symbol>_peer</symbol>
            <symbol>WebSocketClient</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_host&apos; is called from destructor &apos;~EMWSClient()&apos; at line 152. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_host&apos; is called from destructor &apos;~EMWSClient()&apos; at line 152. Dynamic binding is not used." file0="modules/websocket/emws_client.cpp">
            <location file="modules/websocket/emws_client.h" line="59" column="7" info="disconnect_from_host is a virtual function"/>
            <location file="modules/websocket/emws_client.cpp" line="152" column="2" info="Calling disconnect_from_host"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from constructor &apos;EMWSPeer()&apos; at line 125. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from constructor &apos;EMWSPeer()&apos; at line 125. Dynamic binding is not used." file0="modules/websocket/emws_peer.cpp">
            <location file="modules/websocket/emws_peer.h" line="77" column="15" info="close is a virtual function"/>
            <location file="modules/websocket/emws_peer.cpp" line="125" column="2" info="Calling close"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~EMWSPeer()&apos; at line 129. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~EMWSPeer()&apos; at line 129. Dynamic binding is not used." file0="modules/websocket/emws_peer.cpp">
            <location file="modules/websocket/emws_peer.h" line="77" column="15" info="close is a virtual function"/>
            <location file="modules/websocket/emws_peer.cpp" line="129" column="2" info="Calling close"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ws_client&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ws_client&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/websocket/remote_debugger_peer_websocket.cpp">
            <location file="modules/websocket/remote_debugger_peer_websocket.cpp" line="117" column="2"/>
            <symbol>ws_client</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;ws_client&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;ws_client&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/websocket/remote_debugger_peer_websocket.cpp">
            <location file="modules/websocket/remote_debugger_peer_websocket.cpp" line="115" column="2"/>
            <symbol>ws_client</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bind_ip&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bind_ip&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/websocket/websocket_server.cpp">
            <location file="modules/websocket/websocket_server.cpp" line="37" column="2"/>
            <symbol>bind_ip</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_host&apos; is called from constructor &apos;WSLClient()&apos; at line 398. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_host&apos; is called from constructor &apos;WSLClient()&apos; at line 398. Dynamic binding is not used." file0="modules/websocket/wsl_client.cpp">
            <location file="modules/websocket/wsl_client.h" line="79" column="7" info="disconnect_from_host is a virtual function"/>
            <location file="modules/websocket/wsl_client.cpp" line="398" column="2" info="Calling disconnect_from_host"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;disconnect_from_host&apos; is called from destructor &apos;~WSLClient()&apos; at line 404. Dynamic binding is not used." verbose="Virtual function &apos;disconnect_from_host&apos; is called from destructor &apos;~WSLClient()&apos; at line 404. Dynamic binding is not used." file0="modules/websocket/wsl_client.cpp">
            <location file="modules/websocket/wsl_client.h" line="79" column="7" info="disconnect_from_host is a virtual function"/>
            <location file="modules/websocket/wsl_client.cpp" line="404" column="2" info="Calling disconnect_from_host"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~WSLPeer()&apos; at line 345. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~WSLPeer()&apos; at line 345. Dynamic binding is not used." file0="modules/websocket/wsl_peer.cpp">
            <location file="modules/websocket/wsl_peer.h" line="95" column="15" info="close is a virtual function"/>
            <location file="modules/websocket/wsl_peer.cpp" line="345" column="2" info="Calling close"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;stop&apos; is called from destructor &apos;~WSLServer()&apos; at line 326. Dynamic binding is not used." verbose="Virtual function &apos;stop&apos; is called from destructor &apos;~WSLServer()&apos; at line 326. Dynamic binding is not used." file0="modules/websocket/wsl_server.cpp">
            <location file="modules/websocket/wsl_server.h" line="82" column="7" info="stop is a virtual function"/>
            <location file="modules/websocket/wsl_server.cpp" line="326" column="2" info="Calling stop"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;WebXRInterfaceJS::controllers_state&apos; is not initialized in the constructor." verbose="Member variable &apos;WebXRInterfaceJS::controllers_state&apos; is not initialized in the constructor." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="508" column="19"/>
            <symbol>WebXRInterfaceJS::controllers_state</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;session_mode&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;session_mode&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="510" column="2"/>
            <symbol>session_mode</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;requested_reference_space_types&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;requested_reference_space_types&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="511" column="2"/>
            <symbol>requested_reference_space_types</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~WebXRInterfaceJS()&apos; at line 517. Dynamic binding is not used." verbose="Virtual function &apos;uninitialize&apos; is called from destructor &apos;~WebXRInterfaceJS()&apos; at line 517. Dynamic binding is not used." file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.h" line="84" column="15" info="uninitialize is a virtual function"/>
            <location file="modules/webxr/webxr_interface_js.cpp" line="517" column="3" info="Calling uninitialize"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (controllers_state[i]!=controller_connected) controllers_state[i]=controller_connected&apos; is logically equivalent to &apos;controllers_state[i]=controller_connected&apos;." verbose="The statement &apos;if (controllers_state[i]!=controller_connected) controllers_state[i]=controller_connected&apos; is logically equivalent to &apos;controllers_state[i]=controller_connected&apos;." cwe="398" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="501" column="28" info="Condition &apos;controllers_state[i]!=controller_connected&apos; is redundant"/>
            <location file="modules/webxr/webxr_interface_js.cpp" line="503" column="25" info="Assignment &apos;controllers_state[i]=controller_connected&apos;"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p_controller_id&lt;2&apos; is always true" verbose="Condition &apos;p_controller_id&lt;2&apos; is always true" cwe="571" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="441" column="24" info="Condition &apos;p_controller_id&lt;2&apos; is always true"/>
            <location file="modules/webxr/webxr_interface_js.cpp" line="431" column="45" info="Assuming that condition &apos;p_controller_id&gt;1&apos; is not redundant"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="196" column="25"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="471" column="21"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="modules/webxr/webxr_interface_js.cpp">
            <location file="modules/webxr/webxr_interface_js.cpp" line="485" column="21"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="modules/xatlas_unwrap/register_types.cpp">
            <location file="modules/xatlas_unwrap/register_types.cpp" line="98" column="11"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/api/api.cpp">
            <location file="platform/android/api/jni_singleton.h" line="83" column="18"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/api/api.cpp">
            <location file="platform/android/api/jni_singleton.h" line="220" column="3"/>
            <symbol>instance</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;res&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;res&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/audio_driver_opensl.cpp">
            <location file="platform/android/audio_driver_opensl.cpp" line="193" column="6" info="res is overwritten"/>
            <location file="platform/android/audio_driver_opensl.cpp" line="190" column="7" info="res is assigned"/>
            <symbol>res</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessJAndroid()&apos; at line 240. Dynamic binding is not used." verbose="Virtual function &apos;list_dir_end&apos; is called from destructor &apos;~DirAccessJAndroid()&apos; at line 240. Dynamic binding is not used." file0="platform/android/dir_access_jandroid.cpp">
            <location file="platform/android/dir_access_jandroid.h" line="61" column="15" info="list_dir_end is a virtual function"/>
            <location file="platform/android/dir_access_jandroid.cpp" line="240" column="2" info="Calling list_dir_end"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rendering_driver&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rendering_driver&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="489" column="2"/>
            <symbol>rendering_driver</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rendering_driver&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rendering_driver&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="492" column="2"/>
            <symbol>rendering_driver</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotJavaViewWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotJavaViewWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/java_godot_view_wrapper.h" line="51" column="2"/>
            <symbol>GodotJavaViewWrapper</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rendering_driver&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rendering_driver&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="492" column="19" info="rendering_driver is overwritten"/>
            <location file="platform/android/display_server_android.cpp" line="489" column="19" info="rendering_driver is assigned"/>
            <symbol>rendering_driver</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: context_vulkan" verbose="Possible null pointer dereference: context_vulkan" cwe="476" file0="platform/android/display_server_android.cpp">
            <location file="platform/android/display_server_android.cpp" line="532" column="7" info="Null pointer dereference"/>
            <location file="platform/android/display_server_android.cpp" line="527" column="21" info="Assignment &apos;context_vulkan=nullptr&apos;, assigned value is 0"/>
            <symbol>context_vulkan</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="1905" column="6" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="1888" column="7" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="1983" column="6" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="1953" column="9" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="platform/android/export/export_plugin.cpp">
            <location file="platform/android/export/export_plugin.cpp" line="2930" column="7" info="err is overwritten"/>
            <location file="platform/android/export/export_plugin.cpp" line="2924" column="6" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_class_wrapper.cpp">
            <location file="platform/android/java_class_wrapper.cpp" line="157" column="20"/>
            <symbol>alloca</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;valid&apos; shadows outer variable" verbose="Local variable &apos;valid&apos; shadows outer variable" cwe="398" file0="platform/android/java_class_wrapper.cpp">
            <location file="platform/android/java_class_wrapper.cpp" line="1064" column="9" info="Shadow variable"/>
            <location file="platform/android/java_class_wrapper.cpp" line="1013" column="8" info="Shadowed declaration"/>
            <symbol>valid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;godot_io_instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;godot_io_instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_io_wrapper.cpp">
            <location file="platform/android/java_godot_io_wrapper.cpp" line="43" column="2"/>
            <symbol>godot_io_instance</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="447" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="448" column="31"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="479" column="29"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="480" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;obj&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;obj&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/jni_utils.h" line="42" column="14"/>
            <symbol>obj</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;obj&apos; shadows outer variable" verbose="Local variable &apos;obj&apos; shadows outer variable" cwe="398" file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="450" column="11" info="Shadow variable"/>
            <location file="platform/android/java_godot_lib_jni.cpp" line="438" column="10" info="Shadowed declaration"/>
            <symbol>obj</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;obj&apos; shadows outer variable" verbose="Local variable &apos;obj&apos; shadows outer variable" cwe="398" file0="platform/android/java_godot_lib_jni.cpp">
            <location file="platform/android/java_godot_lib_jni.cpp" line="483" column="11" info="Shadow variable"/>
            <location file="platform/android/java_godot_lib_jni.cpp" line="469" column="10" info="Shadowed declaration"/>
            <symbol>obj</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;godot_instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;godot_instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/android/java_godot_wrapper.cpp">
            <location file="platform/android/java_godot_wrapper.cpp" line="41" column="2"/>
            <symbol>godot_instance</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;v&apos; shadows outer variable" verbose="Local variable &apos;v&apos; shadows outer variable" cwe="398" file0="platform/android/jni_utils.cpp">
            <location file="platform/android/jni_utils.cpp" line="126" column="13" info="Shadow variable"/>
            <location file="platform/android/jni_utils.cpp" line="34" column="10" info="Shadowed declaration"/>
            <symbol>v</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketAndroid()&apos; at line 75. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~NetSocketAndroid()&apos; at line 75. Dynamic binding is not used." file0="platform/android/net_socket_android.cpp">
            <location file="platform/android/net_socket_android.h" line="67" column="15" info="close is a virtual function"/>
            <location file="platform/android/net_socket_android.cpp" line="75" column="2" info="Calling close"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/plugin/godot_plugin_jni.cpp">
            <location file="platform/android/plugin/godot_plugin_jni.cpp" line="118" column="39"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="platform/android/plugin/godot_plugin_jni.cpp">
            <location file="platform/android/plugin/godot_plugin_jni.cpp" line="119" column="43"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/iphone/export/export.cpp">
            <location file="platform/iphone/export/export_plugin.h" line="90" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="platform/javascript/audio_driver_javascript.cpp">
            <location file="platform/javascript/audio_driver_javascript.cpp" line="52" column="27"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;p_cursor.is_valid()&apos; and inner condition is &apos;texture.is_valid()&apos;)." cwe="398" file0="platform/javascript/display_server_javascript.cpp">
            <location file="platform/javascript/display_server_javascript.cpp" line="382" column="23" info="identical inner condition: texture.is_valid()"/>
            <location file="platform/javascript/display_server_javascript.cpp" line="375" column="23" info="outer condition: p_cursor.is_valid()"/>
            <location file="platform/javascript/display_server_javascript.cpp" line="376" column="28" info="&apos;texture&apos; is assigned value &apos;p_cursor&apos; here."/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/javascript/display_server_javascript.cpp">
            <location file="platform/javascript/display_server_javascript.cpp" line="337" column="32"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;close&apos; is called from destructor &apos;~HTTPClientJavaScript()&apos; at line 271. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~HTTPClientJavaScript()&apos; at line 271. Dynamic binding is not used." file0="platform/javascript/http_client_javascript.cpp">
            <location file="platform/javascript/http_client_javascript.h" line="92" column="7" info="close is a virtual function"/>
            <location file="platform/javascript/http_client_javascript.cpp" line="271" column="2" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JavaScriptObjectImpl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JavaScriptObjectImpl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/javascript/javascript_singleton.cpp">
            <location file="platform/javascript/javascript_singleton.cpp" line="86" column="2"/>
            <symbol>JavaScriptObjectImpl</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/javascript/javascript_singleton.cpp">
            <location file="platform/javascript/javascript_singleton.cpp" line="226" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/javascript/javascript_singleton.cpp">
            <location file="platform/javascript/javascript_singleton.cpp" line="248" column="36"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4754. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4754. Dynamic binding is not used." file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.h" line="330" column="17" info="screen_get_size is a virtual function"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4754" column="5" info="Calling screen_get_size"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4755. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4755. Dynamic binding is not used." file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.h" line="330" column="17" info="screen_get_size is a virtual function"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4755" column="5" info="Calling screen_get_size"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_get_mode&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4756. Dynamic binding is not used." verbose="Virtual function &apos;window_get_mode&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4756. Dynamic binding is not used." file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.h" line="387" column="21" info="window_get_mode is a virtual function"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="1546" column="27" info="Calling window_get_mode"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4482" column="3" info="Calling _update_size_hints"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4756" column="25" info="Calling _create_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4763. Dynamic binding is not used." verbose="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4763. Dynamic binding is not used." file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.h" line="391" column="15" info="window_set_flag is a virtual function"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4763" column="4" info="Calling window_set_flag"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4766. Dynamic binding is not used." verbose="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4766. Dynamic binding is not used." file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.h" line="344" column="15" info="show_window is a virtual function"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4766" column="2" info="Calling show_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4911. Dynamic binding is not used." verbose="Virtual function &apos;cursor_set_shape&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4911. Dynamic binding is not used." file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.h" line="408" column="15" info="cursor_set_shape is a virtual function"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4911" column="2" info="Calling cursor_set_shape"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4927. Dynamic binding is not used." verbose="Virtual function &apos;screen_set_keep_on&apos; is called from constructor &apos;DisplayServerX11(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 4927. Dynamic binding is not used." file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.h" line="337" column="15" info="screen_set_keep_on is a virtual function"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4927" column="2" info="Calling screen_set_keep_on"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;direct_touch&apos; is always false" verbose="Condition &apos;direct_touch&apos; is always false" cwe="570" file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.cpp" line="257" column="7" info="Condition &apos;direct_touch&apos; is always false"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="212" column="23" info="Assignment &apos;direct_touch=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;modifiers==nullptr&apos; is always true" verbose="Condition &apos;modifiers==nullptr&apos; is always true" cwe="571" file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4564" column="16" info="Condition &apos;modifiers==nullptr&apos; is always true"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4550" column="20" info="Assignment &apos;modifiers=nullptr&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!driver_found&apos; is always true" verbose="Condition &apos;!driver_found&apos; is always true" cwe="571" file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4748" column="6" info="Condition &apos;!driver_found&apos; is always true"/>
            <location file="platform/linuxbsd/display_server_x11.cpp" line="4669" column="22" info="Assignment &apos;driver_found=false&apos;, assigned value is 0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.cpp" line="845" column="4"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;wd&apos; can be declared with const" verbose="Variable &apos;wd&apos; can be declared with const" cwe="398" file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/display_server_x11.cpp" line="1827" column="14" info="Variable &apos;wd&apos; can be declared with const"/>
            <symbol>wd</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GLDisplay::x11_display&apos; is not initialized in the constructor." verbose="Member variable &apos;GLDisplay::x11_display&apos; is not initialized in the constructor." cwe="398" file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/gl_manager_x11.h" line="66" column="3"/>
            <symbol>GLDisplay::x11_display</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GLDisplay::x_valuemask&apos; is not initialized in the constructor." verbose="Member variable &apos;GLDisplay::x_valuemask&apos; is not initialized in the constructor." cwe="398" file0="platform/linuxbsd/display_server_x11.cpp">
            <location file="platform/linuxbsd/gl_manager_x11.h" line="66" column="3"/>
            <symbol>GLDisplay::x_valuemask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GLManager_X11::_x_windisp&apos; is not initialized in the constructor." verbose="Member variable &apos;GLManager_X11::_x_windisp&apos; is not initialized in the constructor." cwe="398" file0="platform/linuxbsd/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/gl_manager_x11.cpp" line="381" column="16"/>
            <symbol>GLManager_X11::_x_windisp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;visual_attribs&apos; can be reduced." verbose="The scope of the variable &apos;visual_attribs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/gl_manager_x11.cpp" line="103" column="13"/>
            <symbol>visual_attribs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;visual_attribs_layered&apos; can be reduced." verbose="The scope of the variable &apos;visual_attribs_layered&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/gl_manager_x11.cpp">
            <location file="platform/linuxbsd/gl_manager_x11.cpp" line="114" column="13"/>
            <symbol>visual_attribs_layered</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadLinux&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadLinux&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/linuxbsd/godot_linuxbsd.cpp">
            <location file="platform/linuxbsd/joypad_linux.h" line="44" column="2"/>
            <symbol>JoypadLinux</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="430" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dev&apos; can be reduced." verbose="The scope of the variable &apos;dev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="132" column="15"/>
            <symbol>dev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;joypad&apos; can be reduced." verbose="The scope of the variable &apos;joypad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/joypad_linux.cpp">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="236" column="11"/>
            <symbol>joypad</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;middle&apos; can be reduced." verbose="The scope of the variable &apos;middle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/key_mapping_x11.cpp">
            <location file="platform/linuxbsd/key_mapping_x11.cpp" line="1151" column="6"/>
            <symbol>middle</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;middle&apos; can be reduced." verbose="The scope of the variable &apos;middle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="platform/linuxbsd/key_mapping_x11.cpp">
            <location file="platform/linuxbsd/key_mapping_x11.cpp" line="1940" column="6"/>
            <symbol>middle</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_XTranslateUnicodePairReverse::unicode&apos; is never used." verbose="struct member &apos;_XTranslateUnicodePairReverse::unicode&apos; is never used." cwe="563" file0="platform/linuxbsd/key_mapping_x11.cpp">
            <location file="platform/linuxbsd/key_mapping_x11.cpp" line="1168" column="15"/>
            <symbol>_XTranslateUnicodePairReverse::unicode</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="platform/linuxbsd/tts_linux.cpp">
            <location file="platform/linuxbsd/tts_linux.cpp" line="39" column="19"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;file_pattern&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;file_pattern&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/osx/export/codesign.cpp">
            <location file="platform/osx/export/codesign.h" line="91" column="4"/>
            <symbol>file_pattern</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;key&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/osx/export/codesign.cpp">
            <location file="platform/osx/export/codesign.h" line="92" column="4"/>
            <symbol>key</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;blob&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;blob&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/osx/export/codesign.cpp">
            <location file="platform/osx/export/codesign.cpp" line="449" column="2"/>
            <symbol>blob</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PList&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PList&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/osx/export/codesign.cpp">
            <location file="platform/osx/export/plist.h" line="65" column="2"/>
            <symbol>PList</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignRequirements&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignRequirements&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/osx/export/codesign.cpp">
            <location file="platform/osx/export/codesign.h" line="161" column="2"/>
            <symbol>CodeSignRequirements</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignEntitlementsText&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignEntitlementsText&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/osx/export/codesign.cpp">
            <location file="platform/osx/export/codesign.h" line="185" column="2"/>
            <symbol>CodeSignEntitlementsText</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CodeSignEntitlementsBinary&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CodeSignEntitlementsBinary&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/osx/export/codesign.cpp">
            <location file="platform/osx/export/codesign.h" line="207" column="2"/>
            <symbol>CodeSignEntitlementsBinary</symbol>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" file0="platform/osx/export/export_plugin.cpp">
            <location file="platform/osx/export/export_plugin.cpp" line="1401" column="39"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" file0="platform/osx/export/export_plugin.cpp">
            <location file="platform/osx/export/export_plugin.cpp" line="1446" column="39"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/osx/export/plist.cpp">
            <location file="platform/osx/export/plist.cpp" line="337" column="2"/>
            <symbol>root</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadOSX&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadOSX&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/osx/joypad_osx.cpp">
            <location file="platform/osx/joypad_osx.h" line="120" column="2"/>
            <symbol>JoypadOSX</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &apos;READ_LE_4&apos;, Invalid ## usage when expanding &apos;READ_LE_4&apos;." verbose="failed to expand &apos;READ_LE_4&apos;, Invalid ## usage when expanding &apos;READ_LE_4&apos;.">
            <location file="platform/uwp/app_uwp.cpp" line="493" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offs&apos; is assigned a value that is never used." verbose="Variable &apos;offs&apos; is assigned a value that is never used." cwe="563" file0="platform/uwp/export/app_packager.cpp">
            <location file="platform/uwp/export/app_packager.cpp" line="156" column="7"/>
            <symbol>offs</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offs&apos; is assigned a value that is never used." verbose="Variable &apos;offs&apos; is assigned a value that is never used." cwe="563" file0="platform/uwp/export/app_packager.cpp">
            <location file="platform/uwp/export/app_packager.cpp" line="208" column="7"/>
            <symbol>offs</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: ^)" verbose="syntax error: ^)" file0="platform/uwp/joypad_uwp.cpp">
            <location file="platform/uwp/joypad_uwp.cpp" line="55" column="40"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="platform/uwp/os_uwp.cpp">
            <location file="platform/uwp/os_uwp.cpp" line="253" column="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;get_mod_info&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;get_mod_info&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/crash_handler_windows.cpp">
            <location file="platform/windows/crash_handler_windows.cpp" line="97" column="2"/>
            <symbol>get_mod_info</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;skip_first&apos; is always false" verbose="Condition &apos;skip_first&apos; is always false" cwe="570" file0="platform/windows/crash_handler_windows.cpp">
            <location file="platform/windows/crash_handler_windows.cpp" line="195" column="7" info="Condition &apos;skip_first&apos; is always false"/>
            <location file="platform/windows/crash_handler_windows.cpp" line="170" column="20" info="Assignment &apos;skip_first=false&apos;, assigned value is 0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;last_pad&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;last_pad&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="85" column="4"/>
            <symbol>last_pad</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hInstance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hInstance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.cpp" line="3595" column="2"/>
            <symbol>hInstance</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3717. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3717. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="484" column="17" info="screen_get_size is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="3717" column="5" info="Calling screen_get_size"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3718. Dynamic binding is not used." verbose="Virtual function &apos;screen_get_size&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3718. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="484" column="17" info="screen_get_size is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="3718" column="5" info="Calling screen_get_size"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;tablet_get_current_driver&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3720. Dynamic binding is not used." verbose="Virtual function &apos;tablet_get_current_driver&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3720. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="582" column="17" info="tablet_get_current_driver is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="3483" column="8" info="Calling tablet_get_current_driver"/>
            <location file="platform/windows/display_server_windows.cpp" line="3720" column="25" info="Calling _create_window"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3725. Dynamic binding is not used." verbose="Virtual function &apos;window_set_flag&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3725. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="549" column="15" info="window_set_flag is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="3725" column="4" info="Calling window_set_flag"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3729. Dynamic binding is not used." verbose="Virtual function &apos;show_window&apos; is called from constructor &apos;DisplayServerWindows(const String&amp;p_rendering_driver,WindowMode p_mode,VSyncMode p_vsync_mode,uint32_t p_flags,const Vector2i&amp;p_resolution,Error&amp;r_error)&apos; at line 3729. Dynamic binding is not used." file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/display_server_windows.h" line="499" column="15" info="show_window is a virtual function"/>
            <location file="platform/windows/display_server_windows.cpp" line="3729" column="2" info="Calling show_window"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/os_windows.h" line="184" column="2"/>
            <symbol>OS_Windows</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JoypadWindows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JoypadWindows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/joypad_windows.h" line="55" column="2"/>
            <symbol>JoypadWindows</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GLManager_Windows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GLManager_Windows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="platform/windows/display_server_windows.cpp">
            <location file="platform/windows/gl_manager_windows.h" line="116" column="2"/>
            <symbol>GLManager_Windows</symbol>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function freopen_s() is not used." verbose="Return value of function freopen_s() is not used." cwe="252" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.cpp" line="93" column="4"/>
            <symbol>freopen_s</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hInstance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hInstance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="platform/windows/os_windows.cpp">
            <location file="platform/windows/os_windows.cpp" line="1007" column="2"/>
            <symbol>hInstance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/collision_object_2d.cpp">
            <location file="scene/2d/collision_object_2d.cpp" line="624" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;joint&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;joint&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/joint_2d.cpp">
            <location file="scene/2d/joint_2d.cpp" line="235" column="2"/>
            <symbol>joint</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/2d/joint_2d.cpp">
            <location file="scene/2d/physics_body_2d.h" line="46" column="2"/>
            <symbol>PhysicsBody2D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_light&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_light&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_2d.cpp">
            <location file="scene/2d/light_2d.cpp" line="309" column="2"/>
            <symbol>canvas_light</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occ_polygon&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occ_polygon&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_occluder_2d.cpp">
            <location file="scene/2d/light_occluder_2d.cpp" line="147" column="2"/>
            <symbol>occ_polygon</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluder&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluder&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/light_occluder_2d.cpp">
            <location file="scene/2d/light_occluder_2d.cpp" line="287" column="2"/>
            <symbol>occluder</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_agent_2d.cpp">
            <location file="scene/2d/navigation_agent_2d.cpp" line="144" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/navigation_obstacle_2d.cpp">
            <location file="scene/2d/navigation_obstacle_2d.cpp" line="113" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="476" column="65"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="478" column="82"/>
            <symbol>alloca</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="476" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="scene/2d/physics_body_2d.cpp">
            <location file="scene/2d/physics_body_2d.cpp" line="478" column="47"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/polygon_2d.cpp">
            <location file="scene/2d/polygon_2d.cpp" line="661" column="2"/>
            <symbol>mesh</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;length&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;length&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="520" column="2"/>
            <symbol>length</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bone_angle&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bone_angle&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="521" column="2"/>
            <symbol>bone_angle</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;skeleton&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;skeleton&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/skeleton_2d.cpp">
            <location file="scene/2d/skeleton_2d.cpp" line="803" column="2"/>
            <symbol>skeleton</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;is_repeat&apos; is always false" verbose="Condition &apos;is_repeat&apos; is always false" cwe="570" file0="scene/2d/sprite_2d.cpp">
            <location file="scene/2d/sprite_2d.cpp" line="317" column="6" info="Condition &apos;is_repeat&apos; is always false"/>
            <location file="scene/2d/sprite_2d.cpp" line="315" column="19" info="Assignment &apos;is_repeat=false&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_mirrored_repeat&apos; can be reduced." verbose="The scope of the variable &apos;is_mirrored_repeat&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/sprite_2d.cpp">
            <location file="scene/2d/sprite_2d.cpp" line="316" column="7"/>
            <symbol>is_mirrored_repeat</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;coords&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;coords&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="98" column="3"/>
            <symbol>coords</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;debug_canvas_item&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;debug_canvas_item&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="99" column="3"/>
            <symbol>debug_canvas_item</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_items&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_items&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="100" column="3"/>
            <symbol>canvas_items</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluders&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluders&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="101" column="3"/>
            <symbol>occluders</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;bodies&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;bodies&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="102" column="3"/>
            <symbol>bodies</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;navigation_regions&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;navigation_regions&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.h" line="103" column="3"/>
            <symbol>navigation_regions</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;z1==z2&apos; is always true" verbose="Condition &apos;z1==z2&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1102" column="30" info="Condition &apos;z1==z2&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="1100" column="11" info="Assuming that condition &apos;z1&lt;z2&apos; is not redundant"/>
            <location file="scene/2d/tile_map.cpp" line="1102" column="18" info="Assuming that condition &apos;z1&gt;z2&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!in_editor&apos; is always true" verbose="Condition &apos;!in_editor&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1382" column="52" info="Condition &apos;!in_editor&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="1378" column="21" info="Assignment &apos;in_editor=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!in_editor&apos; is always true" verbose="Condition &apos;!in_editor&apos; is always true" cwe="571" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1419" column="28" info="Condition &apos;!in_editor&apos; is always true"/>
            <location file="scene/2d/tile_map.cpp" line="1415" column="21" info="Assignment &apos;in_editor=false&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1112" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1256" column="18"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1470" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1667" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1756" column="18"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1831" column="19"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="1889" column="18"/>
            <symbol>source</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;source&apos; can be reduced." verbose="The scope of the variable &apos;source&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/2d/tile_map.cpp">
            <location file="scene/2d/tile_map.cpp" line="2582" column="20"/>
            <symbol>source</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;unit_rect&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;unit_rect&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/touch_screen_button.cpp">
            <location file="scene/2d/touch_screen_button.cpp" line="405" column="2"/>
            <symbol>unit_rect</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rect&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rect&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/2d/visible_on_screen_notifier_2d.cpp">
            <location file="scene/2d/visible_on_screen_notifier_2d.cpp" line="111" column="2"/>
            <symbol>rect</symbol>
        </error>
        <error id="negativeIndex" severity="warning" msg="Either the condition &apos;channel_count&gt;=1&apos; is redundant or the array &apos;center_val[3]&apos; is accessed at index -1, which is out of bounds." verbose="Either the condition &apos;channel_count&gt;=1&apos; is redundant or the array &apos;center_val[3]&apos; is accessed at index -1, which is out of bounds." cwe="786" file0="scene/3d/audio_stream_player_3d.cpp">
            <location file="scene/3d/audio_stream_player_3d.cpp" line="156" column="37" info="Negative array index"/>
            <location file="scene/3d/audio_stream_player_3d.cpp" line="164" column="22" info="Assuming that condition &apos;channel_count&gt;=1&apos; is not redundant"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;camera&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;camera&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/camera_3d.cpp">
            <location file="scene/3d/camera_3d.cpp" line="685" column="2"/>
            <symbol>camera</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/collision_object_3d.cpp">
            <location file="scene/3d/collision_object_3d.cpp" line="668" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;decal&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;decal&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/decal.cpp">
            <location file="scene/3d/decal.cpp" line="248" column="2"/>
            <symbol>decal</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;volume&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;volume&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/fog_volume.cpp">
            <location file="scene/3d/fog_volume.cpp" line="115" column="2"/>
            <symbol>volume</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;collision&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;collision&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.cpp" line="54" column="2"/>
            <symbol>collision</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;collision&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;collision&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.cpp" line="774" column="2"/>
            <symbol>collision</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GPUParticlesCollision3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GPUParticlesCollision3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.h" line="47" column="2"/>
            <symbol>GPUParticlesCollision3D</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GPUParticlesAttractor3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GPUParticlesAttractor3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/gpu_particles_collision_3d.cpp">
            <location file="scene/3d/gpu_particles_collision_3d.h" line="256" column="2"/>
            <symbol>GPUParticlesAttractor3D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/light_3d.cpp">
            <location file="scene/3d/light_3d.cpp" line="333" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Light3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Light3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/3d/light_3d.cpp">
            <location file="scene/3d/light_3d.h" line="95" column="2"/>
            <symbol>Light3D</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tnear&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::tnear</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::time&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::tfar&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::tfar</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::mask&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::u&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::u&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::u</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::v&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::v&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::v</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::primID&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::primID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::instID&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="69" column="18"/>
            <symbol>Ray::instID</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::id&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::id&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="74" column="18"/>
            <symbol>Ray::id</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Ray::flags&apos; is not initialized in the constructor." cwe="398" file0="scene/3d/lightmapper.cpp">
            <location file="scene/3d/lightmapper.h" line="74" column="18"/>
            <symbol>Ray::flags</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_MSC_VER;_WIN32;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="scene/3d/lightmapper.h" line="65" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__aligned&apos; since the value of &apos;__aligned&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="scene/3d/lightmapper.h" line="65" column="0"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_agent_3d.cpp">
            <location file="scene/3d/navigation_agent_3d.cpp" line="150" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;agent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;agent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/navigation_obstacle_3d.cpp">
            <location file="scene/3d/navigation_obstacle_3d.cpp" line="119" column="2"/>
            <symbol>agent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;occluder&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;occluder&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/occluder_instance_3d.cpp">
            <location file="scene/3d/occluder_instance_3d.cpp" line="136" column="2"/>
            <symbol>occluder</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertices_strip_order&apos; can be declared with const" verbose="Variable &apos;vertices_strip_order&apos; can be declared with const" cwe="398" file0="scene/3d/ray_cast_3d.cpp">
            <location file="scene/3d/ray_cast_3d.cpp" line="377" column="7" info="Variable &apos;vertices_strip_order&apos; can be declared with const"/>
            <symbol>vertices_strip_order</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;probe&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;probe&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/reflection_probe.cpp">
            <location file="scene/3d/reflection_probe.cpp" line="255" column="2"/>
            <symbol>probe</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sub_chain_size&apos; can be reduced." verbose="The scope of the variable &apos;sub_chain_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/skeleton_ik_3d.cpp">
            <location file="scene/3d/skeleton_ik_3d.cpp" line="67" column="6"/>
            <symbol>sub_chain_size</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;spatial_attachment_path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;spatial_attachment_path&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/soft_dynamic_body_3d.cpp">
            <location file="scene/3d/soft_dynamic_body_3d.cpp" line="98" column="2"/>
            <symbol>spatial_attachment_path</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/soft_dynamic_body_3d.cpp">
            <location file="scene/3d/soft_dynamic_body_3d.cpp" line="100" column="2"/>
            <symbol>offset</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;point_index&apos; can be reduced." verbose="The scope of the variable &apos;point_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/3d/soft_dynamic_body_3d.cpp">
            <location file="scene/3d/soft_dynamic_body_3d.cpp" line="190" column="6"/>
            <symbol>point_index</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;rel_vel&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;rel_vel&apos;. The initialized value is overwritten before it is read." cwe="563" file0="scene/3d/vehicle_body_3d.cpp">
            <location file="scene/3d/vehicle_body_3d.cpp" line="578" column="10" info="rel_vel is overwritten"/>
            <location file="scene/3d/vehicle_body_3d.cpp" line="572" column="17" info="rel_vel is initialized"/>
            <symbol>rel_vel</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_screen_enter&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 95. Dynamic binding is not used." verbose="Virtual function &apos;_screen_enter&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 95. Dynamic binding is not used." file0="scene/3d/visible_on_screen_notifier_3d.cpp">
            <location file="scene/3d/visible_on_screen_notifier_3d.h" line="49" column="15" info="_screen_enter is a virtual function"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="42" column="2" info="Calling _screen_enter"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="95" column="113" info="Calling _visibility_enter"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_screen_exit&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 95. Dynamic binding is not used." verbose="Virtual function &apos;_screen_exit&apos; is called from constructor &apos;VisibleOnScreenNotifier3D()&apos; at line 95. Dynamic binding is not used." file0="scene/3d/visible_on_screen_notifier_3d.cpp">
            <location file="scene/3d/visible_on_screen_notifier_3d.h" line="50" column="15" info="_screen_exit is a virtual function"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="51" column="2" info="Calling _screen_exit"/>
            <location file="scene/3d/visible_on_screen_notifier_3d.cpp" line="95" column="179" info="Calling _visibility_exit"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;instance&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;instance&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/visual_instance_3d.cpp">
            <location file="scene/3d/visual_instance_3d.cpp" line="140" column="2"/>
            <symbol>instance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;probe&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;probe&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/voxel_gi.cpp">
            <location file="scene/3d/voxel_gi.cpp" line="240" column="2"/>
            <symbol>probe</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;voxel_gi&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;voxel_gi&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/3d/voxel_gi.cpp">
            <location file="scene/3d/voxel_gi.cpp" line="490" column="2"/>
            <symbol>voxel_gi</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="776" column="22"/>
            <symbol>alloca</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="777" column="11"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="scene/3d/voxelizer.cpp">
            <location file="scene/3d/voxelizer.cpp" line="778" column="13"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_unbind_tracker&apos; is called from destructor &apos;~XRNode3D()&apos; at line 409. Dynamic binding is not used." verbose="Virtual function &apos;_unbind_tracker&apos; is called from destructor &apos;~XRNode3D()&apos; at line 409. Dynamic binding is not used." file0="scene/3d/xr_nodes.cpp">
            <location file="scene/3d/xr_nodes.h" line="89" column="15" info="_unbind_tracker is a virtual function"/>
            <location file="scene/3d/xr_nodes.cpp" line="409" column="2" info="Calling _unbind_tracker"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: least_cost_transition" verbose="Possible null pointer dereference: least_cost_transition" cwe="476" file0="scene/animation/animation_node_state_machine.cpp">
            <location file="scene/animation/animation_node_state_machine.cpp" line="238" column="61" info="Null pointer dereference"/>
            <location file="scene/animation/animation_node_state_machine.cpp" line="228" column="51" info="Assuming condition is false"/>
            <location file="scene/animation/animation_node_state_machine.cpp" line="225" column="47" info="Assignment &apos;least_cost_transition=nullptr&apos;, assigned value is 0"/>
            <symbol>least_cost_transition</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="434" column="46"/>
            <symbol>alloca</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update&apos; is not initialized in the constructor." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2136" column="18"/>
            <symbol>AnimationPlayer::cache_update</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update_prop&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update_prop&apos; is not initialized in the constructor." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2136" column="18"/>
            <symbol>AnimationPlayer::cache_update_prop</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update_bezier&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update_bezier&apos; is not initialized in the constructor." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2136" column="18"/>
            <symbol>AnimationPlayer::cache_update_bezier</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/animation_player.cpp">
            <location file="scene/animation/animation_player.cpp" line="2137" column="2"/>
            <symbol>root</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="922" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;target&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;target&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="794" column="2"/>
            <symbol>target</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="876" column="2"/>
            <symbol>callback</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;callback&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;callback&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="960" column="2"/>
            <symbol>callback</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;initial_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;initial_val&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="961" column="2"/>
            <symbol>initial_val</symbol>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MethodTweener&apos; defines member variable with name &apos;tween&apos; also defined in its parent class &apos;Tweener&apos;." verbose="The class &apos;MethodTweener&apos; defines member variable with name &apos;tween&apos; also defined in its parent class &apos;Tweener&apos;." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="279" column="13" info="Derived variable &apos;MethodTweener::tween&apos;"/>
            <location file="scene/animation/tween.h" line="50" column="13" info="Parent variable &apos;Tweener::tween&apos;"/>
            <symbol>MethodTweener</symbol>
            <symbol>tween</symbol>
            <symbol>Tweener</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Tween&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Tween&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="175" column="2"/>
            <symbol>Tween</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;IntervalTweener&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;IntervalTweener&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="228" column="2"/>
            <symbol>IntervalTweener</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CallbackTweener&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CallbackTweener&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.h" line="244" column="2"/>
            <symbol>CallbackTweener</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;step_active&apos; is assigned a value that is never used." verbose="Variable &apos;step_active&apos; is assigned a value that is never used." cwe="563" file0="scene/animation/tween.cpp">
            <location file="scene/animation/tween.cpp" line="278" column="19"/>
            <symbol>step_active</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="116" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="117" column="4"/>
            <symbol>type_name</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="118" column="4"/>
            <symbol>id</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;live_edit_root&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;live_edit_root&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="167" column="3"/>
            <symbol>live_edit_root</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;id&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;id&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.cpp" line="369" column="2"/>
            <symbol>id</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneDebuggerObject&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneDebuggerObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="99" column="2"/>
            <symbol>SceneDebuggerObject</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneDebuggerTree&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneDebuggerTree&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/debugger/scene_debugger.cpp">
            <location file="scene/debugger/scene_debugger.h" line="128" column="2"/>
            <symbol>SceneDebuggerTree</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;preset_color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;preset_color&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="1492" column="2"/>
            <symbol>preset_color</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorPresetButton&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorPresetButton&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.h" line="59" column="2"/>
            <symbol>ColorPresetButton</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;display_old_color&apos; is always true" verbose="Condition &apos;display_old_color&apos; is always true" cwe="571" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="606" column="7" info="Condition &apos;display_old_color&apos; is always true"/>
            <location file="scene/gui/color_picker.cpp" line="600" column="6" info="Assuming that condition &apos;display_old_color&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rgb&apos; can be reduced." verbose="The scope of the variable &apos;rgb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="167" column="14"/>
            <symbol>rgb</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hsv&apos; can be reduced." verbose="The scope of the variable &apos;hsv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="scene/gui/color_picker.cpp">
            <location file="scene/gui/color_picker.cpp" line="168" column="14"/>
            <symbol>hsv</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;AcceptDialog()&apos; at line 356. Dynamic binding is not used." verbose="Virtual function &apos;ok_pressed&apos; is called from constructor &apos;AcceptDialog()&apos; at line 356. Dynamic binding is not used." file0="scene/gui/dialogs.cpp">
            <location file="scene/gui/dialogs.h" line="68" column="15" info="ok_pressed is a virtual function"/>
            <location file="scene/gui/dialogs.cpp" line="106" column="2" info="Calling ok_pressed"/>
            <location file="scene/gui/dialogs.cpp" line="356" column="58" info="Calling _ok_pressed"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text_rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text_rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/label.cpp">
            <location file="scene/gui/label.cpp" line="954" column="2"/>
            <symbol>text_rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text_rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text_rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/line_edit.cpp">
            <location file="scene/gui/line_edit.cpp" line="2498" column="2"/>
            <symbol>text_rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/scroll_bar.cpp">
            <location file="scene/gui/scroll_bar.cpp" line="629" column="2"/>
            <symbol>orientation</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;orientation&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;orientation&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/gui/slider.cpp">
            <location file="scene/gui/slider.cpp" line="286" column="2"/>
            <symbol>orientation</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_value_changed&apos; is called from constructor &apos;SpinBox()&apos; at line 326. Dynamic binding is not used." verbose="Virtual function &apos;_value_changed&apos; is called from constructor &apos;SpinBox()&apos; at line 326. Dynamic binding is not used." file0="scene/gui/spin_box.cpp">
            <location file="scene/gui/spin_box.h" line="50" column="15" info="_value_changed is a virtual function"/>
            <location file="scene/gui/spin_box.cpp" line="69" column="2" info="Calling _value_changed"/>
            <location file="scene/gui/spin_box.cpp" line="326" column="67" info="Calling _text_submitted"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_value_changed&apos; is called from constructor &apos;SpinBox()&apos; at line 327. Dynamic binding is not used." verbose="Virtual function &apos;_value_changed&apos; is called from constructor &apos;SpinBox()&apos; at line 327. Dynamic binding is not used." file0="scene/gui/spin_box.cpp">
            <location file="scene/gui/spin_box.h" line="50" column="15" info="_value_changed is a virtual function"/>
            <location file="scene/gui/spin_box.cpp" line="69" column="2" info="Calling _value_changed"/>
            <location file="scene/gui/spin_box.cpp" line="187" column="2" info="Calling _text_submitted"/>
            <location file="scene/gui/spin_box.cpp" line="327" column="65" info="Calling _line_edit_focus_exit"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;dragger_visibility!=DRAGGER_HIDDEN_COLLAPSED&apos; is always true" verbose="Condition &apos;dragger_visibility!=DRAGGER_HIDDEN_COLLAPSED&apos; is always true" cwe="571" file0="scene/gui/split_container.cpp">
            <location file="scene/gui/split_container.cpp" line="196" column="33" info="Condition &apos;dragger_visibility!=DRAGGER_HIDDEN_COLLAPSED&apos; is always true"/>
            <location file="scene/gui/split_container.cpp" line="192" column="27" info="Assuming that condition &apos;dragger_visibility!=DRAGGER_VISIBLE&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;vertical&apos; is always false" verbose="Condition &apos;vertical&apos; is always false" cwe="570" file0="scene/gui/split_container.cpp">
            <location file="scene/gui/split_container.cpp" line="268" column="44" info="Condition &apos;vertical&apos; is always false"/>
            <location file="scene/gui/split_container.cpp" line="267" column="7" info="Assuming that condition &apos;!vertical&apos; is not redundant"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;get_minimum_size&apos; is called from constructor &apos;TabBar()&apos; at line 1629. Dynamic binding is not used." verbose="Virtual function &apos;get_minimum_size&apos; is called from constructor &apos;TabBar()&apos; at line 1629. Dynamic binding is not used." file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.h" line="207" column="8" info="get_minimum_size is a virtual function"/>
            <location file="scene/gui/tab_bar.cpp" line="1629" column="35" info="Calling get_minimum_size"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;i==current&apos; is always false" verbose="Condition &apos;i==current&apos; is always false" cwe="570" file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.cpp" line="383" column="19" info="Condition &apos;i==current&apos; is always false"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.cpp" line="1125" column="76"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_bar.cpp">
            <location file="scene/gui/tab_bar.cpp" line="1151" column="77"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_container.cpp">
            <location file="scene/gui/tab_container.cpp" line="416" column="85"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;^&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a^b?c:d&apos;&apos; should be written as either &apos;&apos;(a^b)?c:d&apos;&apos; or &apos;&apos;a^(b?c:d)&apos;&apos;." cwe="783" file0="scene/gui/tab_container.cpp">
            <location file="scene/gui/tab_container.cpp" line="442" column="86"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/gui/tree.cpp">
            <location file="scene/gui/tree.h" line="139" column="2"/>
            <symbol>TreeItem</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/gui/view_panner.cpp">
            <location file="scene/gui/view_panner.cpp" line="131" column="45"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_item&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_item&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_item.cpp">
            <location file="scene/main/canvas_item.cpp" line="1153" column="2"/>
            <symbol>canvas_item</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas_texture&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas_texture&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_item.cpp">
            <location file="scene/main/canvas_item.cpp" line="1308" column="2"/>
            <symbol>canvas_texture</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/canvas_layer.cpp">
            <location file="scene/main/canvas_layer.cpp" line="345" column="2"/>
            <symbol>canvas</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;client&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;client&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/main/http_request.cpp">
            <location file="scene/main/http_request.cpp" line="636" column="2"/>
            <symbol>client</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;args&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;args&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/multiplayer/multiplayer_spawner.cpp">
            <location file="scene/multiplayer/multiplayer_spawner.h" line="58" column="4"/>
            <symbol>args</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneCacheInterface&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneCacheInterface&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/multiplayer/scene_cache_interface.cpp">
            <location file="scene/multiplayer/scene_cache_interface.h" line="79" column="2"/>
            <symbol>SceneCacheInterface</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used." cwe="563" file0="scene/multiplayer/scene_cache_interface.cpp">
            <location file="scene/multiplayer/scene_cache_interface.cpp" line="160" column="6"/>
            <symbol>ofs</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SceneReplicationInterface&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SceneReplicationInterface&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/multiplayer/scene_replication_interface.cpp">
            <location file="scene/multiplayer/scene_replication_interface.h" line="78" column="2"/>
            <symbol>SceneReplicationInterface</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used." cwe="563" file0="scene/multiplayer/scene_replication_interface.cpp">
            <location file="scene/multiplayer/scene_replication_interface.cpp" line="306" column="6"/>
            <symbol>ofs</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;info&apos; is assigned a value that is never used." verbose="Variable &apos;info&apos; is assigned a value that is never used." cwe="563" file0="scene/multiplayer/scene_replication_state.cpp">
            <location file="scene/multiplayer/scene_replication_state.cpp" line="247" column="17"/>
            <symbol>info</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!result&apos; is always false" verbose="Condition &apos;!result&apos; is always false" cwe="570" file0="scene/resources/animation.cpp">
            <location file="scene/resources/animation.cpp" line="2545" column="6" info="Condition &apos;!result&apos; is always false"/>
            <location file="scene/resources/animation.cpp" line="2411" column="16" info="Assignment &apos;result=true&apos;, assigned value is 1"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;BoxShape3D()&apos; at line 99. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;BoxShape3D()&apos; at line 99. Dynamic binding is not used." file0="scene/resources/box_shape_3d.cpp">
            <location file="scene/resources/box_shape_3d.h" line="47" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/box_shape_3d.cpp" line="82" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/box_shape_3d.cpp" line="99" column="2" info="Calling set_size"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;camera_effects&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;camera_effects&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/camera_effects.cpp">
            <location file="scene/resources/camera_effects.cpp" line="198" column="2"/>
            <symbol>camera_effects</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CapsuleShape3D()&apos; at line 124. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CapsuleShape3D()&apos; at line 124. Dynamic binding is not used." file0="scene/resources/capsule_shape_3d.cpp">
            <location file="scene/resources/capsule_shape_3d.h" line="44" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/capsule_shape_3d.cpp" line="124" column="2" info="Calling _update_shape"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/concave_polygon_shape_3d.cpp">
            <location file="scene/resources/concave_polygon_shape_3d.h" line="54" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/concave_polygon_shape_3d.cpp">
            <location file="scene/resources/concave_polygon_shape_3d.h" line="55" column="4"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;position&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;position&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="67" column="4"/>
            <symbol>position</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;left_tangent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;left_tangent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="68" column="4"/>
            <symbol>left_tangent</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;right_tangent&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;right_tangent&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="69" column="4"/>
            <symbol>right_tangent</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Point&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Point&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/resources/curve.cpp">
            <location file="scene/resources/curve.h" line="62" column="3"/>
            <symbol>Point</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CylinderShape3D()&apos; at line 109. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;CylinderShape3D()&apos; at line 109. Dynamic binding is not used." file0="scene/resources/cylinder_shape_3d.cpp">
            <location file="scene/resources/cylinder_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/cylinder_shape_3d.cpp" line="109" column="2" info="Calling _update_shape"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;clear_data&apos; is called from destructor &apos;~Font()&apos; at line 2474. Dynamic binding is not used." verbose="Virtual function &apos;clear_data&apos; is called from destructor &apos;~Font()&apos; at line 2474. Dynamic binding is not used." file0="scene/resources/font.cpp">
            <location file="scene/resources/font.h" line="286" column="15" info="clear_data is a virtual function"/>
            <location file="scene/resources/font.cpp" line="2474" column="2" info="Calling clear_data"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;HeightMapShape3D()&apos; at line 204. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;HeightMapShape3D()&apos; at line 204. Dynamic binding is not used." file0="scene/resources/height_map_shape_3d.cpp">
            <location file="scene/resources/height_map_shape_3d.h" line="47" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/height_map_shape_3d.cpp" line="204" column="2" info="Calling _update_shape"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;multimesh&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;multimesh&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/multimesh.cpp">
            <location file="scene/resources/multimesh.cpp" line="363" column="2"/>
            <symbol>multimesh</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="105" column="30"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="405" column="48"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;state&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;state&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/packed_scene.cpp">
            <location file="scene/resources/packed_scene.cpp" line="1737" column="2"/>
            <symbol>state</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;size&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/rectangle_shape_2d.cpp">
            <location file="scene/resources/rectangle_shape_2d.cpp" line="109" column="2"/>
            <symbol>size</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/scene_replication_config.cpp">
            <location file="scene/resources/scene_replication_config.h" line="56" column="4"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ReplicationProperty&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ReplicationProperty&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="scene/resources/scene_replication_config.cpp">
            <location file="scene/resources/scene_replication_config.h" line="55" column="3"/>
            <symbol>ReplicationProperty</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/segment_shape_2d.cpp">
            <location file="scene/resources/segment_shape_2d.cpp" line="97" column="2"/>
            <symbol>a</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SeparationRayShape3D()&apos; at line 90. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SeparationRayShape3D()&apos; at line 90. Dynamic binding is not used." file0="scene/resources/separation_ray_shape_3d.cpp">
            <location file="scene/resources/separation_ray_shape_3d.h" line="42" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/separation_ray_shape_3d.cpp" line="90" column="2" info="Calling _update_shape"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;shape&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;shape&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/shape_2d.cpp">
            <location file="scene/resources/shape_2d.cpp" line="122" column="2"/>
            <symbol>shape</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;jiggle_data_chain&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;jiggle_data_chain&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/skeleton_modification_2d_jiggle.cpp">
            <location file="scene/resources/skeleton_modification_2d_jiggle.cpp" line="559" column="2"/>
            <symbol>jiggle_data_chain</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;gravity&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;gravity&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/skeleton_modification_2d_jiggle.cpp">
            <location file="scene/resources/skeleton_modification_2d_jiggle.cpp" line="564" column="2"/>
            <symbol>gravity</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;physical_bone_chain&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;physical_bone_chain&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/skeleton_modification_2d_physicalbones.cpp">
            <location file="scene/resources/skeleton_modification_2d_physicalbones.cpp" line="291" column="2"/>
            <symbol>physical_bone_chain</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SphereShape3D()&apos; at line 86. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;SphereShape3D()&apos; at line 86. Dynamic binding is not used." file0="scene/resources/sphere_shape_3d.cpp">
            <location file="scene/resources/sphere_shape_3d.h" line="43" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/sphere_shape_3d.cpp" line="69" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/sphere_shape_3d.cpp" line="86" column="2" info="Calling set_radius"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/text_line.cpp">
            <location file="scene/resources/text_line.cpp" line="419" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/text_line.cpp">
            <location file="scene/resources/text_line.cpp" line="426" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;tad&apos; can be declared with const" verbose="Variable &apos;tad&apos; can be declared with const" cwe="398" file0="scene/resources/tile_set.cpp">
            <location file="scene/resources/tile_set.cpp" line="3974" column="24" info="Variable &apos;tad&apos; can be declared with const"/>
            <symbol>tad</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/world_2d.cpp">
            <location file="scene/resources/world_2d.cpp" line="71" column="2"/>
            <symbol>canvas</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;space&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;space&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/resources/world_3d.cpp">
            <location file="scene/resources/world_3d.cpp" line="140" column="2"/>
            <symbol>space</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shape&apos; is called from constructor &apos;WorldBoundaryShape3D()&apos; at line 88. Dynamic binding is not used." verbose="Virtual function &apos;_update_shape&apos; is called from constructor &apos;WorldBoundaryShape3D()&apos; at line 88. Dynamic binding is not used." file0="scene/resources/world_boundary_shape_3d.cpp">
            <location file="scene/resources/world_boundary_shape_3d.h" line="42" column="15" info="_update_shape is a virtual function"/>
            <location file="scene/resources/world_boundary_shape_3d.cpp" line="71" column="2" info="Calling _update_shape"/>
            <location file="scene/resources/world_boundary_shape_3d.cpp" line="88" column="2" info="Calling set_plane"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SceneStringNames::free&apos;" verbose="Unused private function: &apos;SceneStringNames::free&apos;" cwe="398" file0="scene/scene_string_names.cpp">
            <location file="scene/scene_string_names.h" line="44" column="14"/>
            <symbol>SceneStringNames::free</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_estimate_cost&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_estimate_cost&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="scene/scene_string_names.cpp">
            <location file="scene/scene_string_names.cpp" line="36" column="2"/>
            <symbol>_estimate_cost</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::buffer_frames&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::buffer_frames&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.h" line="70" column="2"/>
            <symbol>AudioDriverDummy::buffer_frames</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::mix_rate&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.h" line="70" column="2"/>
            <symbol>AudioDriverDummy::mix_rate</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.h" line="70" column="2"/>
            <symbol>AudioDriverDummy::channels</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::active&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.h" line="70" column="2"/>
            <symbol>AudioDriverDummy::active</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::thread_exited&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::thread_exited&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.h" line="70" column="2"/>
            <symbol>AudioDriverDummy::thread_exited</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::exit_thread&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::exit_thread&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/audio_driver_dummy.cpp">
            <location file="servers/audio/audio_driver_dummy.h" line="70" column="2"/>
            <symbol>AudioDriverDummy::exit_thread</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectAmplifyInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectAmplifyInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_amplify.cpp">
            <location file="servers/audio/effects/audio_effect_amplify.h" line="38" column="1"/>
            <symbol>AudioEffectAmplifyInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectChorusInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectChorusInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_chorus.cpp">
            <location file="servers/audio/effects/audio_effect_chorus.h" line="38" column="1"/>
            <symbol>AudioEffectChorusInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectCompressorInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectCompressorInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_compressor.cpp">
            <location file="servers/audio/effects/audio_effect_compressor.h" line="38" column="1"/>
            <symbol>AudioEffectCompressorInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectDelayInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectDelayInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_delay.cpp">
            <location file="servers/audio/effects/audio_effect_delay.h" line="38" column="1"/>
            <symbol>AudioEffectDelayInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectDistortionInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectDistortionInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_distortion.cpp">
            <location file="servers/audio/effects/audio_effect_distortion.h" line="38" column="1"/>
            <symbol>AudioEffectDistortionInstance</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mode&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mode&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/audio/effects/audio_effect_filter.cpp">
            <location file="servers/audio/effects/audio_effect_filter.cpp" line="168" column="2"/>
            <symbol>mode</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectLimiterInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectLimiterInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_limiter.cpp">
            <location file="servers/audio/effects/audio_effect_limiter.h" line="38" column="1"/>
            <symbol>AudioEffectLimiterInstance</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectPhaserInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectPhaserInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_phaser.cpp">
            <location file="servers/audio/effects/audio_effect_phaser.h" line="38" column="1"/>
            <symbol>AudioEffectPhaserInstance</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SMBPitchShift::gSynFreq&apos; is not initialized in the constructor." verbose="Member variable &apos;SMBPitchShift::gSynFreq&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.h" line="58" column="2"/>
            <symbol>SMBPitchShift::gSynFreq</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SMBPitchShift::gSynMagn&apos; is not initialized in the constructor." verbose="Member variable &apos;SMBPitchShift::gSynMagn&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.h" line="58" column="2"/>
            <symbol>SMBPitchShift::gSynMagn</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectPitchShiftInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectPitchShiftInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.h" line="73" column="1"/>
            <symbol>AudioEffectPitchShiftInstance</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wr&apos; can be reduced." verbose="The scope of the variable &apos;wr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="8"/>
            <symbol>wr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wi&apos; can be reduced." verbose="The scope of the variable &apos;wi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="12"/>
            <symbol>wi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg&apos; can be reduced." verbose="The scope of the variable &apos;arg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="241" column="16"/>
            <symbol>arg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ur&apos; can be reduced." verbose="The scope of the variable &apos;ur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="242" column="16"/>
            <symbol>ur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ui&apos; can be reduced." verbose="The scope of the variable &apos;ui&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="242" column="20"/>
            <symbol>ui</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;le2&apos; can be reduced." verbose="The scope of the variable &apos;le2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="243" column="23"/>
            <symbol>le2</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;indata&apos; can be declared with const" verbose="Parameter &apos;indata&apos; can be declared with const" cwe="398" file0="servers/audio/effects/audio_effect_pitch_shift.cpp">
            <location file="servers/audio/effects/audio_effect_pitch_shift.cpp" line="77" column="130" info="Parameter &apos;indata&apos; can be declared with const"/>
            <symbol>indata</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioEffectRecordInstance::is_recording&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioEffectRecordInstance::is_recording&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.h" line="73" column="2"/>
            <symbol>AudioEffectRecordInstance::is_recording</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioEffectRecordInstance::ring_buffer_pos&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioEffectRecordInstance::ring_buffer_pos&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.h" line="73" column="2"/>
            <symbol>AudioEffectRecordInstance::ring_buffer_pos</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioEffectRecordInstance::ring_buffer_mask&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioEffectRecordInstance::ring_buffer_mask&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.h" line="73" column="2"/>
            <symbol>AudioEffectRecordInstance::ring_buffer_mask</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioEffectRecordInstance::ring_buffer_read_pos&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioEffectRecordInstance::ring_buffer_read_pos&apos; is not initialized in the constructor." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.h" line="73" column="2"/>
            <symbol>AudioEffectRecordInstance::ring_buffer_read_pos</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/audio/effects/audio_effect_record.cpp">
            <location file="servers/audio/effects/audio_effect_record.cpp" line="304" column="2"/>
            <symbol>format</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;AudioEffectSpectrumAnalyzerInstance&apos; does not declare a constructor although it has private member variables which likely require initialization." verbose="The class &apos;AudioEffectSpectrumAnalyzerInstance&apos; does not declare a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.h" line="38" column="1"/>
            <symbol>AudioEffectSpectrumAnalyzerInstance</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wr&apos; can be reduced." verbose="The scope of the variable &apos;wr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="8"/>
            <symbol>wr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wi&apos; can be reduced." verbose="The scope of the variable &apos;wi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="12"/>
            <symbol>wi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg&apos; can be reduced." verbose="The scope of the variable &apos;arg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="47" column="16"/>
            <symbol>arg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ur&apos; can be reduced." verbose="The scope of the variable &apos;ur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="48" column="16"/>
            <symbol>ur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ui&apos; can be reduced." verbose="The scope of the variable &apos;ui&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="48" column="20"/>
            <symbol>ui</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;le2&apos; can be reduced." verbose="The scope of the variable &apos;le2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/audio/effects/audio_effect_spectrum_analyzer.cpp">
            <location file="servers/audio/effects/audio_effect_spectrum_analyzer.cpp" line="49" column="23"/>
            <symbol>le2</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;p_src&apos; can be declared with const" verbose="Parameter &apos;p_src&apos; can be declared with const" cwe="398" file0="servers/audio/effects/reverb.cpp">
            <location file="servers/audio/effects/reverb.cpp" line="57" column="29" info="Parameter &apos;p_src&apos; can be declared with const"/>
            <symbol>p_src</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CameraFeed&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CameraFeed&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/camera/camera_feed.cpp">
            <location file="servers/camera/camera_feed.h" line="97" column="2"/>
            <symbol>CameraFeed</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;length&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;length&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="215" column="62"/>
            <symbol>length</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="256" column="3"/>
            <symbol>a</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="257" column="3"/>
            <symbol>b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;n&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;n&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="258" column="3"/>
            <symbol>n</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_area_2d.cpp" line="36" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_area_2d.cpp" line="43" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotSeparationRayShape2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotSeparationRayShape2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.h" line="215" column="17"/>
            <symbol>GodotSeparationRayShape2D</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_2d/godot_area_2d.cpp">
            <location file="servers/physics_2d/godot_body_2d.h" line="117" column="18"/>
            <symbol>AreaCMP</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="363" column="3"/>
            <symbol>margin_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="364" column="3"/>
            <symbol>margin_B</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;motion_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;motion_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="369" column="3"/>
            <symbol>motion_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;motion_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;motion_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_collision_solver_2d_sat.cpp">
            <location file="servers/physics_2d/godot_collision_solver_2d_sat.cpp" line="370" column="3"/>
            <symbol>motion_B</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;anchor_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;anchor_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="217" column="2"/>
            <symbol>anchor_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;A_groove_1&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;A_groove_1&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="373" column="2"/>
            <symbol>A_groove_1</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;anchor_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;anchor_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_joints_2d.cpp">
            <location file="servers/physics_2d/godot_joints_2d.cpp" line="483" column="2"/>
            <symbol>anchor_A</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="servers/physics_2d/godot_shape_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.cpp" line="677" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called." verbose="The obsolete function &apos;alloca&apos; is called. In C++11 and later it is recommended to use std::array&lt;&gt; or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="servers/physics_2d/godot_shape_2d.cpp">
            <location file="servers/physics_2d/godot_shape_2d.cpp" line="909" column="32"/>
            <symbol>alloca</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;body_linear_velocity_sleep_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;body_linear_velocity_sleep_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="1208" column="2"/>
            <symbol>body_linear_velocity_sleep_threshold</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!did_collide&apos; is always true" verbose="Condition &apos;!did_collide&apos; is always true" cwe="571" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="668" column="10" info="Condition &apos;!did_collide&apos; is always true"/>
            <location file="servers/physics_2d/godot_space_2d.cpp" line="661" column="25" info="Assignment &apos;did_collide=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;did_collide&apos; is always false" verbose="Condition &apos;did_collide&apos; is always false" cwe="570" file0="servers/physics_2d/godot_space_2d.cpp">
            <location file="servers/physics_2d/godot_space_2d.cpp" line="679" column="10" info="Condition &apos;did_collide&apos; is always false"/>
            <location file="servers/physics_2d/godot_space_2d.cpp" line="661" column="25" info="Assignment &apos;did_collide=false&apos;, assigned value is 0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="203" column="3"/>
            <symbol>GJK::m_simplices</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="203" column="3"/>
            <symbol>GJK::m_free</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="593" column="4"/>
            <symbol>EPA::m_result</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="593" column="4"/>
            <symbol>EPA::m_fc_store</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;t&lt;=0&apos; is always true" verbose="Condition &apos;t&lt;=0&apos; is always true" cwe="571" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="441" column="14" info="Condition &apos;t&lt;=0&apos; is always true"/>
            <location file="servers/physics_3d/gjk_epa.cpp" line="440" column="9" info="Assuming that condition &apos;t&gt;=1&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ns&apos; can be reduced." verbose="The scope of the variable &apos;ns&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="248" column="15"/>
            <symbol>ns</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valid&apos; can be reduced." verbose="The scope of the variable &apos;valid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/gjk_epa.cpp">
            <location file="servers/physics_3d/gjk_epa.cpp" line="682" column="16"/>
            <symbol>valid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="38" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="45" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;rid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;rid&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.cpp" line="52" column="2"/>
            <symbol>rid</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_area_3d.h" line="238" column="17"/>
            <symbol>AreaCMP</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GodotSoftBodyShape3D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GodotSoftBodyShape3D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/physics_3d/godot_area_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.h" line="272" column="2"/>
            <symbol>GodotSoftBodyShape3D</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_A&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_A&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="752" column="3"/>
            <symbol>margin_A</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;margin_B&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;margin_B&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="753" column="3"/>
            <symbol>margin_B</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;edges_start_A&apos; can be declared with const" verbose="Variable &apos;edges_start_A&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1320" column="6" info="Variable &apos;edges_start_A&apos; can be declared with const"/>
            <symbol>edges_start_A</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;edges_end_A&apos; can be declared with const" verbose="Variable &apos;edges_end_A&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1321" column="6" info="Variable &apos;edges_end_A&apos; can be declared with const"/>
            <symbol>edges_end_A</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1813" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="2207" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1003" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;vertex&apos; can be declared with const" verbose="Variable &apos;vertex&apos; can be declared with const" cwe="398" file0="servers/physics_3d/godot_collision_solver_3d_sat.cpp">
            <location file="servers/physics_3d/godot_collision_solver_3d_sat.cpp" line="1486" column="10" info="Variable &apos;vertex&apos; can be declared with const"/>
            <symbol>vertex</symbol>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;vertex[3]&apos; accessed at index -1, which is out of bounds." verbose="Array &apos;vertex[3]&apos; accessed at index -1, which is out of bounds." cwe="786" file0="servers/physics_3d/godot_shape_3d.cpp">
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1136" column="15" info="Negative array index"/>
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1130" column="14" info="Assuming condition is false"/>
            <location file="servers/physics_3d/godot_shape_3d.cpp" line="1124" column="26" info="Assignment &apos;vert_support_idx=-1&apos;, assigned value is -1"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;gravity&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;gravity&apos; is reassigned a value before the old one has been used." cwe="563" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="1008" column="16" info="gravity is overwritten"/>
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="1007" column="16" info="gravity is assigned"/>
            <symbol>gravity</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="601" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="601" column="14"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lr&apos; can be reduced." verbose="The scope of the variable &apos;lr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="726" column="8"/>
            <symbol>lr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ar&apos; can be reduced." verbose="The scope of the variable &apos;ar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="727" column="6"/>
            <symbol>ar</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;br&apos; can be reduced." verbose="The scope of the variable &apos;br&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="727" column="10"/>
            <symbol>br</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;link_num&apos; can be reduced." verbose="The scope of the variable &apos;link_num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/physics_3d/godot_soft_body_3d.cpp">
            <location file="servers/physics_3d/godot_soft_body_3d.cpp" line="731" column="40"/>
            <symbol>link_num</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;body_linear_velocity_sleep_threshold&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;body_linear_velocity_sleep_threshold&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/godot_space_3d.cpp">
            <location file="servers/physics_3d/godot_space_3d.cpp" line="1237" column="2"/>
            <symbol>body_linear_velocity_sleep_threshold</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;profile_begtime&apos; is assigned a value that is never used." verbose="Variable &apos;profile_begtime&apos; is assigned a value that is never used." cwe="563" file0="servers/physics_3d/godot_step_3d.cpp">
            <location file="servers/physics_3d/godot_step_3d.cpp" line="399" column="19"/>
            <symbol>profile_begtime</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbAFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbAFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp" line="92" column="2"/>
            <symbol>m_rbAFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbBFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbBFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_cone_twist_joint_3d.cpp" line="93" column="2"/>
            <symbol>m_rbBFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbAFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbAFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_hinge_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_hinge_joint_3d.cpp" line="75" column="2"/>
            <symbol>m_rbAFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_rbBFrame&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_rbBFrame&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_hinge_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_hinge_joint_3d.cpp" line="76" column="2"/>
            <symbol>m_rbBFrame</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_pivotInA&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_pivotInA&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_pin_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_pin_joint_3d.cpp" line="173" column="2"/>
            <symbol>m_pivotInA</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_pivotInB&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_pivotInB&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/physics_3d/joints/godot_pin_joint_3d.cpp">
            <location file="servers/physics_3d/joints/godot_pin_joint_3d.cpp" line="174" column="2"/>
            <symbol>m_pivotInB</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::radius_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::radius_cache&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="97" column="3"/>
            <symbol>Light::radius_cache</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandNinePatch::margin&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandNinePatch::margin&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="223" column="4"/>
            <symbol>CommandNinePatch::margin</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandPrimitive::point_count&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandPrimitive::point_count&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="248" column="4"/>
            <symbol>CommandPrimitive::point_count</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;color&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="100" column="4"/>
            <symbol>color</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;final_modulate&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;final_modulate&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="554" column="4"/>
            <symbol>final_modulate</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;cull_cache&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;cull_cache&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_canvas_render.cpp">
            <location file="servers/rendering/renderer_canvas_render.h" line="601" column="4"/>
            <symbol>cull_cache</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;state_uniform&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;state_uniform&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/cluster_builder_rd.cpp">
            <location file="servers/rendering/renderer_rd/cluster_builder_rd.cpp" line="541" column="2"/>
            <symbol>state_uniform</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.cpp" line="285" column="2"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BokehDOF&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BokehDOF&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/bokeh_dof.h" line="111" column="2"/>
            <symbol>BokehDOF</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CopyEffects&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CopyEffects&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects/bokeh_dof.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.h" line="197" column="2"/>
            <symbol>CopyEffects</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="59" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="88" column="3"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="148" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="199" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="236" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="275" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="314" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="349" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="401" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="417" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="432" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="470" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="521" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="592" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="626" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/copy_effects.cpp">
            <location file="servers/rendering/renderer_rd/effects/copy_effects.cpp" line="657" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/tone_mapper.cpp">
            <location file="servers/rendering/renderer_rd/effects/tone_mapper.cpp" line="90" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects/tone_mapper.cpp">
            <location file="servers/rendering/renderer_rd/effects/tone_mapper.cpp" line="186" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="219" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="674" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="952" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1230" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1258" column="2"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1532" column="3"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EffectsRD&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EffectsRD&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.h" line="725" column="2"/>
            <symbol>EffectsRD</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="751" column="7" info="Second condition"/>
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="724" column="7" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1018" column="7" info="Second condition"/>
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="998" column="7" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1045" column="7" info="Second condition"/>
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1018" column="7" info="First condition"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;blur_pipeline&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;blur_pipeline&apos; is reassigned a value before the old one has been used." cwe="563" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="837" column="20" info="blur_pipeline is overwritten"/>
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="835" column="19" info="blur_pipeline is assigned"/>
            <symbol>blur_pipeline</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;b&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;b&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1604" column="8" info="b is overwritten"/>
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1601" column="12" info="b is initialized"/>
            <symbol>b</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;spmap&apos; can be declared with const" verbose="Variable &apos;spmap&apos; can be declared with const" cwe="398" file0="servers/rendering/renderer_rd/effects_rd.cpp">
            <location file="servers/rendering/renderer_rd/effects_rd.cpp" line="1603" column="10" info="Variable &apos;spmap&apos; can be declared with const"/>
            <symbol>spmap</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GeometryInstanceForwardClustered::lightmap_slice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;GeometryInstanceForwardClustered::lightmap_slice_index&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="524" column="3"/>
            <symbol>GeometryInstanceForwardClustered::lightmap_slice_index</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;render_pass_uniform_set&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;render_pass_uniform_set&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="186" column="4"/>
            <symbol>render_pass_uniform_set</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;uv_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;uv_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="188" column="4"/>
            <symbol>uv_offset</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;lod_plane&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;lod_plane&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="189" column="4"/>
            <symbol>lod_plane</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardClustered(RendererStorageRD*p_storage)&apos; at line 3259. Dynamic binding is not used." verbose="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardClustered(RendererStorageRD*p_storage)&apos; at line 3259. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="604" column="15" info="_update_shader_quality_settings is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp" line="3259" column="2" info="Calling _update_shader_quality_settings"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RenderForwardClustered&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RenderForwardClustered&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h" line="659" column="2"/>
            <symbol>RenderForwardClustered</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp" line="453" column="42"/>
            <symbol>ShaderData::depth_draw</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp">
            <location file="servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.cpp" line="453" column="42"/>
            <symbol>ShaderData::depth_test</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GeometryInstanceForwardMobile::lightmap_slice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;GeometryInstanceForwardMobile::lightmap_slice_index&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="603" column="3"/>
            <symbol>GeometryInstanceForwardMobile::lightmap_slice_index</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;render_pass_uniform_set&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;render_pass_uniform_set&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="193" column="4"/>
            <symbol>render_pass_uniform_set</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;uv_offset&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;uv_offset&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="195" column="4"/>
            <symbol>uv_offset</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;lod_plane&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;lod_plane&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="196" column="4"/>
            <symbol>lod_plane</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_render_buffers_get_color_format&apos; is called from constructor &apos;RenderForwardMobile(RendererStorageRD*p_storage)&apos; at line 2692. Dynamic binding is not used." verbose="Virtual function &apos;_render_buffers_get_color_format&apos; is called from constructor &apos;RenderForwardMobile(RendererStorageRD*p_storage)&apos; at line 2692. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="206" column="25" info="_render_buffers_get_color_format is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="2692" column="25" info="Calling _render_buffers_get_color_format"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardMobile(RendererStorageRD*p_storage)&apos; at line 2726. Dynamic binding is not used." verbose="Virtual function &apos;_update_shader_quality_settings&apos; is called from constructor &apos;RenderForwardMobile(RendererStorageRD*p_storage)&apos; at line 2726. Dynamic binding is not used." file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="609" column="7" info="_update_shader_quality_settings is a virtual function"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="2726" column="2" info="Calling _update_shader_quality_settings"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RenderForwardMobile&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RenderForwardMobile&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h" line="669" column="2"/>
            <symbol>RenderForwardMobile</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;using_ssr&apos; is always false" verbose="Condition &apos;using_ssr&apos; is always false" cwe="570" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="535" column="7" info="Condition &apos;using_ssr&apos; is always false"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="507" column="19" info="Assignment &apos;using_ssr=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;using_sss&apos; is always false" verbose="Condition &apos;using_sss&apos; is always false" cwe="570" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="535" column="20" info="Condition &apos;using_sss&apos; is always false"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="508" column="19" info="Assignment &apos;using_sss=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;draw_sky_fog_only&apos; is always false" verbose="Condition &apos;draw_sky_fog_only&apos; is always false" cwe="570" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="659" column="18" info="Condition &apos;draw_sky_fog_only&apos; is always false"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="582" column="27" info="Assignment &apos;draw_sky_fog_only=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!force_alpha&apos; is always true" verbose="Condition &apos;!force_alpha&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1479" column="9" info="Condition &apos;!force_alpha&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1477" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;force_alpha&apos; is always false" verbose="Condition &apos;force_alpha&apos; is always false" cwe="570" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1482" column="9" info="Condition &apos;force_alpha&apos; is always false"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="1477" column="24" info="Assignment &apos;force_alpha=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;using_ssr&apos; and &apos;using_sss&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="535" column="17"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="508" column="19" info="&apos;using_sss&apos; is assigned value &apos;false&apos; here."/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="507" column="19" info="&apos;using_ssr&apos; is assigned value &apos;false&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;&amp;&amp;&apos; because &apos;!using_sss&apos; and &apos;!using_ssr&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="722" column="106"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="507" column="19" info="&apos;using_ssr&apos; is assigned value &apos;false&apos; here."/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="508" column="19" info="&apos;using_sss&apos; is assigned value &apos;false&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;&amp;&amp;&apos; because &apos;!using_sss&apos; and &apos;!using_ssr&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="723" column="105"/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="507" column="19" info="&apos;using_ssr&apos; is assigned value &apos;false&apos; here."/>
            <location file="servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.cpp" line="508" column="19" info="&apos;using_sss&apos; is assigned value &apos;false&apos; here."/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_draw&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp" line="416" column="39"/>
            <symbol>ShaderData::depth_draw</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderData::depth_test&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp">
            <location file="servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.cpp" line="416" column="39"/>
            <symbol>ShaderData::depth_test</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererCanvasRenderRD::items&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererCanvasRenderRD::items&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="2273" column="25"/>
            <symbol>RendererCanvasRenderRD::items</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RendererCanvasRenderRD&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RendererCanvasRenderRD&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.h" line="465" column="2"/>
            <symbol>RendererCanvasRenderRD</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;local_coords&apos; is always true" verbose="Condition &apos;local_coords&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="816" column="11" info="Condition &apos;local_coords&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="795" column="14" info="Assuming condition is false"/>
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="793" column="26" info="Assignment &apos;local_coords=true&apos;, assigned value is 1"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="136" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="1846" column="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;local_coords&apos; can be reduced." verbose="The scope of the variable &apos;local_coords&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_canvas_render_rd.cpp" line="793" column="11"/>
            <symbol>local_coords</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererCompositorRD::blit&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererCompositorRD::blit&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_compositor_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_compositor_rd.cpp" line="248" column="23"/>
            <symbol>RendererCompositorRD::blit</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;sdfgi_ray_count&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;sdfgi_ray_count&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp" line="2816" column="2"/>
            <symbol>sdfgi_ray_count</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;half_size&apos; is always true" verbose="Condition &apos;half_size&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp" line="1707" column="7" info="Condition &apos;half_size&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp" line="1704" column="20" info="Assignment &apos;half_size=true&apos;, assigned value is 1"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;probe_half_size&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;probe_half_size&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp" line="810" column="19" info="probe_half_size is overwritten"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp" line="809" column="27" info="probe_half_size is initialized"/>
            <symbol>probe_half_size</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cc&apos; can be reduced." verbose="The scope of the variable &apos;cc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_gi_rd.cpp" line="2009" column="19"/>
            <symbol>cc</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererSceneRenderRD::cluster&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererSceneRenderRD::cluster&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="5681" column="24"/>
            <symbol>RendererSceneRenderRD::cluster</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererSceneRenderRD::render_state&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererSceneRenderRD::render_state&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="5681" column="24"/>
            <symbol>RendererSceneRenderRD::render_state</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererSceneRenderRD::volumetric_fog&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererSceneRenderRD::volumetric_fog&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="5681" column="24"/>
            <symbol>RendererSceneRenderRD::volumetric_fog</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::shadow_transform&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::shadow_transform&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="394" column="3"/>
            <symbol>LightInstance::shadow_transform</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_dynamic_gi_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 5925. Dynamic binding is not used." verbose="Virtual function &apos;is_dynamic_gi_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 5925. Dynamic binding is not used." file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="1493" column="15" info="is_dynamic_gi_supported is a virtual function"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="5925" column="6" info="Calling is_dynamic_gi_supported"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;is_volumetric_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 5929. Dynamic binding is not used." verbose="Virtual function &apos;is_volumetric_supported&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 5929. Dynamic binding is not used." file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="1495" column="15" info="is_volumetric_supported is a virtual function"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="5929" column="6" info="Calling is_volumetric_supported"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;directional_shadow_atlas_set_size&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 5961. Dynamic binding is not used." verbose="Virtual function &apos;directional_shadow_atlas_set_size&apos; is called from destructor &apos;~RendererSceneRenderRD()&apos; at line 5961. Dynamic binding is not used." file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.h" line="1011" column="15" info="directional_shadow_atlas_set_size is a virtual function"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="5961" column="2" info="Calling directional_shadow_atlas_set_size"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;env&apos; is always true" verbose="Condition &apos;env&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="4165" column="6" info="Condition &apos;env&apos; is always true"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;min&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;min&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="4379" column="9" info="min is overwritten"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="4360" column="17" info="min is initialized"/>
            <symbol>min</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;kernel_size&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;kernel_size&apos;. The initialized value is overwritten before it is read." cwe="563" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="4387" column="17" info="kernel_size is overwritten"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="4362" column="25" info="kernel_size is initialized"/>
            <symbol>kernel_size</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;should_realloc&apos; can be reduced." verbose="The scope of the variable &apos;should_realloc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="1187" column="7"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_glow_level&apos; can be reduced." verbose="The scope of the variable &apos;max_glow_level&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="2469" column="6"/>
            <symbol>max_glow_level</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_begin&apos; can be reduced." verbose="The scope of the variable &apos;fade_begin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="3564" column="9"/>
            <symbol>fade_begin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fade_length&apos; can be reduced." verbose="The scope of the variable &apos;fade_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="3565" column="9"/>
            <symbol>fade_length</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;should_realloc&apos; is assigned a value that is never used." verbose="Variable &apos;should_realloc&apos; is assigned a value that is never used." cwe="563" file0="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_render_rd.cpp" line="1187" column="22"/>
            <symbol>should_realloc</symbol>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="servers/rendering/renderer_rd/renderer_scene_sky_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_sky_rd.cpp" line="273" column="2"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RendererSceneSkyRD::sky_scene_state&apos; is not initialized in the constructor." verbose="Member variable &apos;RendererSceneSkyRD::sky_scene_state&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_sky_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_sky_rd.cpp" line="792" column="21"/>
            <symbol>RendererSceneSkyRD::sky_scene_state</symbol>
        </error>
        <error id="duplicateAssignExpression" severity="style" msg="Same expression used in consecutive assignments of &apos;w&apos; and &apos;h&apos;." verbose="Finding variables &apos;w&apos; and &apos;h&apos; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="servers/rendering/renderer_rd/renderer_scene_sky_rd.cpp">
            <location file="servers/rendering/renderer_rd/renderer_scene_sky_rd.cpp" line="1757" column="13"/>
            <location file="servers/rendering/renderer_rd/renderer_scene_sky_rd.cpp" line="1757" column="37"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="286" column="4"/>
            <symbol>format</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;format_srgb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;format_srgb&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="287" column="4"/>
            <symbol>format_srgb</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_r&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_r&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="288" column="4"/>
            <symbol>swizzle_r</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_g&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_g&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="289" column="4"/>
            <symbol>swizzle_g</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_b&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="290" column="4"/>
            <symbol>swizzle_b</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;swizzle_a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;swizzle_a&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.h" line="291" column="4"/>
            <symbol>swizzle_a</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;using_lightmap_array&apos; is always true" verbose="Condition &apos;using_lightmap_array&apos; is always true" cwe="571" file0="servers/rendering/renderer_rd/storage_rd/light_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="49" column="6" info="Condition &apos;using_lightmap_array&apos; is always true"/>
            <location file="servers/rendering/renderer_rd/storage_rd/light_storage.cpp" line="48" column="25" info="Assignment &apos;using_lightmap_array=true&apos;, assigned value is 1"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="342" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="364" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="388" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="448" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="528" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="569" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="624" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="785" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="790" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="798" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="806" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="813" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="826" column="17"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="842" column="17"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: gv.buffer_elements" verbose="Uninitialized struct member: gv.buffer_elements" cwe="457" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1938" column="39"/>
            <symbol>gv.buffer_elements</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: gv.buffer_elements" verbose="Uninitialized variable: gv.buffer_elements" cwe="457" file0="servers/rendering/renderer_rd/storage_rd/material_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1938" column="39"/>
            <location file="servers/rendering/renderer_rd/storage_rd/material_storage.cpp" line="1910" column="13" info="Assuming condition is true"/>
            <symbol>gv</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp" line="124" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp">
            <location file="servers/rendering/renderer_rd/storage_rd/mesh_storage.cpp" line="1241" column="24"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: fnode" verbose="Possible null pointer dereference: fnode" cwe="476" file0="servers/rendering/shader_compiler.cpp">
            <location file="servers/rendering/shader_compiler.cpp" line="332" column="7" info="Null pointer dereference"/>
            <location file="servers/rendering/shader_compiler.cpp" line="320" column="21" info="Assuming condition is false"/>
            <location file="servers/rendering/shader_compiler.cpp" line="318" column="29" info="Assignment &apos;fnode=nullptr&apos;, assigned value is 0"/>
            <symbol>fnode</symbol>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &apos;args[j]==TYPE_STRUCT&apos; is redundant or the array &apos;scalar_types[24]&apos; is accessed at index 31, which is out of bounds." verbose="Either the condition &apos;args[j]==TYPE_STRUCT&apos; is redundant or the array &apos;scalar_types[24]&apos; is accessed at index 31, which is out of bounds." cwe="788" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4102" column="21" info="Array index out of bounds"/>
            <location file="servers/rendering/shader_language.cpp" line="3147" column="28" info="Calling function &apos;get_scalar_type&apos;, 1st argument &apos;args[j]&apos; value is 31"/>
            <location file="servers/rendering/shader_language.cpp" line="3149" column="63" info="Assuming that condition &apos;args[j]==TYPE_STRUCT&apos; is not redundant"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::completion_type&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::completion_type&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="9982" column="17"/>
            <symbol>ShaderLanguage::completion_type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::completion_base&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::completion_base&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="9982" column="17"/>
            <symbol>ShaderLanguage::completion_base</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Varying::tkpos&apos; is not initialized in the constructor." verbose="Member variable &apos;Varying::tkpos&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="650" column="4"/>
            <symbol>Varying::tkpos</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderLanguage::_lookup_next&apos;" verbose="Unused private function: &apos;ShaderLanguage::_lookup_next&apos;" cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="980" column="7"/>
            <symbol>ShaderLanguage::_lookup_next</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;fragment&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;fragment&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="345" column="4"/>
            <symbol>fragment</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vertex&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vertex&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="346" column="4"/>
            <symbol>vertex</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;light&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;light&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="347" column="4"/>
            <symbol>light</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="799" column="5"/>
            <symbol>name</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Node&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Node&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="376" column="3"/>
            <symbol>Node</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;BuiltInInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;BuiltInInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="788" column="3"/>
            <symbol>BuiltInInfo</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ModeInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ModeInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="814" column="3"/>
            <symbol>ModeInfo</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;vn&apos; is always true" verbose="Condition &apos;vn&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4424" column="10" info="Condition &apos;vn&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;((int)tk.constant)&gt;0&apos; is always true" verbose="Condition &apos;((int)tk.constant)&gt;0&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4453" column="33" info="Condition &apos;((int)tk.constant)&gt;0&apos; is always true"/>
            <location file="servers/rendering/shader_language.cpp" line="4418" column="55" info="Assuming that condition &apos;((int)tk.constant)&lt;=0&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cnode&apos; is always true" verbose="Condition &apos;cnode&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="5254" column="12" info="Condition &apos;cnode&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;cnode&apos; is always true" verbose="Condition &apos;cnode&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="5714" column="12" info="Condition &apos;cnode&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;const_node&apos; is always true" verbose="Condition &apos;const_node&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="6904" column="11" info="Condition &apos;const_node&apos; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;b&apos; is always true" verbose="Condition &apos;b&apos; is always true" cwe="571" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="7365" column="8" info="Condition &apos;b&apos; is always true"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;tk&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;tk&apos; is reassigned a value before the old one has been used." cwe="563" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="9226" column="6" info="tk is overwritten"/>
            <location file="servers/rendering/shader_language.cpp" line="8504" column="10" info="tk is assigned"/>
            <symbol>tk</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;full_def&apos; can be reduced." verbose="The scope of the variable &apos;full_def&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="6691" column="11"/>
            <symbol>full_def</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: tk.constant" verbose="Uninitialized struct member: tk.constant" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="237" column="9"/>
            <symbol>tk.constant</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: var.value" verbose="Uninitialized struct member: var.value" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="6923" column="32"/>
            <symbol>var.value</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tk.constant" verbose="Uninitialized variable: tk.constant" cwe="457" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="237" column="9"/>
            <symbol>tk</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;type&apos; is assigned a value that is never used." verbose="Variable &apos;type&apos; is assigned a value that is never used." cwe="563" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="4565" column="16"/>
            <symbol>type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderLanguage::keyword_completion_context&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderLanguage::keyword_completion_context&apos; is not initialized in the constructor." cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.cpp" line="9982" column="17"/>
            <symbol>ShaderLanguage::keyword_completion_context</symbol>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ShaderLanguage::_add_global_warning&apos;" verbose="Unused private function: &apos;ShaderLanguage::_add_global_warning&apos;" cwe="398" file0="servers/rendering/shader_language.cpp">
            <location file="servers/rendering/shader_language.h" line="914" column="7"/>
            <symbol>ShaderLanguage::_add_global_warning</symbol>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1096" column="25"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1110" column="25"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1173" column="23"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1187" column="23"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned char * and const float * which have an incompatible binary data representation." cwe="704" file0="servers/rendering_server.cpp">
            <location file="servers/rendering_server.cpp" line="1231" column="25"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" file0="servers/text_server.cpp">
            <location file="servers/text_server.cpp" line="1597" column="23"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;type&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/xr/xr_positional_tracker.cpp">
            <location file="servers/xr/xr_positional_tracker.cpp" line="223" column="2"/>
            <symbol>type</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="servers/xr/xr_positional_tracker.cpp">
            <location file="servers/xr/xr_positional_tracker.cpp" line="224" column="2"/>
            <symbol>name</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;RenderingDeviceVulkan::DrawList::Validation&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;RenderingDeviceVulkan::DrawList::Validation&apos;" cwe="758">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="878" column="3"/>
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="850" column="3"/>
            <symbol>RenderingDeviceVulkan::DrawList::Validation</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; Array * , MonoObject * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; Array * , MonoObject * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; Array * , MonoObject * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; Dictionary * , MonoObject * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; Dictionary * , MonoObject * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; Dictionary * , MonoObject * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoObject * , MonoObject * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoObject * , MonoObject * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; MonoBoolean , MonoObject * , MonoObject * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoDelegate * , MonoObject * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoDelegate * , MonoObject * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; MonoBoolean , MonoDelegate * , MonoObject * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoObject * , MonoDelegate * * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoObject * , MonoDelegate * * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; MonoBoolean , MonoObject * , MonoDelegate * * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoReflectionType * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoBoolean , MonoReflectionType * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; MonoBoolean , MonoReflectionType * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoReflectionType * , MonoReflectionType * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoReflectionType * , MonoReflectionType * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; MonoReflectionType * , MonoReflectionType * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoReflectionType * , MonoReflectionType * , MonoReflectionType * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoReflectionType * , MonoReflectionType * , MonoReflectionType * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; MonoReflectionType * , MonoReflectionType * , MonoReflectionType * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoObject * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoObject * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="49" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="243" column="1"/>
            <symbol>GDMonoMethodThunk &lt; MonoObject * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoObject * , MonoArray * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoObject * , MonoArray * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="49" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="243" column="1"/>
            <symbol>GDMonoMethodThunk &lt; MonoObject * , MonoArray * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoReflectionType * , MonoReflectionType * * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoReflectionType * , MonoReflectionType * * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="49" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="243" column="1"/>
            <symbol>GDMonoMethodThunk &lt; MonoReflectionType * , MonoReflectionType * * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoReflectionType * , MonoReflectionType * * , MonoReflectionType * * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoReflectionType * , MonoReflectionType * * , MonoReflectionType * * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="49" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="243" column="1"/>
            <symbol>GDMonoMethodThunk &lt; MonoReflectionType * , MonoReflectionType * * , MonoReflectionType * * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoArray * , MonoObject * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunkR &lt; MonoArray * , MonoObject * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="91" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="281" column="1"/>
            <symbol>GDMonoMethodThunkR &lt; MonoArray * , MonoObject * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoObject * , MonoString * * , int * , MonoString * * &gt;&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;GDMonoMethodThunk &lt; MonoObject * , MonoString * * , int * , MonoString * * &gt;&apos;" cwe="758">
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="49" column="1"/>
            <location file="modules/mono/mono_gd/gd_mono_method_thunk.h" line="243" column="1"/>
            <symbol>GDMonoMethodThunk &lt; MonoObject * , MonoString * * , int * , MonoString * * &gt;</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;AudioDriverWorklet&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;AudioDriverWorklet&apos;" cwe="758">
            <location file="platform/javascript/audio_driver_javascript.h" line="132" column="1"/>
            <location file="platform/javascript/audio_driver_javascript.h" line="112" column="1"/>
            <symbol>AudioDriverWorklet</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;CrashHandler&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;CrashHandler&apos;" cwe="758">
            <location file="platform/linuxbsd/crash_handler_linuxbsd.h" line="34" column="1"/>
            <location file="platform/windows/crash_handler_windows.h" line="44" column="1"/>
            <symbol>CrashHandler</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;_WinTranslatePair&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;_WinTranslatePair&apos;" cwe="758">
            <location file="platform/android/android_keys_utils.h" line="37" column="1"/>
            <location file="platform/windows/key_mapping_windows.cpp" line="39" column="1"/>
            <symbol>_WinTranslatePair</symbol>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &apos;_MinSizeCache&apos;" verbose="The one definition rule is violated, different classes/structs have the same name &apos;_MinSizeCache&apos;" cwe="758">
            <location file="scene/gui/box_container.cpp" line="36" column="1"/>
            <location file="scene/gui/graph_node.cpp" line="39" column="1"/>
            <symbol>_MinSizeCache</symbol>
        </error>
        <error id="ctuuninitvar" severity="error" msg="Using argument rt that points at uninitialized variable render_target" verbose="Using argument rt that points at uninitialized variable render_target" cwe="457">
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.cpp" line="2062" column="6" info="Using argument rt"/>
            <location file="servers/rendering/renderer_rd/storage_rd/texture_storage.cpp" line="2200" column="23" info="Calling function _update_render_target, 1st argument is uninitialized"/>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
